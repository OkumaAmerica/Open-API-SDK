

namespace Okuma.Scout.TestApp.net4.Helpers
{
    using System;
    using System.Windows;  

    public static class ErrorHandler
    {
        /// <summary> The Scout Error Reporter is linked to this Event when subscribed.
        /// This event is used for handling all errors in the test application, including those from Scout. </summary>
        public static event EventHandler<MessageArgs> AppErrorReporterEvent;

        private static bool SubscribedToScoutErrorHandler = true;

        public static void GenerateInfo()
        {
            Okuma.Scout.Error.TestReporter(Okuma.Scout.Enums.MessageLevel.Information);
        }

        public static void GenerateWarning()
        {
            Okuma.Scout.Error.TestReporter(Okuma.Scout.Enums.MessageLevel.Warning);
        }

        public static void GenerateError()
        {
            Okuma.Scout.Error.TestReporter(Okuma.Scout.Enums.MessageLevel.Error);
        }

        public static void GenerateException()
        {
            System.Threading.Thread test = new System.Threading.Thread(new System.Threading.ThreadStart(testMethod));
            test.Name = "ExceptionTest";
            test.Priority = System.Threading.ThreadPriority.Normal;
            test.Start();
        }

        /// <summary> Confirm that exceptions are handled even when Scout functions 
        /// are called from a different thread </summary>
        private static void testMethod()
        {
            Okuma.Scout.Error.TestReporter(Okuma.Scout.Enums.MessageLevel.Exception);
        }

        /// <summary>
        /// Subscribe to this event to view diagnostic information from Scout.dll 
        /// and handle any exceptions generated by the library.
        /// If this event is not subscribed to, SCOUT may generate unhandled 
        /// exceptions. Additionally, minor errors / diagnostic information will 
        /// be invisible / hidden from the user. </summary>
        public static void SubscribeToScoutErrorHandler()
        {
            Okuma.Scout.Error.ReporterEvent += HandleError;
            SubscribedToScoutErrorHandler = true;
        }

        /// <summary>
        /// Remember to unsubscribe from this event when Scout functionality
        /// is no longer required. As long as the Reporter Event is 
        /// subscribed to, Scout.dll will be held in memory and not 
        /// garbage collected by the CLR; even if the class which uses
        /// Scout functionality loses scope. </summary>
        public static void UnSubscribeFromScoutErrorHandler()
        {
            Okuma.Scout.Error.ReporterEvent -= HandleError;
            SubscribedToScoutErrorHandler = false;
        }
     
        /// <summary> Thread-safe Error Handler </summary>
        /// <remarks> This method accepts error events from the SCOUT library 
        /// and connects them to the test application's error handler. </remarks>
        public static void HandleError(object sender, MessageArgs e)
        {
            //// DEBUG FOR TESTING!!
            //Application.Current.Dispatcher.BeginInvoke(
            //    System.Windows.Threading.DispatcherPriority.Normal,
            //    new Action(() =>
            //    {
            //        MessageBox.Show(string.Format("{0}: {1}", e.Severity, e.Message  ), "DEBUG: NEW MESSAGE");
            //    }));
            //// // // //

            if (SubscribedToScoutErrorHandler)
            {
                Application.Current.Dispatcher.BeginInvoke(
                    System.Windows.Threading.DispatcherPriority.Normal,
                    new Action(() =>
                    {
                        var ea = AppErrorReporterEvent; // avoid race condition
                        if (null != ea) // avoid null condition 
                            ea(null, e);
                    }));
            }
            else if (e.Severity == Enums.MessageLevel.Exception)
            {
                Exception NewException = e.Exception;
                throw NewException;
            }
        }

    }
}
