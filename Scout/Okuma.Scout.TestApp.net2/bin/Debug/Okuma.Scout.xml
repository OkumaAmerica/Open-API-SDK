<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Okuma.Scout</name>
    </assembly>
    <members>
        <member name="T:Okuma.Scout.AccessGAC">
            <summary> 
            
            This class provides access to the Global Assembly Cache 
            
            </summary>
        </member>
        <member name="M:Okuma.Scout.AccessGAC.QueryGAC(System.String)">
            <summary> 
            Returns a list of unique assembly identities found in the GAC for a given assembly name </summary>
            <param name="assemblyName"> [in] Generic Assembly Name </param>
            <returns> List of type System.Reflection.AssemblyName </returns>
        </member>
        <member name="M:Okuma.Scout.AccessGAC.QueryLatest(System.String,System.Reflection.AssemblyName@)">
            <summary> 
            Returns the latest (highest version number) assembly identity found in the GAC for a given assembly name </summary>
            <param name="assemblyName"> [in] Generic Assembly Name </param>
            <param name="Assembly"> [out] Object of type AssemblyName </param>
            <returns> True if result found else False. 
            The out parameter "Assembly" will be null in case of exception or no result found </returns>
        </member>
        <member name="M:Okuma.Scout.AccessGAC.QueryLatestAssemblyPath(System.String,System.String@)">
            <summary> INTERNAL
            Extends the QueryLatest method to return the code base </summary>
            <param name="AssemblyName"> [in] name of the thing your looking for </param>
            <param name="Path"> [out] the return path </param>
            <returns> True if found, else False and Path will be null or string.empty </returns>
        </member>
        <member name="M:Okuma.Scout.AccessGAC.AssemblyVersionCompare(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary> INTERNAL
            Executes AN1.Version.CompareTo(AN2.Version) </summary>
            <param name="AN1"> [in] Assembly Name 1 </param>
            <param name="AN2"> [in] Assembly Name 2 </param>
            <returns> List containing the higher version AssemblyName or both if equal </returns>
        </member>
        <member name="M:Okuma.Scout.AccessGAC.AssemblyArchitectureCompare(System.Collections.Generic.List{System.Reflection.AssemblyName})">
            <summary> INTERNAL
            Try to return only the assemblyName that matches the OS in terms of Architecture. </summary>
            <param name="ANList"> [in] Filtered list of assemblyNames that should all 
            have the same version and only vary based on Architecture. </param>
            <returns> a single assemblyName </returns>
        </member>
        <member name="M:Okuma.Scout.AccessGAC.GetAssemblyNameObjectsFromGAC(System.String)">
            <summary> PRIVATE
            Get a list of objects representing assemblies found in the GAC. 
            This method manually populates the "CodeBase" field in the class objects. </summary>
            <param name="asm"> [in] assembly name string (minus extension) </param>
            <returns> List of class objects of type AssemblyName. Returns empty list of nothing found. </returns>
            <remarks> GetInstalledVersions eats HRRESULT = 1 (normal return value for no results) so doesn't throw exception </remarks>
        </member>
        <member name="M:Okuma.Scout.AccessGAC.Base_GetAssemblyNameObjectsFromGAC(System.String)">
            <summary> PRIVATE
            Uses Microsoft Fusion API calls to query the Global Assembly Cache </summary>
            <param name="name"> [in] the file name (minus extension) to search the GAC for </param>
            <returns> A generic collection of AssemblyName objects </returns>
        </member>
        <member name="M:Okuma.Scout.AccessGAC.GetGACAssemblyPath(System.Reflection.AssemblyName)">
            <summary> PRIVATE
            Uses Microsoft Fusion API to get the full path to an AssemblyName object in the GAC </summary>
            <param name="assemblyName"> System Reflection assemblyName object </param>
            <returns> type string currentAssemblyPath or string.empty if error </returns>
        </member>
        <member name="T:Okuma.Scout.DMC">
            <summary> 
            
            This class reads Data Management Cards (OSPMNGCD.CNC files) 
            
            </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.DMCString">
            <summary>
            Backed by a private property, the getter will attempt to read the Data Management Card 
            if its backing property doesn't contain the data already. If the DMC cannot be found
            or some other error happens, it will return string.Empty. </summary>
            <remarks> This property returns the entire contents of the data management card. </remarks>
        </member>
        <member name="P:Okuma.Scout.DMC.DMC_ErrorMessage">
            <summary> 
            This is the string value returned if an error is encountered during the 
            Data Management Card item retrieval process. (Does not apply to 'DMCString')
            Typically this only occurs if the DMC is not found. </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.OSPType">
            <summary> 
            Returns the entry associated with "Type of OSP" from the Data Management Card </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.MachineType">
            <summary> 
            Type of Okuma machine represented by this Class instance. </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.SoftwareProductionNo">
            <summary> Software production number </summary>
            <remarks> Not to be confused with Project Number </remarks>
        </member>
        <member name="P:Okuma.Scout.DMC.SerialNumber">
            <summary> 
            Okuma serial number of the machine represented by this Class instance. </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.SoftwareProductionDate">
            <summary> 
            Date on which the software installed to the current machine was produced by Okuma. </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.CustomerName">
            <summary> 
            Data Management Card entry for 'Customer Data, Name' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.CustomerAddress">
            <summary> 
            Data Management Card entry for 'Customer Data, Address'  </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.CustomerPhone">
            <summary> 
            Data Management Card entry for 'Customer Data, Phone' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.Customer">
            <summary> 
            Data Management Card entry for 'Customer Data, Customer' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.NoteOne">
            <summary> 
            Data Management Card entry for 'Note, Note NO.1' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.NoteSpecialSpec">
            <summary> 
            Data Management Card entry for 'Note, Special Spec' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.NoteComment">
            <summary> 
            Data Management Card entry for 'Note, Comment' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.WindowsSystemCDVersion">
            <summary>
            Data Management Card entry for 'CD/DVD Media Version, Windows System' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.OSPSystemCDVersion">
            <summary> 
            Data Management Card entry for 'CD/DVD Media Version, OSP System' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.WindowsSystem">
            <summary> 
            Data Management Card entry for 'Soft Version..., Windows System' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.OTSSSampleCDVersion">
            <summary> 
            Data Management Card entry for 'Soft Version..., One-Touch SpreadSheet Sample Contents' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.ExcelVersion">
            <summary> 
            Data Management Card entry for 'Soft Version..., Microsoft Excel Version' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.CASModelsCDVersion">
            <summary> 
            Data Management Card entry for 'Soft Version..., Collision Avoidance Model Data' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.NcInstaller">
            <summary> 
            Data Management Card entry for 'NC Installer' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.RTOSDriver">
            <summary>
            Data Management Card entry for 'Real-time OS Driver' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.RTOS">
            <summary>
            Data Management Card entry for 'Real-time OS' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.NcControl">
            <summary>
            Data Management Card entry for 'NC Control' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.PLCSystem">
            <summary> 
            Data Management Card entry for 'PLC System' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.PLCSystemMsg">
            <summary> 
            Data Management Card entry for 'PLC system Message' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.P100Tool">
            <summary> 
            Data Management Card entry for 'P100 Tool' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.PLCControl">
            <summary> 
            Data Management Card entry for 'PLC Control' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.OTI">
            <summary> 
            Data Management Card entry for 'One Touch IGF' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.OTIMT">
            <summary> 
            Data Management Card entry for 'One Touch IFC Advance M Machine Type' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.OTIMsg">
            <summary> 
            Data Management Card entry for 'One Touch IGF Message' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.VFK">
            <summary>
            Data Management Card entry for 'Vertical Function Key' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.VFK2">
            <summary> 
            Data Management Card entry for 'Vertical Function Key 2' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.VFKMsg">
            <summary>
            Data Management Card entry for 'Vertical Function Key Message' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.OTSFileCntrl">
            <summary> 
            Data Management Card entry for 'One-Touch Spreadsheet File Controller' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.OTSFileCntrlMsg">
            <summary> 
            Data Management Card entry for 'One-Touch Spreadsheet File Controller Message' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.OTSPreInst">
            <summary> 
            Data Management Card entry for 'One-Touch Spreadsheet Pre-install Contents' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.ITPlaza">
            <summary> 
            Data Management Card entry for 'IT Plaza Application Common' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.CAS">
            <summary> 
            Data Management Card entry for 'Collision Avoidance System' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.EasyModel">
            <summary> 
            Data Management Card entry for Easy Modeling' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.CustomAPI">
            <summary>
            Data Management Card entry for 'custom API' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.NcControlMsg">
            <summary> 
            Data Management Card entry for 'NC Control Message' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.NcAlarmHelp">
            <summary> 
            Data Management Card entry for 'NC Alarm Help' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.NcManual">
            <summary> 
            Data Management Card entry for 'NC Manual' </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.NCSpecCode1a">
            <summary> NC Spec Code No. 1 (part 1) </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.NCSpecCode1b">
            <summary> NC Spec Code No. 1 (part 2) </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.NCBSpecCode1a">
            <summary> NC-B Spec Code No. 1 (part 1) </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.NCBSpecCode1b">
            <summary> NC-B Spec Code No. 1 (part 2) </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.PLCSpecCode1a">
            <summary> PLC Spec Code No.1 (part 1) </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.PLCSpecCode1b">
            <summary> PLC Spec Code No.1 (part 2) </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.PLCSpecCode2a">
            <summary> PLC Spec Code No.2 (part 1) </summary>
        </member>
        <member name="P:Okuma.Scout.DMC.PLCSpecCode2b">
            <summary> PLC Spec Code No.2 (part 2) </summary>
        </member>
        <member name="M:Okuma.Scout.DMC.GetMachineData(Okuma.Scout.Enums.DMC_MachineData)">
            <summary> PRIVATE
            Obtain items from the "Machine Data" section of DMC. </summary>
            <param name="item"> [in] which item </param>
            <returns> type string DMC value </returns>
        </member>
        <member name="M:Okuma.Scout.DMC.ReduceWhiteSpace(System.String)">
            <summary> PRIVATE
            Uses a regular expression to look for white space in the input string
            and calls .Replace on it with an empty string "". </summary>
            <param name="input"> [in] string to reduce white space of </param>
            <returns> string with less white space </returns>
        </member>
        <member name="M:Okuma.Scout.DMC.MultiStringToList(System.String)">
            <summary> PRIVATE
            Splits the input string in to list of strings at line breaks </summary>
            <param name="sourceString"> [in] source string containing "\n" and "\r\n" characters. </param>
            <returns> list of type string </returns>
        </member>
        <member name="M:Okuma.Scout.DMC.SearchDMC(System.Int32,Okuma.Scout.Enums.DMCSearchPattern,System.String,System.String,System.Boolean)">
            <summary> PRIVATE
            Primary string search entry method for Data Management Card items </summary>
            <param name="sn"> [in] String Number (unique ID number for each string) </param>
            <param name="Mode"> [in] search mode "filter method" </param>
            <param name="header"> [in] Line Item Header in actual DMC file </param>
            <param name="optional_var"> [opt in] Alternative search string for inconsistencies in DMC format </param>
            <param name="optional_SpecCodeFirstPart"> [opt in] Specify if returning first or second half of spec code range </param>
            <returns> type string, resulting Value if found, or string.Empty. </returns>
        </member>
        <member name="M:Okuma.Scout.DMC.ReadInDMC_SkipPageBreaks">
            <summary> PRIVATE
            Uses IO.StreamReader.ReadLine() to open and read the Data Management Card line by line,
            looks DMC page breaks, and skips them. </summary>
        </member>
        <member name="M:Okuma.Scout.DMC.FilterResults(System.String,System.String)">
            <summary> PRIVATE
            Uses a filter string to only return input strings 
            which do not start with the filter string. </summary>
            <param name="Input"> [in] string to filter </param>
            <param name="Filter"> [in] input.StartsWith value </param>
            <returns> type string, Unfiltered Input or string empty "". </returns>
        </member>
        <member name="M:Okuma.Scout.DMC.GetDMCData(System.String)">
            <summary> PRIVATE
            One type of data reading method for extracting a value from the 
            Data Management Card based on a header string. </summary>
            <param name="sHeader"> [in] The header to attempt to read a value from </param>
            <returns> type string, the value of the header item or else string empty "". </returns>
        </member>
        <member name="M:Okuma.Scout.DMC.GetDMCPackageData(System.String,System.String@)">
            <summary> PRIVATE
            One type of data reading method for extracting a value from the 
            Data Management Card based on given source string to search in and a header string. </summary>
            <param name="sHeader"> [in] The header to attempt to read a value from </param>
            <param name="sSourceString"> [ref in] Source string to search in </param>
            <returns> type string, the value of the header item or else string empty "". </returns>
        </member>
        <member name="M:Okuma.Scout.DMC.GetDMCSpecCodeData(System.String,System.String@,System.Boolean)">
            <summary> PRIVATE
            One type of data reading method for extracting a value from the 
            Data Management Card (specifically spec codes) based on given source 
            string to search in, a header string, and which part of a spec code to return. </summary>
            <param name="sHeader"> [in] The header to attempt to read a value from </param>
            <param name="sSourceString"> [ref in] Source string to search in </param>
            <param name="firstPart"> [in] Return the first part? If false, will return the second half. </param>
            <returns> type string, the value of the header item or else string empty "". </returns>
        </member>
        <member name="T:Okuma.Scout.Display">
            <summary> 
            
            This class retrieves details about the displays attached to the system 
            
            </summary>
        </member>
        <member name="P:Okuma.Scout.Display.DeviceDictionary">
            <summary> PRIVATE
            Dictionary with key type int32 and value type DisplayDevice.
            Calls EnumerateDisplayDevices() and returns private backing property </summary>
        </member>
        <member name="P:Okuma.Scout.Display.ScreenDictionary">
            <summary> PRIVATE
            Dictionary with key type int32 and value type aScreen.
            Calls EnumerateScreens() and returns private backing property </summary>
        </member>
        <member name="P:Okuma.Scout.Display.DisplayDictionary">
            <summary>
            Dictionary of all Screens and their associated data </summary>
            <remarks>
            As display devices are enumerated, they are assigned a number based on the order 
            they are retrieved. This number will be used as the dictionary key.</remarks>
        </member>
        <member name="P:Okuma.Scout.Display.PanelType">
            <summary>
            Returns type enumeration "PhysicalPanelSize" - the OSP panel type (15", 19", etc.) </summary>
            <remarks> PnP 800x600 primary monitors assumed to be P100 6.5" displays. </remarks>
        </member>
        <member name="P:Okuma.Scout.Display.SelectScreenMode">
            <summary>
            Returns type enumeration "NineteenInchScreenMode" - the SELECTSCREEN mode (FullScreen, A Mode, etc.)
            </summary>
        </member>
        <member name="M:Okuma.Scout.Display.EnumerateScreens">
            <summary> PRIVATE
            Populates the Screen Dictionary based on Framework method Screen.AllScreens result array </summary>
        </member>
        <member name="M:Okuma.Scout.Display.EnumerateDisplayDevices">
            <summary> PRIVATE
            PInvokes EnumDisplayDevices and adds results the Device Dictionary. </summary>
        </member>
        <member name="M:Okuma.Scout.Display.PopulateDisplayDictionary">
            <summary> PRIVATE
            Combines Screen and Device information, while leaving out extraneous data. </summary>
        </member>
        <member name="M:Okuma.Scout.Display.RefreshDisplayInfo">
            <summary>
            Clears stored information and enumerates display data. This function 
            rebuilds the Display Dictionary and should not be called excessively. </summary>
        </member>
        <member name="T:Okuma.Scout.Display.DisplayDevice">
            <summary> PRIVATE
            
            Storage class for Device Information 
            
            </summary>
        </member>
        <member name="M:Okuma.Scout.Display.DisplayDevice.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DisplayDevice class. </summary>
            <param name="number"> number used as dictionary key </param>
            <param name="cb"> Size, in bytes, of the DISPLAY_DEVICE structure. </param>
            <param name="id"> GUID of the display </param>
            <param name="key"> registry key of display </param>
            <param name="name"> Adapter or Monitor name </param>
            <param name="str"> device context string </param>
            <param name="monitor"> Monitor 'friendly' name </param>
        </member>
        <member name="P:Okuma.Scout.Display.DisplayDevice.cb">
            <summary> 
            Size, in bytes, of the DISPLAY_DEVICE structure. 
            This must be initialized prior to calling EnumDisplayDevices. </summary>
        </member>
        <member name="P:Okuma.Scout.Display.DisplayDevice.DeviceString">
            <summary>
            An array of characters containing the device context string. 
            This is either a description of the display adapter or of the display monitor. </summary>
        </member>
        <member name="T:Okuma.Scout.Display.aScreen">
            <summary> PRIVATE
            
            Storage class for Screen Information 
            
            </summary>
        </member>
        <member name="M:Okuma.Scout.Display.aScreen.#ctor(System.Int32,System.Boolean,System.String,System.Drawing.Rectangle,System.String,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the aScreen class. </summary>
            <param name="i"> Integer index </param>
            <param name="p"> Boolean primary </param>
            <param name="sn"> String screen name </param>
            <param name="b"> Rectangle bounds </param>
            <param name="t"> String type </param>
            <param name="wa"> Rectangle work area </param>
        </member>
        <member name="T:Okuma.Scout.Display.DisplayInfo">
            <summary>
            
            This class is used to organize information related to a specific display.
            
            </summary>
        </member>
        <member name="M:Okuma.Scout.Display.DisplayInfo.#ctor(System.String,System.String,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.String,System.String)">
            <summary>
            Initializes a new instance of the DisplayInfo class. </summary>
            <param name="dDisplayName"> string Windows Display Name </param>
            <param name="dMonitorName"> string Monitor Name (as reported in control panel) </param>
            <param name="dIsPrimary"> Boolean is the Primary display </param>
            <param name="dBounds"> Screen Resolution </param>
            <param name="dWorkArea"> Usable area </param>
            <param name="dDeviceID"> GUID of display </param>
            <param name="dDeviceKey"> Registry key of display </param>
        </member>
        <member name="P:Okuma.Scout.Display.DisplayInfo.DisplayName">
            <summary>
            An array of characters identifying the display name. 
            This is the Screen Name and either the Adapter Device Name or the Monitor Device Name. </summary>
        </member>
        <member name="P:Okuma.Scout.Display.DisplayInfo.MonitorName">
            <summary>
            Gets the name of the monitor.
            Typically this is brand and model but listed as "Generic PnP" 
            for older Displays that rely on Windows drivers. </summary>
            <remarks>
            Result taken from DeviceString when calling 'EnumDisplayDevices' a second time
            and specifying the adapter and device names </remarks>
        </member>
        <member name="P:Okuma.Scout.Display.DisplayInfo.Primary">
            <summary> Gets a Boolean value indicating if this display 
            is the primary display or not </summary>
        </member>
        <member name="P:Okuma.Scout.Display.DisplayInfo.Bounds">
            <summary> Gets the display bounds. 
            Display bounds are equal to the display resolution.</summary>
        </member>
        <member name="P:Okuma.Scout.Display.DisplayInfo.WorkArea">
            <summary> Gets the working area for the display. 
            Working Area is the desktop area of the display, 
            excluding taskbar, docked windows, and docked tool bars.</summary>
        </member>
        <member name="P:Okuma.Scout.Display.DisplayInfo.DeviceID">
            <summary> 
            Gets the GUID of the display (Windows XP SP3 and later) </summary> 
        </member>
        <member name="P:Okuma.Scout.Display.DisplayInfo.DeviceKey">
            <summary> 
            Gets the registry key for the device (Windows XP SP3 and later) </summary>
        </member>
        <member name="T:Okuma.Scout.DotNet">
            <summary>
            
            This class is used to determine details about the Microsoft .NET Framework
            
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx30VersionMajor">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx30VersionMinor">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx30VersionBuild">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx30VersionRevision">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx35VersionMajor">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx35VersionMinor">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx35VersionBuild">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx35VersionRevision">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx40VersionMajor">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx40VersionMinor">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx40VersionBuild">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx40VersionRevision">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx45ReleaseVersion">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx451ReleaseVersion">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx452ReleaseVersion">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx46">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx461">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx462">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx47">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx471">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="F:Okuma.Scout.DotNet.Netfx472">
            <summary>
            .NET Framework Versions and Dependencies
            https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies
            </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v10_Installed">
            <summary> Type Boolean, true if .NET 1.0 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v11_Installed">
            <summary> Type Boolean, true if .NET 1.1 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v20_Installed">
            <summary> Type Boolean, true if .NET 2.0 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v30_Installed">
            <summary> Type Boolean, true if .NET 3.0 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v35_Installed">
            <summary> Type Boolean, true if .NET 3.5 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v40Client_Installed">
            <summary> Type Boolean, true if .NET 4.0 Client is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v40Full_Installed">
            <summary> Type Boolean, true if .NET 4.0 Full is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v45_Installed">
            <summary> Type Boolean, true if .NET 4.5 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v451_Installed">
            <summary> Type Boolean, true if .NET 4.5.1 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v452_Installed">
            <summary> Type Boolean, true if .NET 4.5.2 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v46_Installed">
            <summary> Type Boolean, true if .NET 4.6 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v461_Installed">
            <summary> Type Boolean, true if .NET 4.6.1 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v462_Installed">
            <summary> Type Boolean, true if .NET 4.6.2 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v47_Installed">
            <summary> Type Boolean, true if .NET 4.7 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v471_Installed">
            <summary> Type Boolean, true if .NET 4.7.1 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.v472_Installed">
            <summary> Type Boolean, true if .NET 4.7.2 is installed </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.ServicePack_10">
            <summary> Type Int32, service pack level of .NET 1.0 </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.ServicePack_11">
            <summary> Type Int32, service pack level of .NET 1.1 </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.ServicePack_20">
            <summary> Type Int32, service pack level of .NET 2.0 </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.ServicePack_30">
            <summary> Type Int32, service pack level of .NET 3.0 </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.ServicePack_35">
            <summary> Type Int32, service pack level of .NET 3.5 </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.ServicePack_40Client">
            <summary> Type Int32, service pack level of .NET 4.0 Client </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.ServicePack_40Full">
            <summary> Type Int32, service pack level of .NET 4.0 Full </summary>
        </member>
        <member name="P:Okuma.Scout.DotNet.ReleaseVersion_45AndUp">
            <summary> Type Int32, Revision Number of the .NET Framework 4.5 and later </summary>
        </member>
        <member name="M:Okuma.Scout.DotNet.NetVersionComparible(System.String)">
            <summary> Converts .NET version string to int32 for easy comparison </summary>
            <param name="s"> [in] Input string of a .NET Framework version </param>
            <returns> type System Int32, returns -1 by default if the input string is unknown </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.GetNetfx10SPLevel">
            <summary> PRIVATE
            Determine what service pack for the .NET Framework 1.0 using the recommended detection method
            http://blogs.msdn.com/astebner/archive/2004/09/14/229802.aspx </summary>
            <returns> Type Int32, Service Pack level for .NET Framework 1.0 </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.GetNetfxSPLevel(System.String,System.String)">
            <summary> PRIVATE
             Determine what service pack is installed for a version of the .NET Framework using 
             registry based detection methods documented in the .NET Framework deployment guides. </summary>
            <param name="pszNetfxRegKeyName"> [in] Registry key name to use for detection </param>
            <param name="pszNetfxRegValueName"> [in] Registry value to use for detection</param>
            <returns> Type Int32, Service Pack level for the .NET Framework </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.CheckNetfxBuildNumber(System.String,System.String,System.Version)">
            <summary> PRIVATE
            Retrieves the .NET Framework build number from the registry and validates that it is not a pre-release version number </summary>
            <param name="NetfxRegKeyName"> [in] String Registry key name to use for detection </param>
            <param name="NetfxRegKeyValue"> [in] String Registry value to use for detection</param>
            <param name="iRequestedVersion"> [in] Version to compare to the registry </param>
            <returns> Type Boolean, true if the build number in the registry is greater than or equal to the provided version;</returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v10_Installed">
            <summary> PRIVATE
            Is .NET Framework 1.0 installed? 
            http://msdn.microsoft.com/library/ms994349.aspx </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v11_Installed">
            <summary> PRIVATE
            Is .NET Framework 1.1 installed? 
            http://msdn.microsoft.com/library/ms994339.aspx </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v20_Installed">
            <summary> PRIVATE
            Is .NET Framework 2.0 installed? 
            http://msdn2.microsoft.com/library/aa480243.aspx </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v30_Installed">
            <summary> PRIVATE
            Is .NET Framework 3.0 installed? 
            http://msdn.microsoft.com/library/aa964979.aspx </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v35_Installed">
            <summary> PRIVATE
            Is .NET Framework 3.5 installed? 
            http://msdn.microsoft.com/library/cc160716.aspx </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v40Client_Installed">
            <summary> PRIVATE
            Is .NET Framework 4.0 Client installed? 
            http://msdn.microsoft.com/library/ee942965(v=VS.100).aspx </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v40Full_Installed">
            <summary> PRIVATE
            Is .NET Framework 4.0 Full installed? 
            http://msdn.microsoft.com/library/ee942965(v=VS.100).aspx </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v45_Installed">
            <summary> PRIVATE
            Is .NET Framework 4.5 installed? 
            http://msdn.microsoft.com/en-us/library/ee942965(v=vs.110).aspx </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v451_Installed">
            <summary> PRIVATE
            Is .NET Framework 4.5.1 installed? 
            http://msdn.microsoft.com/en-us/library/ee942965(v=vs.110).aspx </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v452_Installed">
            <summary> PRIVATE
            Is .NET Framework 4.5.2 installed? 
            http://msdn.microsoft.com/en-us/library/ee942965(v=vs.110).aspx </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v46_Installed">
            <summary> PRIVATE
            Is .NET Framework 4.5 installed? </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v461_Installed">
            <summary> PRIVATE
            Is .NET Framework 4.6.1 installed? </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v462_Installed">
            <summary> PRIVATE
            Is .NET Framework 4.6.2 installed? </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v47_Installed">
            <summary> PRIVATE
            Is .NET Framework 4.7 installed? </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v471_Installed">
            <summary> PRIVATE
            Is .NET Framework 4.7.1 installed? </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.DotNet.p_v472_Installed">
            <summary> PRIVATE
            Is .NET Framework 4.7.2 installed? </summary>
            <returns> Type Boolean </returns>
        </member>
        <member name="T:Okuma.Scout.Enums.NCSpecGroup">
            <summary>
            NC Spec Code Group Number (32 byte groups) 
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCSpecGroup.NC1MG">
            <summary>Group 1 (standard)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCSpecGroup.NC2MG">
            <summary>Group 2 (non-standard)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCSpecGroup.NC3MG">
            <summary>Group 3 (currently unused)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCSpecGroup.NC4MG">
            <summary>Group 4 (currently unused)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCSpecGroup.NC5MG">
            <summary>Group 5 (currently unused)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCSpecGroup.NC6MG">
            <summary>Group 6 (currently unused)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCSpecGroup.NC7MG">
            <summary>Group 7 (currently unused)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCSpecGroup.NC8MG">
            <summary>Group 8 (currently unused)</summary>
        </member>
        <member name="T:Okuma.Scout.Enums.NCBSpecGroup">
            <summary>
            NC B-Spec Code Group Number (32 byte groups) 
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCBSpecGroup.NCB1MG">
            <summary>Group 1 (standard)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCBSpecGroup.NCB2MG">
            <summary>Group 2 (currently unused)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCBSpecGroup.NCB3MG">
            <summary>Group 3 (currently unused)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCBSpecGroup.NCB4MG">
            <summary>Group 4 (currently unused)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCBSpecGroup.NCB5MG">
            <summary>Group 5 (currently unused)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCBSpecGroup.NCB6MG">
            <summary>Group 6 (currently unused)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCBSpecGroup.NCB7MG">
            <summary>Group 7 (currently unused)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NCBSpecGroup.NCB8MG">
            <summary>Group 8 (currently unused)</summary>
        </member>
        <member name="T:Okuma.Scout.Enums.PLCSpecGroup">
            <summary>
            PLC Spec Code Group Number (32 byte groups) 
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PLCSpecGroup.PLC1MG">
            <summary>Group 1 (standard)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PLCSpecGroup.PLC2MG">
            <summary>Group 2 (standard)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PLCSpecGroup.PLC3MG">
            <summary>Group 3 (currently unused)</summary>
        </member>
        <member name="T:Okuma.Scout.Enums.MachineType">
            <summary>
            Describes the Machine as a PC, Lathe, Machining Center, or Grinder (also if it's either an NC Master or PC NC Master)
            Indeterminate value = "Unknown"
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MachineType.Unknown">
            <summary>Indeterminate</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MachineType.PC">
            <summary>Personal Computer (not a machine) </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MachineType.L">
            <summary>Type Lathe </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MachineType.NCM_L">
            <summary>Type NC-Master Lathe </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MachineType.PCNCM_L">
            <summary>Type PC-NC-Master Lathe </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MachineType.M">
            <summary>Type Machining Center </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MachineType.NCM_M">
            <summary>Type NC-Master Machining Center </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MachineType.PCNCM_M">
            <summary>Type PC-NC-Master Machining Center </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MachineType.G">
            <summary>Type Grinder </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MachineType.NCM_G">
            <summary>Type NC-Master Grinder </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MachineType.PCNCM_G">
            <summary>Type PC-NC-Master Grinder </summary>
        </member>
        <member name="T:Okuma.Scout.Enums.ControlType">
            <summary>
            Describes the hardware generation of the machine control (OSP series), NA for PC, or unknown 
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ControlType.Unknown">
            <summary>Indeterminate </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ControlType.NA">
            <summary>Not Applicable (for machine type PC) </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ControlType.P100">
            <summary>OSP-P100</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ControlType.P100II">
            <summary>OSP-P100 Type II</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ControlType.P200">
            <summary>OSP-P200</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ControlType.P200A">
            <summary>OSP-P200 Type A</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ControlType.P300">
            <summary>OSP-P300</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ControlType.P300S">
            <summary>OSP-P300S (special type)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ControlType.P300A">
            <summary>OSP-P300A </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ControlType.P300SA">
            <summary>OSP-P300A (special type)</summary>
        </member>
        <member name="T:Okuma.Scout.Enums.LicenseStatus">
            <summary>
            Result of checking License
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.Unknown">
            <summary> Default value (Should not be used!) </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.Valid">
            <summary> License checks out good! </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.Flexnet_Not_Found">
            <summary> FlexNet License Verification library Not Found. </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.Invalid_Machine_Type">
            <summary> Unable to Check THINC API License due to Unknown Machine Type. </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.Invalid_Host">
            <summary> Machine name plate serial number does not match OSP system software </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.Bad_Version">
            <summary> Version number is invalid (must be in format '#.#', major-major.major-minor) </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.License_Not_Found">
            <summary> License File Not Found! </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.Feature_Not_Found">
            <summary> You are not licensed to use the feature </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.Bad_Key">
            <summary> Your license has been tampered with and is no longer valid! </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.Insufficient_Version">
            <summary> Your license does not cover this version of the application. </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.Invalid">
            <summary> Your license is no good. </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.Expired">
            <summary> Your license has expired. </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.LicenseStatus.Critical_Exception">
            <summary> Critical Exception Occurred! </summary>
        </member>
        <member name="T:Okuma.Scout.Enums.PlcSpecCode">
            <summary>
            Used by SpecCode class to determine which part of the PLC Spec code to fetch 
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PlcSpecCode.Plc1_A">
            <summary>PLC Spec Code 1 (first half) </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PlcSpecCode.Plc1_B">
            <summary>PLC Spec Code 1 (second half) </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PlcSpecCode.Plc2_A">
            <summary>PLC Spec Code 2 (first half) </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PlcSpecCode.Plc2_B">
            <summary>PLC Spec Code 2 (second half) </summary>
        </member>
        <member name="T:Okuma.Scout.Enums.SoftwareArchitecture">
            <summary>
            Return value for ProgramBits 
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.SoftwareArchitecture.Unknown">
            <summary> Unable to determine S/W Bits </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.SoftwareArchitecture.Bit32">
            <summary> 32-bit </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.SoftwareArchitecture.Bit64">
            <summary> 64-bit </summary>
        </member>
        <member name="T:Okuma.Scout.Enums.ProcessorArchitecture">
            <summary>
            Return value for ProcessorBits 
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ProcessorArchitecture.Unknown">
            <summary> Unable to determine processor bits </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ProcessorArchitecture.Bit32">
            <summary> 32-bit </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ProcessorArchitecture.Bit64">
            <summary> 64-bit </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ProcessorArchitecture.Itanium64">
            <summary> I64-bit </summary>
        </member>
        <member name="T:Okuma.Scout.Enums.DMCSearchPattern">
            <summary>
            Used to specify which section of the DMC is being searched.
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.DMCSearchPattern.Data">
            <summary>Standard Search</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.DMCSearchPattern.Filter">
            <summary>Filtered Search</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.DMCSearchPattern.Package">
            <summary>Search for 'Package' information</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.DMCSearchPattern.MultiNormal">
            <summary>Any section except 'Package' or 'Spec Codes'</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.DMCSearchPattern.MultiPackage">
            <summary>Search for 'Package' information using multiple strings</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.DMCSearchPattern.SpecCode">
            <summary>Search for Spec Codes</summary>
        </member>
        <member name="T:Okuma.Scout.Enums.MessageLevel">
            <summary>
            Level of severity of the messages sent by the Error.Reporter event
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MessageLevel.Information">
            <summary>Information only for debugging purposes </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MessageLevel.Warning">
            <summary>Something unexpected happened that has the potential to effect the operation of SCOUT </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MessageLevel.Error">
            <summary>Something unexpected happened that effects the operation of SCOUT </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.MessageLevel.Exception">
            <summary>Run-time error that effects the operation of SCOUT </summary>
        </member>
        <member name="T:Okuma.Scout.Enums.ApiVersionCheckResult">
            <summary>
            Return value for 'VersionInformation.Result' used to indicate 
            If the THINC API Install Version was successfully determined. 
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiVersionCheckResult.NoResult">
            <summary>Default value before check performed</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiVersionCheckResult.VersionRecognized">
            <summary>Value indicating success</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiVersionCheckResult.UnknownVersion">
            <summary>Install version cannot be identified, but the individual
            API file versions should still be available.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiVersionCheckResult.MachineTypeNotSupported">
            <summary>Base machine type other than L or M was identified</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiVersionCheckResult.MissingApiFiles">
            <summary>Install version identification is accomplished by comparing known version information 
            for API files. If any of these files are missing, identification cannot take place.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiVersionCheckResult.MissingCrossReference">
            <summary>An internal file is used for version information comparison. 
            The comparison cannot take place without this file.</summary>
        </member>
        <member name="T:Okuma.Scout.Enums.ApiStatus">
            <summary>
            Used as the return value for 'ThincApi.ApiAvailable' and 'ThincApi.InitAPI()'.
            These values provide more detailed information about the results, beyond what would
            be possible with a simple Boolean result.
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiStatus.Ready">
            <summary> The API is ready to be initialized. </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiStatus.NotReady">
            <summary> API cannot be initialized and API functions cannot be used at this time. </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiStatus.Initialized">
            <summary> API <see cref="M:Okuma.Scout.ThincApiReflector.InitAPI"/>  was successful, and API functions may now be called. </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiStatus.FailedToInitialize">
            <summary> Exception encountered while attempting to initialize the API. </summary>
            <remarks>Handle the Error Event <see cref="E:Okuma.Scout.Error.ReporterEvent"/> or use a try-catch around the 
            methods that return this object to view the specific details. </remarks>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiStatus.FiveSecondTimeOutPeriod">
            <summary>When 'ThincApi.ApiAvailable' is called on machines with API version less than 1.17.1, 
            an attempt to initialize the API will take place to determine readiness. That function or calling 
            Initialize directly may only attempt to call Init at 5 second or greater intervals. This is the 
            return result that will be generated if more than one call is generated within a 5 second period.
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiStatus.UnsupportedAction">
            <summary> 
            Obsolete - this return value is retained for backwards compatibility, but no longer used. 
            </summary>
        </member>
        <member name="T:Okuma.Scout.Enums.ApiType">
            <summary>
            Used to differentiate between API code bases
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiType.NONE">
            <summary>Uninitialized Value</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiType.THINC">
            <summary>THINC API type (OAC)</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ApiType.CUSTOM">
            <summary>CUSTOM API type (OCJ)</summary>
        </member>
        <member name="T:Okuma.Scout.Enums.RegDataType">
            <summary>
            Specify the data type to retrieve from the registry
            </summary>
            <remarks> https://msdn.microsoft.com/en-us/library/windows/desktop/ms724884%28v=vs.85%29.aspx </remarks>
        </member>
        <member name="F:Okuma.Scout.Enums.RegDataType.REG_NONE">
            <summary>[0] No defined value type.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegDataType.REG_SZ">
            <summary>[1] Null-terminated string. 
            It will be a Unicode or ANSI string, depending on whether you use the Unicode or ANSI functions.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegDataType.REG_EXPAND_SZ">
            <summary>[2] Null-terminated string that contains unexpanded references to environment variables (for example, "%PATH%"). 
            It will be a Unicode or ANSI string, depending on whether you use the Unicode or ANSI functions.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegDataType.REG_BINARY">
            <summary>[3] Binary data in any form.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegDataType.REG_DWORD">
            <summary>[4] 32-bit number.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegDataType.REG_DWORD_BIG_ENDIAN">
            <summary>[5] 32-bit number in big-Endian format.
            In big-Endian format, a multi-byte value is stored in memory from the highest byte (the "big end") to the lowest byte.
            For example, the value 0x12345678 is stored as (0x12 0x34 0x56 0x78) in big-Endian format.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegDataType.REG_LINK">
            <summary>[6]Unicode symbolic link.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegDataType.REG_MULTI_SZ">
            <summary>[7] Array of null-terminated strings that are terminated by two null characters.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegDataType.REG_RESOURCE_LIST">
            <summary>[8]Device-driver resource list.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegDataType.REG_FULL_RESOURCE_DESCRIPTOR">
            <summary>[9] </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegDataType.REG_RESOURCE_REQUIREMENTS_LIST">
            <summary>[10] </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegDataType.REG_QWORD">
            <summary>[11] 64-bit number.</summary>
        </member>
        <member name="T:Okuma.Scout.Enums.RegSAM">
            <summary>
            A data type used for specifying the security access attributes in the registry.
            </summary>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/windows/desktop/ms724878%28v=vs.85%29.aspx </remarks>
        </member>
        <member name="F:Okuma.Scout.Enums.RegSAM.QueryValue">
            <summary>Permission to query sub-key data.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegSAM.SetValue">
            <summary>Permission to set sub-key data.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegSAM.CreateSubKey">
            <summary>Permission to create sub-keys.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegSAM.EnumerateSubKeys">
            <summary>Permission to enumerate sub-keys.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegSAM.Notify">
            <summary>Permission for change notification.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegSAM.CreateLink">
            <summary>Permission to create a symbolic link.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegSAM.WOW64_32Key">
            <summary>Indicates that an application on 64-bit Windows should operate on the 32-bit registry view. 
            This flag is ignored by 32-bit Windows. For more information, see Accessing an Alternate Registry View.</summary>
            <remarks>This flag must be combined using the OR operator with the other flags in this table that either query or access registry values.
            Windows 2000:  This flag is not supported.</remarks>
        </member>
        <member name="F:Okuma.Scout.Enums.RegSAM.WOW64_64Key">
            <summary>Indicates that an application on 64-bit Windows should operate on the 64-bit registry view. 
            This flag is ignored by 32-bit Windows. For more information, see Accessing an Alternate Registry View.</summary>
            <remarks>This flag must be combined using the OR operator with the other flags in this table that either query or access registry values.
            Windows 2000:  This flag is not supported.</remarks>
        </member>
        <member name="F:Okuma.Scout.Enums.RegSAM.Read">
            <summary>Combination of KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, and KEY_NOTIFY access.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegSAM.Write">
            <summary>Combination of KEY_SET_VALUE and KEY_CREATE_SUB_KEY access.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegSAM.Execute">
            <summary>Permission for read access.</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.RegSAM.AllAccess">
            <summary>Combination of KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, KEY_NOTIFY, KEY_CREATE_SUB_KEY, KEY_CREATE_LINK, and KEY_SET_VALUE access.</summary>
        </member>
        <member name="T:Okuma.Scout.Enums.DMC_MachineData">
            <summary>
            Data Management Card "[ Machine Data ]" Item 
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.DMC_MachineData.OspType">
            <summary> &lt; Type of OSP &gt; </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.DMC_MachineData.MachineType">
            <summary> &lt; Type of Machine &gt; </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.DMC_MachineData.ProductionNumber">
            <summary> &lt; Soft Production No &gt; </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.DMC_MachineData.ProjectNumber">
            <summary> &lt; Project No &gt; </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.DMC_MachineData.ProductionDate">
            <summary> &lt; Software Production Date &gt; </summary>
        </member>
        <member name="T:Okuma.Scout.Enums.PhysicalPanelSize">
            <summary>
            Enumerated Return Value for PanelType
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PhysicalPanelSize.NonOSP">
            <summary>Not an OSP panel</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PhysicalPanelSize.PnP_NonOsp">
            <summary>Plug and Play Monitor, Not an OSP panel</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PhysicalPanelSize.UnknownSize">
            <summary>Unknown OSP panel type</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PhysicalPanelSize.SixPointFiveInch">
            <summary>6.5" OSP panel</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PhysicalPanelSize.FifteenInch">
            <summary>15" OSP panel</summary>
        </member>
        <member name="F:Okuma.Scout.Enums.PhysicalPanelSize.NineteenInch">
            <summary>19" OSP panel</summary>
        </member>
        <member name="T:Okuma.Scout.Enums.NineteenInchScreenMode">
            <summary> 
            Enumerated Return Value for SelectScreenMode 
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NineteenInchScreenMode.FullScreen">
            <summary>19" Full Screen Mode (Data = 0) </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NineteenInchScreenMode.ModeA">
            <summary>19" Windowed Lower-Left Display "A Mode" (Data = 1) </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NineteenInchScreenMode.ModeB">
            <summary>19" Windowed Lower-Right Display "B Mode" (Data = 2) </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NineteenInchScreenMode.UnknownMode">
            <summary>The Result Data is not equal to 0, 1, or 2 </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.NineteenInchScreenMode.RegistryKeyNotExist">
            <summary>19" SelectScreen tool registry key does not exist </summary>
        </member>
        <member name="T:Okuma.Scout.Enums.FindLength">
            <summary>
            Used by Helpers.FindStringInArrayByLength
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.FindLength.Shortest">
            <summary> Return Shortest String </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.FindLength.Longest">
            <summary> Return Longest String </summary>
        </member>
        <member name="T:Okuma.Scout.Enums.OSP_Restrictions">
            <summary>
            Restricted OSP Operation Specifications 
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.OSP_Restrictions.Unknown">
            <summary> Indeterminate </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.OSP_Restrictions.NA">
            <summary> Not Applicable </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.OSP_Restrictions.NONE">
            <summary> No Restrictions </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.OSP_Restrictions.RSpec">
            <summary> -R Specification </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.OSP_Restrictions.eSpec">
            <summary> -e Specification </summary>
        </member>
        <member name="T:Okuma.Scout.Enums.ComparisonOperators">
            <summary>
            Simple enumeration of comparison operators.
            Useful for method arguments.
            </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ComparisonOperators.Equal">
            <summary> == </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ComparisonOperators.NotEqual">
            <summary> != </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ComparisonOperators.LessThan">
            <summary> &lt; </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ComparisonOperators.GreaterThan">
            <summary> &gt; </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ComparisonOperators.LessThanOrEqualTo">
            <summary> &lt;= </summary>
        </member>
        <member name="F:Okuma.Scout.Enums.ComparisonOperators.GreaterThanOrEqualTo">
            <summary> &gt;= </summary>
        </member>
        <member name="T:Okuma.Scout.Error">
            <summary>
            
            This class provides error handling for SCOUT.dll
            
            </summary>
            <remarks> Subscribe to the Reporter event to handle SCOUT errors.
            Failure to do so could result in unhandled exceptions. </remarks>
            <note> All SCOUT errors are routed through this class. </note>
        </member>
        <member name="E:Okuma.Scout.Error.ReporterEvent">
            <summary> This event is available to view debugging information and allow for custom handling of errors.
            You must unsubscribe from this event when finished using SCOUT or else resources used by SCOUT will not be freed. </summary>
        </member>
        <member name="P:Okuma.Scout.Error.ShowDebugInfo">
            <summary> False by default: only reports exceptions. 
            When true, all message levels are passed. (verbose) </summary>
        </member>
        <member name="M:Okuma.Scout.Error.Raise(Okuma.Scout.Enums.MessageLevel,System.String,System.Exception)">
            <summary> INTERNAL
            The main error handler for Scout.Dll </summary>
            <param name="lvl"> [in] Enums.MessageLevel </param>
            <param name="msg"> [in] string custom message </param>
            <param name="ex"> [opt in] System.Exception </param>
        </member>
        <member name="M:Okuma.Scout.Error.TestReporter(Okuma.Scout.Enums.MessageLevel)">
            <summary>
            For testing purposes only. 
            Generate error messages to test error reporting functionality. </summary>
            <param name="level"> [in] Enums.MessageLevel </param>
        </member>
        <member name="T:Okuma.Scout.Error.Args">
            <summary>
            
            This is a custom event arguments class for Scout error reporting 
            
            </summary>
        </member>
        <member name="M:Okuma.Scout.Error.Args.#ctor(Okuma.Scout.Enums.MessageLevel,System.String,System.Exception)">
            <summary>
            Constructor for new Error event arguments </summary>
            <param name="severity"> [in] Type Scout.Enums.MessageLevel: severity </param>
            <param name="message"> [in] Type string: information content </param>
            <param name="exception"> [opt in] Type System.Exception: only valid for severity of type MessageLevel.Exception </param>
        </member>
        <member name="P:Okuma.Scout.Error.Args.Severity">
            <summary> Level of seriousness associated with the error </summary>
        </member>
        <member name="P:Okuma.Scout.Error.Args.Message">
            <summary> Error information (not used for exceptions) </summary>
        </member>
        <member name="P:Okuma.Scout.Error.Args.Exception">
            <summary> Exception object (not used for debugging information) </summary>
        </member>
        <member name="T:Okuma.Scout.Helper">
            <summary>
            
            Class for useful methods not included in the .NET Framework
            
            </summary>
        </member>
        <member name="M:Okuma.Scout.Helper.CharCountInString(System.String,System.Char)">
            <summary>
            Gets the number of occurrences of char 'c' in string 's'. </summary>
            <param name="s"> [in] Type string to search </param>
            <param name="c"> [in] Type char to search for </param>
            <returns> Type Int32, number of occurrences </returns>
        </member>
        <member name="M:Okuma.Scout.Helper.RegDwordIntegerVersionParse(System.String)">
            <summary>
            This function is designed specifically for producing a System.Version object from the 
            Uninstall information ("Version" key) in the Windows registry for a given app. </summary>
            <param name="input"> [in] Type string, a REG_DWORD value obtained from Registry class for an installed application </param>
            <returns> Type System.Version (Major, Minor, Build) </returns>
        </member>
        <member name="M:Okuma.Scout.Helper.VersionParse(System.String)">
            <summary>
            Version.Parse method supported in .NET 2.0 
            (Framework Version.Parse method requires .NET 4.0) </summary>
            <param name="input"> [in] Version string, period delimited </param>
            <returns> Type System.Version </returns>
        </member>
        <member name="M:Okuma.Scout.Helper.VersionTryParse(System.String,System.Version@)">
            <summary>
            Version.TryParse method supported in .NET 2.0 
            (Framework Version.TryParse method requires .NET 4.0) </summary>
            <param name="input"> [in] version string, period delimited </param>
            <param name="output"> [out] Type System.Version result if TryParse is successful, else null </param>
            <returns> Type Boolean, True if successful, else false. </returns>
        </member>
        <member name="M:Okuma.Scout.Helper.ByteArrayToHex(System.Byte[])">
            <summary>
            Converts a byte array to a Hex string </summary>
            <param name="bytes"> [in] array of type byte </param>
            <returns> Type string in the form of Hex </returns>
        </member>
        <member name="M:Okuma.Scout.Helper.HexToASCII(System.String)">
            <summary>
            Convert a string of Hex values into human readable text </summary>
            <param name="hexString"> [in] string of hex values </param>
            <returns> Type string, hex value </returns>
        </member>
        <member name="M:Okuma.Scout.Helper.FindStringInArrayByLength(Okuma.Scout.Enums.FindLength,System.String[])">
            <summary>
            Finds the shortest or longest string in an array </summary>
            <param name="length"> [in] Type Enums.FindLength, Shortest or Longest </param>
            <param name="strings"> [in] string array </param>
            <returns> Type string, a value from the provided array </returns>
        </member>
        <member name="M:Okuma.Scout.Helper.IsBasicLetter(System.Char)">
            <summary>
            Determines if a character is a simple letter of the alphabet </summary>
            <param name="c"> [in] Type char, input character </param>
            <returns> boolean true if simple letter, else false. </returns>
        </member>
        <member name="M:Okuma.Scout.Helper.GetCultureInfo(System.String)">
            <summary>
            Converts a hexadecimal string 
            <see href="https://msdn.microsoft.com/en-us/library/dd318691(v=vs.85).aspx">LANGID</see> 
            to a CultureInfo object </summary>
            <param name="locale"> LANGID hex string </param>
            <returns> CultureInfo corresponding to the locale string provided, 
            or CultureInfo.InvariantCulture if not found. </returns>
            <seealso href="https://msdn.microsoft.com/en-us/library/dd318691(v=vs.85).aspx">Language Identifiers</seealso>
        </member>
        <member name="T:Okuma.Scout.LicenseChecker">
            <summary>
            
            Provides access to Okuma Licensing features 
            
            </summary>
            <remarks> 
            The <see cref="T:Okuma.Scout.LicenseItem"/> objects returned by these properties contain the 
            license feature name, version, if it expires, when it expires, and its current status.
            </remarks>
            <seealso cref="T:Okuma.Scout.LicenseItem"/>
        </member>
        <member name="M:Okuma.Scout.LicenseChecker.#cctor">
            <summary> Static Constructor for LicenseChecker class </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_DataApi_L">
            <summary> Returns THINC Lathe Data API License object. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_DataApi_MC">
            <summary> Returns THINC Machining Center Data API License object. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_DataApi_G">
            <summary> Returns THINC Grinder Data API License object. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_CommandApi_L">
            <summary> Returns THINC Lathe Command API License object. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_CommandApi_MC">
            <summary> Returns THINC Machining Center Command API License object. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_CommandApi_G">
            <summary> Returns THINC Machining Center Command API License object. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_ControlTypeP200">
            <summary> Returns THINC Control Type P200 License object. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_NcCurrentAlarm">
            <summary> Returns Optional THINC API NC Current Alarm License object. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_UserTaskIO_L">
            <summary> Returns Optional THINC API User Task I/O Lathe License object. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_UserTaskIO_MC">
            <summary> Returns Optional THINC API User Task I/O Machining Center License object. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_UserAlarm_L">
            <summary> Returns Optional THINC API User Alarm Lathe License object. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_UserAlarm_MC">
            <summary> Returns Optional THINC API User Alarm Machining Center License object. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseChecker.License_ToolID_MC">
            <summary> Returns Optional THINC API 8 Digit Tool ID Machining Center License object. </summary>
        </member>
        <member name="F:Okuma.Scout.LicenseChecker.lic_exist">
            <summary> PRIVATE
            Does the license file exist? </summary>
        </member>
        <member name="F:Okuma.Scout.LicenseChecker.LicString">
            <summary> PRIVATE
            Once class LicenseChecker is accessed, this contains the contents of the Okuma API License file
            (if it exists, otherwise will remain the default value and `lic_exist` will = null. ) </summary>
        </member>
        <member name="F:Okuma.Scout.LicenseChecker.ListOfLicenseFeatureItems">
            <summary> PRIVATE
            This is a list of all feature items contained in the license file "okuma.api.lic". 
            The list items are of type "Okuma.Scout.LicenseItem" and contain useful information such as
            feature name, version, and expire date. If the license file is not found, the value will be null. </summary>
        </member>
        <member name="M:Okuma.Scout.LicenseChecker.LicenseItemProvider(System.String)">
            <summary> PRIVATE
            Retrieves the license item from the list generated in the constructor 
            using the license file. If the feature doesn't exist, a default item is returned. 
            If the status hasn't been retrieved yet, it is checked at this time. </summary>
            <param name="feature"> [in] feature name </param>
            <returns> Type LicenseItem </returns>
        </member>
        <member name="M:Okuma.Scout.LicenseChecker.CheckLicensesFeature(System.String)">
            <summary> PRIVATE
            Checks the given API license feature </summary>
            <param name="feature"> [in] The feature name as written in the license file </param>
            <remarks> The majority of this method is designed to catch errors before 
            attempting to the check out the feature, as "CheckOutFeatureByReflection"
            assumes that everything is in place to perform the check. </remarks>
            <returns> Type Enums.LicenseStatus </returns>
        </member>
        <member name="M:Okuma.Scout.LicenseChecker.CheckOutFeatureByReflection(System.String,System.String,System.String,System.String@)">
            <summary> PRIVATE
            Check any Okuma API license feature </summary>
            <param name="flexNetPath"> File path to FlexNet Library </param>
            <param name="name"> Feature Name </param>
            <param name="version"> MajorMajor.MajorMinor </param>
            <param name="ExMsg"> Output if not validated </param>
            <returns> Enumeration of type LicenseStatus </returns>
        </member>
        <member name="M:Okuma.Scout.LicenseChecker.ReadLicenseFeaturesFromFile">
            <summary> PRIVATE
            Extracts License Features from License text and provides them as a list. </summary>
            <returns> List of class LicenseItem </returns>
        </member>
        <member name="M:Okuma.Scout.LicenseChecker.GetLicencseItemFromFile(System.Int32)">
            <summary> PRIVATE
            Picks and returns a specific feature of the license file text based on index. </summary>
            <param name="startingIndex"> [in] Type Int32, the starting index of the desired item </param>
            <returns> Instance of class LicenseItem </returns>
        </member>
        <member name="M:Okuma.Scout.LicenseChecker.ConvertExipreDate(System.String)">
            <summary> PRIVATE
            Attempts to convert the expire date of the license feature to Type DateTime </summary>
            <param name="input"> string from license file of non-standard date format. </param>
            <returns> Type Nullable DateTime </returns>
        </member>
        <member name="T:Okuma.Scout.LicenseItem">
            <summary>
            
            Stores information about individual license features 
            
            </summary>
        </member>
        <member name="F:Okuma.Scout.LicenseItem.privateFeature">
            <summary> Feature Name </summary>
        </member>
        <member name="F:Okuma.Scout.LicenseItem.privateVersion">
            <summary> Version of feature </summary>
        </member>
        <member name="F:Okuma.Scout.LicenseItem.privateExpires">
            <summary> If the feature expires </summary>
        </member>
        <member name="F:Okuma.Scout.LicenseItem.privateStatus">
            <summary> status of check </summary>
        </member>
        <member name="F:Okuma.Scout.LicenseItem.privateExpiryDate">
            <summary> Expiration date </summary>
        </member>
        <member name="F:Okuma.Scout.LicenseItem.privateEndIndex">
            <summary> End Index of last thing gotten from license file </summary>
        </member>
        <member name="M:Okuma.Scout.LicenseItem.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary> Initializes a new instance of the <see cref="T:Okuma.Scout.LicenseItem" /> class. </summary>
            <param name="featureName"> [in] Type string, Name of feature </param>
            <param name="featureVersion"> [in] Type string, feature version </param>
            <param name="featureCanExpire"> [in] Type Nullable Boolean, Whether the feature can expire or not </param>
            <remarks> Requires that a feature name, version, and can expire?(Boolean) values be provided. </remarks>
        </member>
        <member name="P:Okuma.Scout.LicenseItem.Feature">
            <summary> Gets license feature name 
            <para/> Provided at the time of <see cref="T:Okuma.Scout.LicenseItem"/> creation. 
            <para/> Refer to <see cref="M:Okuma.Scout.LicenseItem.#ctor(System.String,System.String,System.Nullable{System.Boolean})"/> for more detail. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseItem.Version">
            <summary> Gets version of license feature </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseItem.Expires">
            <summary> Gets a value indicating whether license expires </summary>
            <remarks> False if type = "permanent", otherwise true. 
            UNLESS the feature isn't found, in which case it will be NULL! </remarks>
        </member>
        <member name="P:Okuma.Scout.LicenseItem.Status">
            <summary> Gets the result of feature validation check. 
            Value is null by default (before checking) </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseItem.ExpiryDate">
            <summary> Gets or sets DateTime type which holds the license feature expire date. </summary>
        </member>
        <member name="P:Okuma.Scout.LicenseItem.EndIndex">
            <summary> Gets or sets the end index </summary>
        </member>
        <member name="T:Okuma.Scout.NativeMethods">
            <summary>
            
            NativeMethods Class (not to be visible outside the assembly)
            
            </summary>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.EnumDisplayDevices(System.String,System.Int32,Okuma.Scout.NativeMethods.DISPLAY_DEVICE@,System.Int32)">
            <summary> INTERNAL
            The EnumDisplayDevices function lets you obtain information about the display devices in the current session.
            </summary>
            <param name="lpDevice"> [in] A pointer to the device name. 
            If NULL, function returns information for the display adapter(s) on the machine, based on iDevNum. </param>
            <param name="iDevNum"> [in] An index value that specifies the display device of interest.
            The operating system identifies each display device in the current session with an index value.
            The index values are consecutive integers, starting at 0. 
            If the current session has three display devices, for example, they are specified by the index values 0, 1, and 2. </param>
            <param name="lpDisplayDevice"> [ref out] A pointer to a DISPLAY_DEVICE structure that receives information about the display device specified by iDevNum.
            Before calling EnumDisplayDevices, you must initialize the cb member of DISPLAY_DEVICE to the size, in bytes, of DISPLAY_DEVICE. </param>
            <param name="dwFlags"> [in] Set this flag to EDD_GET_DEVICE_INTERFACE_NAME (0x00000001) to retrieve the device interface name for GUID_DEVINTERFACE_MONITOR,
            which is registered by the operating system on a per monitor basis. 
            The value is placed in the DeviceID member of the DISPLAY_DEVICE structure returned in lpDisplayDevice. 
            The resulting device interface name can be used with SetupAPI functions and serves as a link between GDI monitor devices and SetupAPI monitor devices. </param>
            <returns> If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.The function fails if iDevNum is greater than the largest device index. </returns>
            <remarks> CharSet = CharSet.Ansi (auto and Unicode don't work for some reason...) </remarks>
        </member>
        <member name="T:Okuma.Scout.NativeMethods.DISPLAY_DEVICE">
            <summary> INTERNAL
            The DISPLAY_DEVICE structure receives information about the display device specified by the iDevNum parameter of the EnumDisplayDevices function.
            </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.DISPLAY_DEVICE.cb">
            <summary> Size, in bytes, of the DISPLAY_DEVICE structure. 
            This must be initialized prior to calling EnumDisplayDevices. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.DISPLAY_DEVICE.DeviceName">
            <summary> An array of characters identifying the device name. 
            This is either the adapter device or the monitor device. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.DISPLAY_DEVICE.DeviceString">
            <summary> An array of characters containing the device context string. 
            This is either a description of the display adapter or of the display monitor. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.DISPLAY_DEVICE.StateFlags">
            <summary> Device state flags. It can be any reasonable combination of the following. 
            DISPLAY_DEVICE_ACTIVE	
                DISPLAY_DEVICE_ACTIVE specifies whether a monitor is presented as being "on" by the respective GDI view.
                Windows Vista: EnumDisplayDevices will only enumerate monitors that can be presented as being "on."
            DISPLAY_DEVICE_MIRRORING_DRIVER 
                Represents a pseudo device used to mirror application drawing for remoting or other purposes.
                An invisible pseudo monitor is associated with this device.For example, 
                NetMeeting uses it.Note that GetSystemMetrics (SM_MONITORS) only accounts for visible display monitors.
            DISPLAY_DEVICE_MODESPRUNED 
                The device has more display modes than its output devices support.
            DISPLAY_DEVICE_PRIMARY_DEVICE   
                The primary desktop is on the device.For a system with a single display card, this is always set. 
                For a system with multiple display cards, only one device can have this set.
            DISPLAY_DEVICE_REMOVABLE 
                The device is removable; it cannot be the primary display.
            DISPLAY_DEVICE_VGA_COMPATIBLE   
                The device is VGA compatible.
            </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.DISPLAY_DEVICE.DeviceID">
            <summary> Not used. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.DISPLAY_DEVICE.DeviceKey">
            <summary> Reserved. </summary>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.DISPLAY_DEVICE.#ctor(System.Int32)">
            <summary> Struct Constructor </summary>
            <param name="flags"> Refer to StateFlags. </param>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.returnNativeSystemInfo">
            <summary> INTERNAL
            Calls GetNativeSystemInfo() </summary>
            <returns> Type Struct, SYSTEM_INFO </returns>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.IsCurrentOSTabletMedCenter">
            <summary> INERNAL
            Calls GetSystemMetrics() 
            Determine if the current OS is a Windows XP Tablet PC Edition or Windows XP Media Center Edition system </summary>
            <returns> Type Boolean, true if SM_TABLETPC or SM_MEDIACENTER flag is present </returns>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.GetSystemMetrics(System.Int32)">
            <summary> INTERNAL
            Retrieves the specified system metric or system configuration setting.
            Note that all dimensions retrieved by GetSystemMetrics are in pixels. </summary>
            <param name="nIndex"> [in] Type Int32.
            The system metric or configuration setting to be retrieved. 
            This parameter can be one of the following values. 
            Note that all SM_CX* values are widths and all SM_CY* values are heights. 
            Also note that all settings designed to return Boolean data represent TRUE as any nonzero value, and FALSE as a zero value. </param>
            <returns> Type Int32
            If the function succeeds, the return value is the requested system metric or configuration setting.
            If the function fails, the return value is 0. 
            GetLastError does not provide extended error information. </returns>
            <remarks> System metrics can vary from display to display.
            GetSystemMetrics(SM_CMONITORS) counts only visible display monitors.
            This is different from EnumDisplayMonitors, which enumerates both visible display monitors and 
            invisible pseudo-monitors that are associated with mirroring drivers.
            An invisible pseudo-monitor is associated with a pseudo-device used to mirror application drawing for remoting or other purposes.
            The SM_ARRANGE setting specifies how the system arranges minimized windows, and consists of a starting position and a direction. </remarks>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.GetProductInfo(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary> INTERNAL
            Retrieves the product type for the operating system on the local computer, 
            and maps the type to the product types supported by the specified operating system.
            To retrieve product type information on versions of Windows prior to the minimum supported 
            operating systems specified in the Requirements section, use the GetVersionEx function.
            You can also use the OperatingSystemSKU property of the Win32_OperatingSystem WMI class. </summary>
            <param name="osMajorVersion"> [in] The major version number of the operating system.
            The minimum value is 6. The combination of the dwOSMajorVersion, dwOSMinorVersion, dwSpMajorVersion, 
            and dwSpMinorVersion parameters describes the maximum target operating system version for the application. 
            For example, Windows Vista and Windows Server 2008 are version 6.0.0.0 and Windows 7 and Windows Server 2008 R2 are version 6.1.0.0. </param>
            <param name="osMinorVersion"> [in] The minor version number of the operating system.The minimum value is 0. </param>
            <param name="spMajorVersion"> [in] The major version number of the operating system service pack. The minimum value is 0. </param>
            <param name="spMinorVersion"> [in] The minor version number of the operating system service pack. The minimum value is 0. </param>
            <param name="edition"> [out] The product type. This parameter cannot be NULL. 
            If the specified operating system is less than the current operating system, 
            this information is mapped to the types supported by the specified operating system.
            If the specified operating system is greater than the highest supported operating system, 
            this information is mapped to the types supported by the current operating system. </param>
            <returns></returns>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.ProductInfo_Edition(System.Int32)">
            <summary>
            Translate edition integer to a human readable string
            </summary>
            <param name="ed"> integer "Product Type" </param>
            <returns> human readable string "Edition" </returns>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.GetVersionEx(Okuma.Scout.NativeMethods.OSVERSIONINFOEX@)">
            <summary> INTERNAL
            [GetVersionEx may be altered or unavailable for releases after Windows 8.1. Instead, use the Version Helper functions]
            With the release of Windows 8.1, the behavior of the GetVersionEx API has changed in the value it will return for the operating system version.
            The value returned by the GetVersionEx function now depends on how the application is manifested.
            Applications not manifested for Windows 8.1 or Windows 10 will return the Windows 8 OS version value (6.2). 
            Once an application is manifested for a given operating system version, 
            GetVersionEx will always return the version that the application is manifested for in future releases.
            To manifest your applications for Windows 8.1 or Windows 10, refer to Targeting your application for Windows. </summary>
            <param name="osVersionInfo"> [in, out] An OSVERSIONINFO or OSVERSIONINFOEX structure that receives the operating system information.
            Before calling the GetVersionEx function, set the dwOSVersionInfoSize member of the structure as 
            appropriate to indicate which data structure is being passed to this function. </param>
            <returns> If the function succeeds, the return value is a nonzero value.
            If the function fails, the return value is zero.
            To get extended error information, call GetLastError.
            The function fails if you specify an invalid value for the dwOSVersionInfoSize member of the OSVERSIONINFO or OSVERSIONINFOEX structure. </returns>
            <remarks> Identifying the current operating system is usually not the best way to determine whether a particular operating system feature is present. 
            This is because the operating system may have had new features added in a redistributable DLL. 
            Rather than using GetVersionEx to determine the operating system platform or version number, 
            test for the presence of the feature itself. For more information, see Operating System Version.
            The GetSystemMetrics function provides additional information about the current operating system. </remarks>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.GetSystemInfo(Okuma.Scout.NativeMethods.SYSTEM_INFO@)">
            <summary> INTERNAL
            Retrieves information about the current system.
            To retrieve accurate information for an application running on WOW64, call the GetNativeSystemInfo function. </summary>
            <param name="lpSystemInfo"> [out] A pointer to a SYSTEM_INFO structure that receives the information. </param>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.GetNativeSystemInfo(Okuma.Scout.NativeMethods.SYSTEM_INFO@)">
            <summary> INTERNAL
            Retrieves information about the current system to an application running under WOW64. 
            If the function is called from a 64-bit application, it is equivalent to the GetSystemInfo function. </summary>
            <param name="lpSystemInfo"> [out] A pointer to a SYSTEM_INFO structure that receives the information. </param>
            <remarks> To determine whether a Win32-based application is running under WOW64, call the IsWow64Process function.
            To compile an application that uses this function, define _WIN32_WINNT as 0x0501 or later.
            For more information, see Using the Windows Headers. </remarks>
        </member>
        <member name="T:Okuma.Scout.NativeMethods.OSVERSIONINFOEX">
            <summary> INTERNAL 
            Contains operating system version information. 
            The information includes major and minor version numbers, a build number, a platform identifier, 
            and information about product suites and the latest Service Pack installed on the system. 
            This structure is used with the GetVersionEx and VerifyVersionInfo functions. </summary>
            <remarks> Relying on version information is not the best way to test for a feature. 
            Instead, refer to the documentation for the feature of interest. 
            For more information on common techniques for feature detection, see Operating System Version.
            If you must require a particular operating system, be sure to use it as a minimum supported version, 
            rather than design the test for the one operating system.
            This way, your detection code will continue to work on future versions of Windows. </remarks>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.OSVERSIONINFOEX.dwOSVersionInfoSize">
            <summary> The size of this data structure, in bytes. Set this member to sizeof(OSVERSIONINFOEX). </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.OSVERSIONINFOEX.dwMajorVersion">
            <summary> The major version number of the operating system. For more information, see Remarks. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.OSVERSIONINFOEX.dwMinorVersion">
            <summary> The minor version number of the operating system. For more information, see Remarks.  </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.OSVERSIONINFOEX.dwBuildNumber">
            <summary> The build number of the operating system. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.OSVERSIONINFOEX.dwPlatformId">
            <summary> The operating system platform. This member can be VER_PLATFORM_WIN32_NT (2). </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.OSVERSIONINFOEX.szCSDVersion">
            <summary> A null-terminated string, such as "Service Pack 3", that indicates the latest Service Pack installed on the system. 
            If no Service Pack has been installed, the string is empty. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.OSVERSIONINFOEX.wServicePackMajor">
            <summary> The major version number of the latest Service Pack installed on the system. 
            For example, for Service Pack 3, the major version number is 3. 
            If no Service Pack has been installed, the value is zero. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.OSVERSIONINFOEX.wServicePackMinor">
            <summary> The minor version number of the latest Service Pack installed on the system. 
            For example, for Service Pack 3, the minor version number is 0. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.OSVERSIONINFOEX.wSuiteMask">
            <summary> A bit mask that identifies the product suites available on the system.
            This member can be a combination of the following values. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.OSVERSIONINFOEX.wProductType">
            <summary> Any additional information about the system. 
            This member can be one of the following values.
            VER_NT_DOMAIN_CONTROLLER 0x0000002
                The system is a domain controller and the operating system is Windows Server 2012, 
                Windows Server 2008 R2, Windows Server 2008, Windows Server 2003, or Windows 2000 Server.
            VER_NT_SERVER 0x0000003
                The operating system is Windows Server 2012, Windows Server 2008 R2, Windows Server 2008, Windows Server 2003, or Windows 2000 Server.
                Note that a server that is also a domain controller is reported as VER_NT_DOMAIN_CONTROLLER, not VER_NT_SERVER.
            VER_NT_WORKSTATION 0x0000001
                The operating system is Windows 8, Windows 7, Windows Vista, Windows XP Professional, Windows XP Home Edition, or Windows 2000 Professional.
            </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.OSVERSIONINFOEX.wReserved">
            <summary> Reserved for future use. </summary>
        </member>
        <member name="T:Okuma.Scout.NativeMethods.SYSTEM_INFO">
            <summary> INTERNAL
            Contains information about the current computer system. 
            This includes the architecture and type of the processor, the number of processors in the system, 
            the page size, and other such information. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.SYSTEM_INFO.uProcessorInfo">
            <summary> Structure Union of wProcessorArchitecture branch </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.SYSTEM_INFO.dwPageSize">
            <summary> The page size and the granularity of page protection and commitment. 
            This is the page size used by the VirtualAlloc function. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.SYSTEM_INFO.lpMinimumApplicationAddress">
            <summary> A pointer to the lowest memory address accessible to applications and dynamic-link libraries (DLLs). </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.SYSTEM_INFO.lpMaximumApplicationAddress">
            <summary> A pointer to the highest memory address accessible to applications and DLLs. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.SYSTEM_INFO.dwActiveProcessorMask">
            <summary> A mask representing the set of processors configured into the system. Bit 0 is processor 0; bit 31 is processor 31. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.SYSTEM_INFO.dwNumberOfProcessors">
            <summary> he number of logical processors in the current group. To retrieve this value, use the GetLogicalProcessorInformation function.
            Note: For information about the physical processors shared by logical processors, call 
            GetLogicalProcessorInformationEx with the RelationshipType parameter set to RelationProcessorPackage (3). </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.SYSTEM_INFO.dwProcessorType">
            <summary> An obsolete member that is retained for compatibility. 
            Use the wProcessorArchitecture, wProcessorLevel, and wProcessorRevision members to determine the type of processor. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.SYSTEM_INFO.dwAllocationGranularity">
            <summary> The granularity for the starting address at which virtual memory can be allocated. 
            For more information, see VirtualAlloc. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.SYSTEM_INFO.dwProcessorLevel">
            <summary> The architecture-dependent processor level.
            It should be used only for display purposes.
            To determine the feature set of a processor, use the IsProcessorFeaturePresent function.
            If wProcessorArchitecture is PROCESSOR_ARCHITECTURE_INTEL, wProcessorLevel is defined by the CPU vendor.
            If wProcessorArchitecture is PROCESSOR_ARCHITECTURE_IA64, wProcessorLevel is set to 1. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.SYSTEM_INFO.dwProcessorRevision">
            <summary> The architecture-dependent processor revision.  </summary>
        </member>
        <member name="T:Okuma.Scout.NativeMethods._PROCESSOR_INFO_UNION">
            <summary> INTERNAL 
            Structure Union of wProcessorArchitecture branch </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods._PROCESSOR_INFO_UNION.dwOemId">
            <summary> An obsolete member that is retained for compatibility. 
            Applications should use the wProcessorArchitecture branch of the union. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods._PROCESSOR_INFO_UNION.wProcessorArchitecture">
            <summary> The processor architecture of the installed operating system. 
            This member can be one of the following values 
            PROCESSOR_ARCHITECTURE_AMD64 - 9 - x64(AMD or Intel)
            PROCESSOR_ARCHITECTURE_ARM - 5 - ARM
            PROCESSOR_ARCHITECTURE_IA64 - 6 - Intel Itanium-based
            PROCESSOR_ARCHITECTURE_INTEL - 0 - x86
            PROCESSOR_ARCHITECTURE_UNKNOWN - 0xffff - Unknown architecture. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods._PROCESSOR_INFO_UNION.wReserved">
            <summary> This member is reserved for future use. </summary>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.GetProcAddress(System.IntPtr,System.String)">
            <summary> INTERNAL
            Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL). </summary>
            <param name="hwnd"> [in] A handle to the DLL module that contains the function or variable.
            The LoadLibrary, LoadLibraryEx, LoadPackagedLibrary, or GetModuleHandle function returns this handle.
            The GetProcAddress function does not retrieve addresses from modules that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag.
            For more information, see LoadLibraryEx. </param>
            <param name="procedureName"> [in] The function or variable name, or the function's ordinal value. 
            If this parameter is an ordinal value, it must be in the low-order word; the high-order word must be zero. </param>
            <returns> If the function succeeds, the return value is the address of the exported function or variable.
            If the function fails, the return value is NULL.To get extended error information, call GetLastError. </returns>
            <remarks> The spelling and case of a function name pointed to by lpProcName must be identical to that in the EXPORTS statement 
            of the source DLL's module-definition (.def) file. 
            The exported names of functions may differ from the names you use when calling these functions in your code. 
            This difference is hidden by macros used in the SDK header files. 
            For more information, see Conventions for Function Prototypes.
            
            The lpProcName parameter can identify the DLL function by specifying an ordinal value associated with the function in the EXPORTS statement.
            GetProcAddress verifies that the specified ordinal is in the range 1 through the highest ordinal value exported in the .def file.
            The function then uses the ordinal as an index to read the function's address from a function table.
            
            If the .def file does not number the functions consecutively from 1 to N (where N is the number of exported functions), 
            an error can occur where GetProcAddress returns an invalid, non-NULL address, even though there is no function with the specified ordinal.
            
            If the function might not exist in the DLL module—for example, if the function is available only on Windows Vista 
            but the application might be running on Windows XP—specify the function by name rather than by ordinal value and 
            design your application to handle the case when the function is not available </remarks>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.SetLastErrorEx(System.UInt32,System.UInt32)">
            <summary> INTERNAL
            Sets the last-error code.
            Currently, this function is identical to the SetLastError function. The second parameter is ignored. </summary>
            <param name="dwErrCode"> dwErrCode [in] The last-error code for the thread. </param>
            <param name="dwType"> dwType [in] This parameter is ignored. </param>
            <remarks> The last-error code is kept in thread local storage so that multiple threads do not overwrite each other's values.
            Most functions call SetLastError or SetLastErrorEx only when they fail.
            However, some system functions call SetLastError or SetLastErrorEx under conditions of success; those cases are noted in each function's documentation.
            Applications can optionally retrieve the value set by this function by using the GetLastError function immediately after a function fails.
            Error codes are 32-bit values(bit 31 is the most significant bit). 
            Bit 29 is reserved for application-defined error codes; no system error code has this bit set. 
            If you are defining an error code for your application, set this bit to indicate that the error code has been defined 
            by the application and to ensure that your error code does not conflict with any system-defined error codes. </remarks>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.RegOpenKeyEx(System.UIntPtr,System.String,System.UInt32,System.Int32,System.UIntPtr@)">
            <summary> INTERNAL
            Opens the specified registry key. 
            Note that key names are not case sensitive.
            To perform transacted registry operations on a key, call the RegOpenKeyTransacted function. </summary>
            <param name="hKey"> [in] A handle to an open registry key.
            This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the following predefined keys:
                HKEY_CLASSES_ROOT
                HKEY_CURRENT_CONFIG
                HKEY_CURRENT_USER
                HKEY_LOCAL_MACHINE
                HKEY_USERS 
                </param>
            <param name="lpSubKey"> [in, optional] The name of the registry subkey to be opened.
            Key names are not case sensitive.
            The lpSubKey parameter can be a pointer to an empty string. 
            If lpSubKey is a pointer to an empty string and hKey is HKEY_CLASSES_ROOT, 
            phkResult receives the same hKey handle passed into the function.
            Otherwise, phkResult receives a new handle to the key specified by hKey.
            The lpSubKey parameter can be NULL only if hKey is one of the predefined keys.
            If lpSubKey is NULL and hKey is HKEY_CLASSES_ROOT, phkResult receives a new handle to the key specified by hKey.
            Otherwise, phkResult receives the same hKey handle passed in to the function.
            For more information, see Registry Element Size Limits. </param>
            <param name="ulOptions"> [in] Specifies the option to apply when opening the key. 
            Set this parameter to zero or the following: REG_OPTION_OPEN_LINK - The key is a symbolic link.
            Registry symbolic links should only be used when absolutely necessary. </param>
            <param name="samDesired"> [in] A mask that specifies the desired access rights to the key to be opened. 
            The function fails if the security descriptor of the key does not permit the requested access for the calling process.
            For more information, see Registry Key Security and Access Rights. </param>
            <param name="phkResult"> [out] A pointer to a variable that receives a handle to the opened key. 
            If the key is not one of the predefined registry keys, call the RegCloseKey function after you have finished using the handle. </param>
            <returns> If the function succeeds, the return value is ERROR_SUCCESS.
            If the function fails, the return value is a nonzero error code defined in Winerror.h.
            You can use the FormatMessage function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error. </returns>
            <remarks>
            Unlike the RegCreateKeyEx function, the RegOpenKeyEx function does not create the specified key if the key does not exist in the registry.
            Certain registry operations perform access checks against the security descriptor of the key, 
            not the access mask specified when the handle to the key was obtained.For example, even if a key is opened with a samDesired of KEY_READ, 
            it can be used to create registry keys if the key's security descriptor permits. 
            In contrast, the RegSetValueEx function specifically requires that the key be opened with the KEY_SET_VALUE access right.
            
            If your service or application impersonates different users, do not use this function with HKEY_CURRENT_USER.
            Instead, call the RegOpenCurrentUser function.
            Note that operations that access certain registry keys are redirected.
            For more information, see Registry Virtualization and 32-bit and 64-bit Application Data in the Registry. </remarks>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.RegQueryValueEx(System.UIntPtr,System.String,System.Int32,System.UInt32@,System.IntPtr,System.Int32@)">
            <summary> INTERNAL
            Retrieves the type and data for the specified value name associated with an open registry key. </summary>
            <param name="hKey">[in] A handle to an open registry key. The 
            key must have been opened with the KEY_QUERY_VALUE access right.</param>
            <param name="lpValueName">[in, optional]The name of the registry value.
             If lpValueName is NULL or an empty string, "", 
             the function retrieves the type and data for the key's unnamed or default value, if any. </param>
            <param name="lpReserved">This parameter is reserved and must be NULL.</param>
            <param name="lpType">[out, optional] A pointer to a variable that receives a code indicating the type of data stored in the specified value. 
            For a list of the possible type codes, see Registry Value Types. 
            The lpType parameter can be NULL if the type code is not required. </param>
            <param name="lpData">[out, optional] A pointer to a buffer that receives the value's data. 
            This parameter can be NULL if the data is not required. </param>
            <param name="lpcbData"></param>
            <returns>type unsigned integer</returns>
            <remarks>
            https://msdn.microsoft.com/en-us/library/aa914692.aspx
            https://msdn.microsoft.com/en-us/library/windows/desktop/ms724911%28v=vs.85%29.aspx
            http://stackoverflow.com/questions/6725547/should-dword-map-to-int-or-uint
            </remarks>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.RegEnumKeyExW(System.UIntPtr,System.UInt32,System.Text.StringBuilder,System.UInt32@,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary> INTERNAL
            Enumerates the subkeys of the specified open registry key. 
            The function retrieves information about one subkey each time it is called. </summary>
            <param name="hKey"> [in] A handle to an open registry key.
            The key must have been opened with the KEY_ENUMERATE_SUB_KEYS access right.
            For more information, see Registry Key Security and Access Rights.
            This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, or RegOpenKeyTransacted function.
            It can also be one of the following predefined keys:
                HKEY_CLASSES_ROOT
                HKEY_CURRENT_CONFIG
                HKEY_CURRENT_USER
                HKEY_LOCAL_MACHINE
                HKEY_PERFORMANCE_DATA
                HKEY_USERS
                </param>
            <param name="dwIndex"> [in] The index of the subkey to retrieve.
            This parameter should be zero for the first call to the RegEnumKeyEx function and then incremented for subsequent calls.
            Because subkeys are not ordered, any new subkey will have an arbitrary index.
            This means that the function may return subkeys in any order. </param>
            <param name="lpName"> [out] A pointer to a buffer that receives the name of the subkey, including the terminating null character.
            The function copies only the name of the subkey, not the full key hierarchy, to the buffer.
            If the function fails, no information is copied to this buffer.
            For more information, see Registry Element Size Limits. </param>
            <param name="lpcchName"> [in, out] A pointer to a variable that specifies the size of the buffer specified by the lpName parameter, in characters.
            This size should include the terminating null character.
            If the function succeeds, the variable pointed to by lpcName contains the number of characters stored in the buffer,
            not including the terminating null character.
            To determine the required buffer size, use the RegQueryInfoKey function to determine the size of the 
            largest subkey for the key identified by the hKey parameter. </param>
            <param name="lpReserved"> This parameter is reserved and must be NULL. </param>
            <param name="lpClass"> [in, out] A pointer to a buffer that receives the user-defined class of the enumerated subkey. 
            This parameter can be NULL. </param>
            <param name="lpcchClass"> [in, out, optional]A pointer to a variable that specifies the 
            size of the buffer specified by the lpClass parameter, in characters.
            The size should include the terminating null character.
            If the function succeeds, lpcClass contains the number of characters stored in the buffer, 
            not including the terminating null character. This parameter can be NULL only if lpClass is NULL. </param>
            <param name="lpftLastWriteTime"> [out, optional]A pointer to FILETIME structure that receives the time at which the enumerated subkey was last written.
            This parameter can be NULL. </param>
            <returns> If the function succeeds, the return value is ERROR_SUCCESS.
            If the function fails, the return value is a system error code.
            If there are no more subkeys available, the function returns ERROR_NO_MORE_ITEMS.
            If the lpName buffer is too small to receive the name of the key, the function returns ERROR_MORE_DATA. </returns>
            <remarks> To enumerate subkeys, an application should initially call the RegEnumKeyEx function with the dwIndex parameter set to zero. 
            The application should then increment the dwIndex parameter and call RegEnumKeyEx until there are no
            more subkeys (meaning the function returns ERROR_NO_MORE_ITEMS).
            
            The application can also set dwIndex to the index of the last subkey on the first call to the function and decrement 
            the index until the subkey with the index 0 is enumerated.To retrieve the index of the last subkey, use the RegQueryInfoKey function.
            
            While an application is using the RegEnumKeyEx function, it should not make calls to any registration functions that might change the key being enumerated.
            Note that operations that access certain registry keys are redirected.
            For more information, see Registry Virtualization and 32-bit and 64-bit Application Data in the Registry. </remarks>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.RegCloseKey(System.UIntPtr)">
            <summary> INTERNAL
            Closes a handle to the specified registry key. </summary>
            <param name="hKey"> [in] A handle to the open key to be closed. 
            The handle must have been opened by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, RegOpenKeyTransacted, or RegConnectRegistry function. </param>
            <returns> If the function succeeds, the return value is ERROR_SUCCESS.
            If the function fails, the return value is a nonzero error code defined in Winerror.h.
            You can use the FormatMessage function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error. </returns>
            <remarks>
            The handle for a specified key should not be used after it has been closed, because it will no longer be valid. 
            Key handles should not be left open any longer than necessary.
            The RegCloseKey function does not necessarily write information to the registry before returning; 
            it can take as much as several seconds for the cache to be flushed to the hard disk.
            If an application must explicitly write registry information to the hard disk, it can use the RegFlushKey function.
            RegFlushKey, however, uses many system resources and should be called only when necessary.
            
            Do not use types integer or uInt.
            http://www.pinvoke.net/default.aspx/advapi32.regclosekey
            </remarks>
        </member>
        <member name="T:Okuma.Scout.NativeMethods.Fusion">
            <summary>
            ===========================================================
            Microsoft Fusion Class; fusion.dll P-Invokes for GAC Access 
            ===========================================================
            </summary>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.Fusion.CreateAssemblyCache(Okuma.Scout.NativeMethods.IAssemblyCache@,System.Int32)">
            <summary>
            The IAssemblyCache interface is the top-level interface that provides access to the GAC.
            Call CreateAssemblyCache to obtain an instance of the CreateAssemblyCache API </summary>
            <param name="ppAsmCache"> Pointer to return IAssemblyCache </param>
            <param name="reserved"></param>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.Fusion.CreateAssemblyEnum(Okuma.Scout.NativeMethods.IAssemblyEnum@,System.IntPtr,Okuma.Scout.NativeMethods.IAssemblyName,Okuma.Scout.NativeMethods.AssemblyCacheFlags,System.IntPtr)">
            <summary>
            Gets a pointer to an IAssemblyEnum instance that can enumerate the objects in the assembly with the specified IAssemblyName.
            The IAssemblyEnum interface enumerates the assemblies in the GAC. </summary>
            <param name="ppEnum"> [out] Pointer to a memory location that contains the requested IAssemblyEnum pointer. </param>
            <param name="pUnkReserved"> [in] Reserved for future extensibility. 
            pUnkReserved must be a null reference. </param>
            <param name="pName">[in] The IAssemblyName of the requested assembly. 
            This name is used to filter the enumeration. 
            It can be null to enumerate all assemblies in the global assembly cache. </param>
            <param name="flags"> [in] Flags for modifying the enumerator's behavior. 
            This parameter contains exactly one bit from the ASM_CACHE_FLAGS enumeration. </param>
            <param name="pvReserved"> [in] Reserved for future extensibility. 
            pvReserved must be a null reference. </param>
            <remarks> The dwFlags parameter contains exactly one bit from the ASM_CACHE_FLAGS enumeration. </remarks>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.Fusion.CreateAssemblyNameObject(Okuma.Scout.NativeMethods.IAssemblyName@,System.String,Okuma.Scout.NativeMethods.CreateAssemblyNameObjectFlags,System.IntPtr)">
            <summary>
            Gets an interface pointer to an IAssemblyName instance that represents 
            the unique identity of the assembly with the specified name. </summary>
            <param name="ppAssemblyNameObj"> [out] The returned IAssemblyName. </param>
            <param name="szAssemblyName"> [in] The name of the assembly for which to create the new IAssemblyName instance. </param>
            <param name="flags"> [in] Flags to pass to the object constructor. </param>
            <param name="pvReserved"> [in] Reserved for future extensibility. pvReserved must be a null reference. </param>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.Fusion.CreateInstallReferenceEnum(Okuma.Scout.NativeMethods.IInstallReferenceEnum@,Okuma.Scout.NativeMethods.IAssemblyName,System.Int32,System.IntPtr)">
            <summary>
            Gets a pointer to an IInstallReferenceEnum instance that represents a list of an application's references to the specified assembly.
            Call the CreateInstallReferenceEnum API to obtain an instance of the CreateInstallReferenceEnum API </summary>
            <param name="ppRefEnum"> [out] The returned pointer to a memory location that receives the IInstallReferenceEnum pointer. </param>
            <param name="pName"> [in] The IAssemblyName that identifies the assembly for which to enumerate references. </param>
            <param name="dwFlags"> [in] Flags that influence the enumerator's behavior. [Must be zero.?] </param>
            <param name="pvReserved"> [in] Reserved for future extensibility. pvReserved must be a null reference. </param>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.Fusion.GetCachePath(Okuma.Scout.NativeMethods.AssemblyCacheFlags,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            Gets the path to the cached assembly, using the specified flags. </summary>
            <param name="dwCacheFlags"> [in] An ASM_CACHE_FLAGS value that indicates the source of the cached assembly. </param>
            <param name="pwzCachePath"> [out] The returned pointer to the path. </param>
            <param name="pcchPath"> [in, out] The requested maximum length of pwzCachePath, 
            and upon return, the actual length of pwzCachePath. </param>
            <remarks> I created this one, it's untested. I thought that it might be useful
            to try to find .NET4 libraries in the GAC as it is possible to specify 
            an AssemblyCacheFlag of "ROOT_EX" meaning specific to CLR4. </remarks>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.IAssemblyEnum.GetNextAssembly(System.IntPtr,Okuma.Scout.NativeMethods.IAssemblyName@,System.Int32)">
            <summary>
            The IAssemblyEnum::GetNextAssembly method enumerates the assemblies in the GAC. </summary>
            <param name="pvReserved"> Must be null. </param>
            <param name="ppName"> Pointer to a memory location that is to receive the 
            interface pointer to the assembly name of the next assembly that is enumerated. </param>
            <param name="flags"> Must be zero. </param>
            <returns></returns>
        </member>
        <member name="T:Okuma.Scout.NativeMethods.IInstallReferenceEnum">
            <summary>
            The IInstallReferenceEnum interface enumerates all references that are set on an assembly in the GAC. </summary>
            <remarks> NOTE: References that belong to the assembly are locked for changes while those references are being enumerated. </remarks>
        </member>
        <member name="M:Okuma.Scout.NativeMethods.IInstallReferenceEnum.GetNextInstallReferenceItem(Okuma.Scout.NativeMethods.IInstallReferenceItem@,System.Int32,System.IntPtr)">
            <summary>
            IInstallReferenceEnum::GetNextInstallReferenceItem returns the next reference information for an assembly. </summary>
            <param name="ppRefItem"> Pointer to a memory location that receives the IInstallReferenceItem pointer. </param>
            <param name="flags"> Must be zero. </param>
            <param name="pvReserced"> Must be null. </param>
            <returns> Return values are as follows:
            S_OK: - The next item is returned successfully.
            S_FALSE: - No more items. </returns>
        </member>
        <member name="T:Okuma.Scout.NativeMethods.AssemblyCacheFlags">
            <summary> ASM_CACHE_FLAGS 
            Indicates the source of an assembly that is represented by IAssemblyCacheItem in the global assembly cache. </summary>
            <remarks> IAssemblyCacheItem Interface - IS CURRENTLY UNIMPLEMENTED IN THIS WRAPPER CLASS... </remarks>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.AssemblyCacheFlags.ZAP">
            <summary> Enumerates the cache of pre-compiled assemblies by using Ngen.exe. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.AssemblyCacheFlags.GAC">
            <summary> Enumerates the global assembly cache. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.AssemblyCacheFlags.DOWNLOAD">
            <summary> Enumerates the assemblies that have been downloaded 
            on demand or that have been shadow-copied. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.AssemblyCacheFlags.ROOT">
            <summary> Indicates that the GetCachePath function should return the path 
            to the global assembly cache for the common language runtime (CLR) version 2.0. 
            Meaningful only in the context of a call to GetCachePath. </summary>
        </member>
        <member name="F:Okuma.Scout.NativeMethods.AssemblyCacheFlags.ROOT_EX">
            <summary> Indicates that the GetCachePath function should return the path 
            to the global assembly cache for CLR version 4. 
            Meaningful only in the context of a call to GetCachePath.  </summary>
        </member>
        <member name="T:Okuma.Scout.OspFileInfo">
            <summary>
            
            This class is used to discover information about the file system
            
            </summary>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.ErrorMessage">
            <summary>
            This is the string value returned if an error is encountered during the file 
            version retrieval process. </summary>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.DirExists_OSP">
            <summary> Does the directory 'C:\OSP-P\' Exist? </summary>
            <returns>Boolean</returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.DirExists_CNS">
            <summary> Does the directory 'C:\OSP-P\CNS-DAT\' Exist? </summary>
            <returns>Boolean</returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.DirExists_VOLANTE">
            <summary> Does the directory 'C:\OSP-P\VOLANTE\' Exist? </summary>
            <returns>Boolean</returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.DirExists_CRAD">
            <summary> Does the directory 'C:\OSP-P\VOLANTE\CRAD\' Exist? </summary>
            <returns>Boolean</returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.DirExists_Okuma">
            <summary> Does the directory 'D:\Program Files\Okuma\' Exist? </summary>
            <returns>Boolean</returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.DirExists_PCNCM">
            <summary> Does the directory 'C:\OSP-P\emulator\' Exist? </summary>
            <returns>Boolean</returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspLatheSpecialApi_Exists">
            <summary> Does the OSP API file for P300 Special Lathe 'LTMIM_API.DLL' exist under 'C:\OSP-P\', including subdirectories?
            </summary>
            <returns>Boolean</returns>
            <remarks>[OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspLatheSpecialApi_Version">
            <summary> Return the version of OSP API file for P300 Special Lathe 'LTMIM_API.DLL' </summary>
            <returns>string</returns>
            <remarks>Will either return the version information or an error message 
            [OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspLatheCommandApi_Exists">
            <summary> Does the OSP Command API file 'LCMDAPI.EXE' exist under 'C:\OSP-P\', including subdirectories? </summary>
            <returns>Boolean</returns>
            <remarks>[OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspLatheCommandApi_Version">
            <summary> Return the version of the OSP Command API file 'LCMDAPI.EXE' </summary>
            <returns>string</returns>
            <remarks>Will either return the version information or an error message 
            [OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspLatheDataApi_Exists">
            <summary> Does the OSP Data API file 'LDATAPI.DLL' exist under 'C:\OSP-P\', including subdirectories? </summary>
            <returns>Boolean</returns>
            <remarks>[OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspLatheDataApi_Version">
            <summary> Return the version of the OSP Data API file 'LDATAPI.DLL' </summary>
            <returns>string</returns>
            <remarks>Will either return the version information or an error message 
            [OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspMachiningCenterSpecialApi_Exists">
            <summary> Does the OSP API file for P300 Special Machining Center 'MTMIM_API.DLL' exist under 'C:\OSP-P\', including subdirectories? </summary>
            <returns>Boolean</returns>
            <remarks>[OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspMachiningCenterSpecialApi_Version">
            <summary> Return the version of OSP API file for P300 Special Machining Center 'MTMIM_API.DLL' </summary>
            <returns>string</returns>
            <remarks>Will either return the version information or an error message 
            [OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspMachiningCenterCommandApi_Exists">
            <summary> Does the OSP Command API file 'MCMDAPI.EXE' exist under 'C:\OSP-P\', including subdirectories? </summary>
            <returns>Boolean</returns>
            <remarks>[OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspMachiningCenterCommandApi_Version">
            <summary> Return the version of the OSP Command API file 'MCMDAPI.EXE' </summary>
            <returns>string</returns>
            <remarks>Will either return the version information or an error message 
            [OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspMachiningCenterDataApi_Exists">
            <summary> Does the OSP Data API file 'MDATAPI.DLL' exist under 'C:\OSP-P\', including subdirectories? </summary>
            <returns>Boolean</returns>
            <remarks>[OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspMachiningCenterDataApi_Version">
            <summary> Return the version of the OSP Data API file 'MDATAPI.DLL' </summary>
            <returns>string</returns>
            <remarks>Will either return the version information or an error message 
            [OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspGrinderCommandApi_Exists">
            <summary> Does the OSP Command API file 'GCMDAPI.EXE' exist under 'C:\OSP-P\', including subdirectories? </summary>
            <returns>Boolean</returns>
            <remarks>[OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspGrinderCommandApi_Version">
            <summary> Return the version of the OSP Command API file 'GCMDAPI.EXE' </summary>
            <returns>string</returns>
            <remarks>Will either return the version information or an error message 
            [OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspGrinderDataApi_Exists">
            <summary> Does the OSP Data API file 'GDATAPI.DLL' exist under 'C:\OSP-P\', including subdirectories? </summary>
            <returns>Boolean</returns>
            <remarks>[OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspGrinderDataApi_Version">
            <summary> Return the version of the OSP Data API file 'GDATAPI.DLL' </summary>
            <returns>string</returns>
            <remarks>Will either return the version information or an error message 
            [OCJ API FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.ThincApiLicenseExists">
            <summary> Does the file 'okuma.api.lic' exist in 'D:\Program Files\Okuma\Licenses\' ? </summary>
            <returns>Boolean</returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.ThincApiLicenseModifiedDate">
            <summary>
            Gets the Last Write Time of file ''OSPMNGCD.CNC' in 'C:\OSP-P\' </summary>
            <returns>ShortDate in string format</returns>
            <remarks>Throws exception if file does not exist! [check first using DMCExists()].</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.EbyFryExists">
            <summary> Does the file 'EBISTART.EXE' exist in 'C:\OSP-P\HMI\' ? </summary>
            <returns>Boolean</returns>
            <remarks>This is part of the OSP NC Software HMI Program</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.EbiFryVersion">
            <summary>
            Get the file version of EBISTART.EXE </summary>
            <returns>string</returns>
            <remarks>This is part of the OSP NC Software HMI Program</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.PcNcMasterExists">
            <summary> Does the file 'conpanel.exe' exist in 'C:\OSP-P\emulator\tools\' ? </summary>
            <returns>Boolean</returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.ApiNotifierExists">
            <summary> Does the file 'APINotifierService.exe' exist in 'D:\Program Files\Okuma\APINotifier\' ? </summary>
            <returns>Boolean</returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.ApiNotifierVersion">
            <summary>
            Get the file version of APINotifierService.exe </summary>
            <returns>string</returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.SoftSwitchExists">
            <summary> Does the file 'SOFTSWITCH.EXE' exist in 'C:\OSP-P\VOLANTE\' ? </summary>
            <returns>Boolean</returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.SoftSwitchVersion">
            <summary>
            Get the file version of SOFTSWITCH.EXE
            </summary>
            <returns></returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.DMCExists">
            <summary> Does the file 'OSPMNGCD.CNC' exist in 'C:\OSP-P\' ? </summary>
            <returns>Boolean</returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.DMCModifiedDate">
            <summary>
            Gets the Last Write Time of file ''OSPMNGCD.CNC' in 'C:\OSP-P\' </summary>
            <returns>ShortDate in string format</returns>
            <remarks>Throws exception if file does not exist! [check first using DMCExists()].</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.PiodLib_Exists">
            <summary> Does the OSP IO Data Library 'PIODLIB.dll' exist under 'C:\OSP-P\SHAREDLL\' ? </summary>
            <returns> type Boolean </returns>
            <remarks>[OCJ DLL FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.PiodLib_Version">
            <summary> Return the version of theOSP IO Data Library file 'PIODLIB.dll' </summary>
            <returns> type string </returns>
            <remarks>Will either return the version information or an error message 
            [OCJ DLL FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspGesture_Exists">
            <summary> Does the P300A Touch Driver file 'OSP-GESTURE.dll' exist under 'C:\OSP-P\SHAREDLL\' ? </summary>
            <returns>Boolean</returns>
            <remarks>[OCJ DLL FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspGesture_Version">
            <summary> Return the version of the P300A Touch Driver file 'OSP-GESTURE.dll' </summary>
            <returns>string</returns>
            <remarks>Will either return the version information or an error message 
            [OCJ DLL FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspTouch_Exists">
            <summary> Does the P300A Touch Driver file 'OSP-TOUCH-LIB.dll' exist under 'C:\OSP-P\SHAREDLL\' ? </summary>
            <returns>Boolean</returns>
            <remarks>[OCJ DLL FILE]</remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.OspTouch_Version">
            <summary> Return the version of the P300A Touch Driver file 'OSP-TOUCH-LIB.dll' </summary>
            <returns>string</returns>
            <remarks>Will either return the version information or an error message 
            [OCJ DLL FILE]</remarks>
        </member>
        <member name="M:Okuma.Scout.OspFileInfo.ExistanceCheckPlusSearch(System.Nullable{System.Boolean}@,System.String,System.String,System.String)">
            <summary>
            check for the existence of files a couple of different ways. </summary>
            <param name="localExistVar"></param>
            <param name="ExplicitLocation"></param>
            <param name="GeneralLocation"></param>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Okuma.Scout.OspFileInfo.GetVersionPlusSearch(System.Nullable{System.Boolean}@,System.String,System.String,System.String)">
            <summary>
            find a file and get its assembly version </summary>
            <param name="localExistVar"></param>
            <param name="ExplicitLocation"></param>
            <param name="GeneralLocation"></param>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Okuma.Scout.OspFileInfo.GetAsmVersion(System.String)">
            <summary>
            Get Assembly Version </summary>
            <param name="File"></param>
            <returns>string</returns>
        </member>
        <member name="M:Okuma.Scout.OspFileInfo.FormatVersion(System.String)">
            <summary>
            Used to transform this: "w, x, y, z" Into "w.x.y.z" </summary>
            <param name="input"> string in the format "w, x, y, z" </param>
            <returns> String in the format "w.x.y.z" </returns>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.ThincDevCommandApiExists_Lathe">
            <summary> Does the THINC Command API file 'Okuma.CLCMDAPI.dll' exist under 'D:\Program Files\Okuma\' ? </summary>
            <returns>Boolean</returns>
            <remarks>[OAC API FILE] Only present if THINC-API "Development" Version is installed. </remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.ThincDevCommandApiExists_MachiningCenter">
            <summary> Does the THINC Command API file 'Okuma.CMCMDAPI.dll' exist under 'D:\Program Files\Okuma\' ? </summary>
            <returns>Boolean</returns>
            <remarks>[OAC API FILE] Only present if THINC-API "Development" Version is installed. </remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.ThincDevCommandApiExists_Grinder">
            <summary> Does the THINC Command API file 'Okuma.CGCMDAPI.dll' exist under 'D:\Program Files\Okuma\' ? </summary>
            <returns>Boolean</returns>
            <remarks>[OAC API FILE] Only present if THINC-API "Development" Version is installed. </remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.ThincDevDataApiExists_Lathe">
            <summary> Does the THINC Data API file 'Okuma.CLDATAPI.dll' exist under 'D:\Program Files\Okuma\' ? </summary>
            <returns>Boolean</returns>
            <remarks>[OAC API FILE] Only present if THINC-API "Development" Version is installed. </remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.ThincDevDataApiExists_MachiningCenter">
            <summary> Does the THINC Data API file 'Okuma.CMDATAPI.dll' exist under 'D:\Program Files\Okuma\' ? </summary>
            <returns>Boolean</returns>
            <remarks>[OAC API FILE] Only present if THINC-API "Development" Version is installed. </remarks>
        </member>
        <member name="P:Okuma.Scout.OspFileInfo.ThincDevDataApiExists_Grinder">
            <summary> Does the THINC Data API file 'Okuma.CGDATAPI.dll' exist under 'D:\Program Files\Okuma\' ? </summary>
            <returns>Boolean</returns>
            <remarks>[OAC API FILE] Only present if THINC-API "Development" Version is installed. </remarks>
        </member>
        <member name="M:Okuma.Scout.OspFileInfo.SearchForFile(System.String,System.String)">
            <summary>
            Looks for the file specified in the directory specified + subdirectories.
            </summary>
            <param name="BaseDir"></param>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="T:Okuma.Scout.OspProcessInfo">
            <summary>
            
            This class collects process information related to OSP HMI software and API
            
            </summary>
        </member>
        <member name="P:Okuma.Scout.OspProcessInfo.ApiNotifierRunning">
            <summary>
            Is the ApiNotifier Service Running? </summary>
        </member>
        <member name="P:Okuma.Scout.OspProcessInfo.EbiStartRunning">
            <summary>
            Is "EbiStart" (the OSP HMI software) running? </summary>
        </member>
        <member name="P:Okuma.Scout.OspProcessInfo.SoftSwitchRunning">
            <summary>
            Is "SoftSwitch" (another part of the OSP HMI) Running? </summary>
        </member>
        <member name="P:Okuma.Scout.OspProcessInfo.WidgetManagerRunning">
            <summary>
            Is the OSP Widget Manager Running? </summary>
        </member>
        <member name="T:Okuma.Scout.OS">
            <summary>
            
            This class provides detailed information about the host operating system.
            
            </summary>
        </member>
        <member name="P:Okuma.Scout.OS.ErrorMessage">
            <summary> This is the string value returned if an error is 
            encountered during the file version retrieval process. </summary>
        </member>
        <member name="M:Okuma.Scout.OS.#cctor">
            <summary> Constructor </summary>
        </member>
        <member name="P:Okuma.Scout.OS.VersionTitle">
            <summary> Version.txt > Title: </summary>
        </member>
        <member name="P:Okuma.Scout.OS.VersionTarget">
            <summary> Version.txt > Target: </summary>
        </member>
        <member name="P:Okuma.Scout.OS.VersionConfigVersion">
            <summary> Version.txt > Config Version: </summary>
        </member>
        <member name="P:Okuma.Scout.OS.VersionConfigDate">
            <summary> Version.txt > Config Date: </summary>
        </member>
        <member name="P:Okuma.Scout.OS.VersionLanguage">
            <summary> Version.txt > Language: </summary>
        </member>
        <member name="P:Okuma.Scout.OS.VersionComment">
            <summary> Version.txt > Comment: </summary>
        </member>
        <member name="P:Okuma.Scout.OS.Name">
            <summary> Gets the name of the operating system running on this computer. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.Edition">
            <summary> Gets the edition of the operating system running on this computer. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.Version">
            <summary> Gets the full version of the operating system running on this computer. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.ServicePack">
            <summary> Gets the service pack information of the operating system running on this computer. </summary>     
        </member>
        <member name="P:Okuma.Scout.OS.InternetConnection">
            <summary> Checks for Internet connection by pinging MyOkuma.com. Returns Boolean True if response received. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.ProgramBits">
            <summary>
            Determines if the current application is 32 or 64-bit. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.OSBits">
            <summary>
            Determines if the operating system is 32 or 64-bit. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.ProcessorBits">
            <summary>
            Determines if the current processor is 32 or 64-bit. </summary>
        </member>
        <member name="M:Okuma.Scout.OS.GetAccessLevel">
            <summary>
            Determine the highest privileged built-in role the current user belongs to.
            </summary>
            <returns>System.Security.Principal.WindowsBuiltInRole Highest Privileged Role </returns>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_Win32CSP">
            <summary> The Win32_OperatingSystem WMI class represents a 
            Windows-based operating system installed on a computer. </summary>
            <returns> Class of type <see cref="T:Okuma.Scout.OS.WMI_ComputerSystemProduct"/>. </returns>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_Win32OS">
            <summary> The Win32_OperatingSystem WMI class represents a 
            Windows-based operating system installed on a computer. </summary>
            <returns> Class of type <see cref="T:Okuma.Scout.OS.WMI_OperatingSystem"/>. </returns>
        </member>
        <member name="M:Okuma.Scout.OS.String_QueryMO(System.Management.ManagementObject,System.String)">
            <summary> string.Empty if null </summary>
        </member>
        <member name="M:Okuma.Scout.OS.Short_QueryMO(System.Management.ManagementObject,System.String)">
            <summary> 0 if null </summary>
        </member>
        <member name="M:Okuma.Scout.OS.Byte_QueryMO(System.Management.ManagementObject,System.String)">
            <summary> 0 if null </summary>
        </member>
        <member name="M:Okuma.Scout.OS.Bool_QueryMO(System.Management.ManagementObject,System.String)">
            <summary> false if null </summary>
        </member>
        <member name="M:Okuma.Scout.OS.DateTime_QueryMO(System.Management.ManagementObject,System.String)">
            <summary> default(DateTime) if null </summary>
        </member>
        <member name="M:Okuma.Scout.OS.Uint_QueryMO(System.Management.ManagementObject,System.String)">
            <summary> 0 if null </summary>
        </member>
        <member name="M:Okuma.Scout.OS.Ushort_QueryMO(System.Management.ManagementObject,System.String)">
            <summary> 0 if null </summary>
        </member>
        <member name="M:Okuma.Scout.OS.Ulong_QueryMO(System.Management.ManagementObject,System.String)">
            <summary> 0 if null </summary>
        </member>
        <member name="T:Okuma.Scout.OS.WMI_ComputerSystemProduct">
            <summary>
            The Win32_ComputerSystemProduct WMI class represents a product. 
            This includes software and hardware used on this computer system.
            <para>For additional info, please refer to 
            <see href="https://msdn.microsoft.com/en-us/library/aa394105(v=vs.85).aspx">Win32_ComputerSystemProduct class</see>.</para>
            </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_ComputerSystemProduct.Caption">
            <summary> Short textual description for the product. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_ComputerSystemProduct.Description">
            <summary> Textual description of the product. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_ComputerSystemProduct.IdentifyingNumber">
            <summary> Product identification, such as a serial number on software, 
            a die number on a hardware chip, or (for noncommercial products) a project number. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_ComputerSystemProduct.Name">
            <summary> Commonly used product name. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_ComputerSystemProduct.SKUNumber">
            <summary> Product's stock-keeping unit (SKU) information. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_ComputerSystemProduct.Vendor">
            <summary> Name of the product's supplier, or the entity selling 
            the product (the manufacturer, reseller, OEM, and so on). </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_ComputerSystemProduct.Version">
            <summary> Product version information. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_ComputerSystemProduct.UUID">
            <summary> Universally unique identifier (UUID) for this product. 
            A UUID is a 128-bit identifier that is guaranteed to be different from other generated UUIDs. 
            If a UUID is not available, a UUID of all zeros is used. </summary>
        </member>
        <member name="T:Okuma.Scout.OS.WMI_OperatingSystem">
            <summary> 
            The Win32_OperatingSystem WMI class represents a Windows-based operating system installed on a computer.
            <para>For additional info, please refer to 
            <see href="https://msdn.microsoft.com/en-us/library/aa394239(v=vs.85).aspx">The Win32_OperatingSystem class</see>.</para>
            </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.BootDevice">
            <summary> Name of the disk drive from which the Windows operating system starts. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.BuildNumber">
            <summary> Build number of an operating system. It can be used for more precise version information than product release version numbers. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.BuildType">
            <summary> Type of build used for an operating system. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.Caption">
            <summary> Short description of the object—a one-line string. 
            The string includes the operating system version. 
            For example, "Microsoft Windows 7 Enterprise ". 
            This property can be localized.
            This property is inherited from CIM_ManagedSystemElement. </summary>
            <remarks> Windows Vista and Windows 7:  This property may contain trailing characters.
            For example, the string "Microsoft Windows 7 Enterprise " (trailing space included) 
            may be necessary to retrieve information using this property. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.CodeSet">
            <summary> Code page value an operating system uses. 
            A code page contains a character table that an operating system uses to translate strings for different languages. 
            The American National Standards Institute (ANSI) lists values that represent defined code pages. 
            If an operating system does not use an ANSI code page, this member is set to 0 (zero). 
            The CodeSet string can use a maximum of six characters to define the code page value. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.CountryCode">
            <summary> Code for the country/region that an operating system uses. 
            Values are based on international phone dialing prefixes—also referred to as IBM country/region codes. 
            This property can use a maximum of six characters to define the country/region code value. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.CreationClassName">
            <summary> Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. 
            When used with other key properties of the class, this property allows 
            all instances of this class and its subclasses to be identified uniquely. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.CSCreationClassName">
            <summary> Creation class name of the scoping computer system. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem.  </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.CSDVersion">
            <summary> NULL-terminated string that indicates the latest service pack installed on a computer. 
            If no service pack is installed, the string is NULL. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.CSName">
            <summary> Name of the scoping computer system. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.CurrentTimeZone">
            <summary> Number, in minutes, an operating system is offset from Greenwich mean time (GMT). 
            The number is positive, negative, or zero. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.DataExecutionPrevention_Available">
            <summary> When the data execution prevention hardware feature is available, 
            this property indicates that the feature is set to work for 32-bit applications if True. 
            On 64-bit computers, the data execution prevention feature is configured in the 
            Boot Configuration Data (BCD) store and the properties in Win32_OperatingSystem are set accordingly. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.DataExecutionPrevention_32BitApplications">
            <summary> Data execution prevention is a hardware feature to prevent buffer overrun 
            attacks by stopping the execution of code on data-type memory pages. 
            If True, then this feature is available. On 64-bit computers, the data execution prevention 
            feature is configured in the BCD store and the properties in Win32_OperatingSystem are set accordingly. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.DataExecutionPrevention_Drivers">
            <summary> When the data execution prevention hardware feature is available, 
            this property indicates that the feature is set to work for drivers if True. 
            On 64-bit computers, the data execution prevention feature is configured in 
            the BCD store and the properties in Win32_OperatingSystem are set accordingly. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.DataExecutionPrevention_SupportPolicy">
            <summary> Indicates which Data Execution Prevention (DEP) setting is applied. 
            The DEP setting specifies the extent to which DEP applies to 32-bit applications on the system. 
            DEP is always applied to the Windows kernel. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.Debug">
            <summary> Operating system is a checked (debug) build. 
            If True, the debugging version is installed. 
            Checked builds provide error checking, argument verification, and system debugging code. 
            Additional code in a checked binary generates a kernel debugger error message and breaks into the debugger. 
            This helps immediately determine the cause and location of the error. 
            Performance may be affected in a checked build due to the additional code that is executed. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.Description">
            <summary> Description of the Windows operating system. 
            Some user interfaces for example, those that allow editing of 
            this description, limit its length to 48 characters. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.Distributed">
            <summary> If True, the operating system is distributed across several computer system nodes.
            If so, these nodes should be grouped as a cluster. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.EncryptionLevel">
            <summary> Encryption level for secure transactions: 40-bit, 128-bit, or n-bit. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.FreePhysicalMemory">
            <summary> Number, in kilobytes, of physical memory currently unused and available.
            For more information about using uint64 values in scripts, see Scripting in WMI. </summary>
            <remarks>  This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.FreeSpaceInPagingFiles">
            <summary> Number, in kilobytes, that can be mapped into the operating 
            system paging files without causing any other pages to be swapped out.
            For more information about using uint64 values in scripts, see Scripting in WMI. </summary>
            <remarks>  This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.FreeVirtualMemory">
            <summary> Number, in kilobytes, of virtual memory currently unused and available.
            For more information about using uint64 values in scripts, see Scripting in WMI. </summary>
            <remarks>  This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.InstallDate">
            <summary> Date object was installed. 
            This property does not require a value to indicate that the object is installed. </summary>
            <remarks>  This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.LastBootUpTime">
            <summary> Date and time the operating system was last restarted. </summary>
            <remarks>  This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.LocalDateTime">
            <summary> Operating system version of the local date and time-of-day. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.Locale">
            <summary> Language identifier used by the operating system. 
            A language identifier is a standard international numeric abbreviation for a country/region. 
            Each language has a unique language identifier (LANGID), a 16-bit value that 
            consists of a primary language identifier and a secondary language identifier. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.Manufacturer">
            <summary> Name of the operating system manufacturer. 
            For Windows-based systems, this value is "Microsoft Corporation". </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.MaxNumberOfProcesses">
            <summary> Maximum number of process contexts the operating system can support. 
            The default value set by the provider is 4294967295 (0xFFFFFFFF). 
            If there is no fixed maximum, the value should be 0 (zero). 
            On systems that have a fixed maximum, this object can help diagnose failures 
            that occur when the maximum is reached—if unknown, enter 4294967295 (0xFFFFFFFF). </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.MaxProcessMemorySize">
            <summary> Maximum number, in kilobytes, of memory that can be allocated to a process. 
            For operating systems with no virtual memory, typically this value is equal to 
            the total amount of physical memory minus the memory used by the BIOS and the operating system. 
            For some operating systems, this value may be infinity, in which case 0 (zero) should be entered. 
            In other cases, this value could be a constant, for example, 2G or 4G.
            For more information about using uint64 values in scripts, see Scripting in WMI. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.Name">
            <summary> Operating system instance within a computer system. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.NumberOfLicensedUsers">
            <summary> Number of user licenses for the operating system. If unlimited, enter 0 (zero). 
            If unknown, enter -1. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.NumberOfProcesses">
            <summary> Number of process contexts currently loaded or running on the operating system. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.NumberOfUsers">
            <summary> Number of user sessions for which the operating system is storing state information currently. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.OperatingSystemSKU">
            <summary> Stock Keeping Unit (SKU) number for the operating system. 
            These values are the same as the PRODUCT_* constants defined in WinNT.h that are used with the GetProductInfo function. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.Organization">
            <summary> Company name for the registered user of the operating system. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.OSArchitecture">
            <summary> Architecture of the operating system, as opposed to the processor. 
            This property can be localized. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.OSLanguage">
            <summary> Language version of the operating system installed. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.OSProductSuite">
            <summary> Installed and licensed system product additions to the operating system. 
            For example, the value of 146 (0x92) for OSProductSuite indicates 
            Enterprise, Terminal Services, and Data Center (bits one, four, and seven set). </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.OSType">
            <summary> Type of operating system. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.Primary">
            <summary> Specifies whether this is the primary operating system. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.ProductType">
            <summary> Additional system information. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.RegisteredUser">
            <summary> Name of the registered user of the operating system. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.SerialNumber">
            <summary> Operating system product serial identification number. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.ServicePackMajorVersion">
            <summary> Major version number of the service pack installed on the computer system. 
            If no service pack has been installed, the value is 0 (zero). </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.ServicePackMinorVersion">
            <summary> Minor version number of the service pack installed on the computer system.
            If no service pack has been installed, the value is 0 (zero). </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.SizeStoredInPagingFiles">
            <summary> Total number of kilobytes that can be stored in the operating system 
            paging files—0 (zero) indicates that there are no paging files. 
            Be aware that this number does not represent the actual physical size of the paging file on disk.
            For more information about using uint64 values in scripts, see Scripting in WMI. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.Status">
            <summary> Current status of the object. 
            Various operational and nonoperational statuses can be defined. 
            Operational statuses include: "OK", "Degraded", and Predict Fail
            (an element, such as a SMART-enabled hard disk drive may function properly, but predicts a failure in the near future). 
            Nonoperational statuses include: "Error", "Starting", "Stopping", and "Service". </summary>
            <remarks> This property is inherited from CIM_ManagedSystemElement. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.SuiteMask">
            <summary> Bit flags that identify the product suites available on the system. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.SystemDevice">
            <summary> Physical disk partition on which the operating system is installed. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.SystemDirectory">
            <summary> System directory of the operating system. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.SystemDrive">
            <summary> Letter of the disk drive on which the operating system resides. Example: "C:" </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.TotalVirtualMemorySize">
            <summary> Number, in kilobytes, of virtual memory. 
            For example, this may be calculated by adding the amount of total RAM to the amount of 
            paging space, that is, adding the amount of memory in or aggregated 
            by the computer system to the property, SizeStoredInPagingFiles.
            For more information about using uint64 values in scripts, see Scripting in WMI. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.TotalVisibleMemorySize">
            <summary> Total amount, in kilobytes, of physical memory available to the operating system. 
            This value does not necessarily indicate the true amount of physical memory, 
            but what is reported to the operating system as available to it.
            For more information about using uint64 values in scripts, see Scripting in WMI. </summary>
            <remarks> This property is inherited from CIM_OperatingSystem. </remarks>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.Version">
            <summary> Version number of the operating system. </summary>
        </member>
        <member name="P:Okuma.Scout.OS.WMI_OperatingSystem.WindowsDirectory">
            <summary> Windows directory of the operating system. </summary>
        </member>
        <member name="T:Okuma.Scout.PIOD">
            <summary>
            
            This class is responsible for reading PIOD files 
            
            </summary>
        </member>
        <member name="F:Okuma.Scout.PIOD.machinePiodFileExist">
            <summary> Machine PIOD File has been successfully retrieved </summary>
        </member>
        <member name="F:Okuma.Scout.PIOD.useUserDefinedFile">
            <summary> If true, use the requestedPiodFilePath, 
            otherwise use MachinePiodFilePath </summary>
        </member>
        <member name="F:Okuma.Scout.PIOD.activePiodFilePath">
            <summary> File source for currently loaded PIOD file </summary>
        </member>
        <member name="P:Okuma.Scout.PIOD.machinePiodFilePath">
            <summary> File path to active PIOD file 
            (generally for machines and simulators only) </summary>
        </member>
        <member name="F:Okuma.Scout.PIOD.userDefinedPiodFilePath">
            <summary> File source for user defined PIOD file </summary>
        </member>
        <member name="F:Okuma.Scout.PIOD.PiodFileValidAndReadSuccess">
            <summary> True when a file has been read and it is valid </summary>
        </member>
        <member name="P:Okuma.Scout.PIOD.PiodFileIsValid">
            <summary>
            Returns true if the currently selected PIOD file exits and is the correct file type
            </summary>
        </member>
        <member name="P:Okuma.Scout.PIOD.MachinePiodFileExists">
            <summary>
            Does an active PIOD File exist on this machine? 
            Note: active means the file name and location is accordant with a real machine or simulator </summary>
        </member>
        <member name="P:Okuma.Scout.PIOD.UseUserDefinedFile">
            <summary>
            Switch indicating whether to use active machine PIOD file or a user defined one 
            </summary>
        </member>
        <member name="P:Okuma.Scout.PIOD.UserDefinedFilePath">
            <summary>
            User defined file path to a PIOD file
            </summary>
        </member>
        <member name="P:Okuma.Scout.PIOD.Control">
            <summary>
            Control Type </summary>
        </member>
        <member name="P:Okuma.Scout.PIOD.ProjectNumber">
            <summary>
            Okuma PJ# </summary>
        </member>
        <member name="P:Okuma.Scout.PIOD.PlcSystem">
            <summary>
            PLC Type </summary>
        </member>
        <member name="P:Okuma.Scout.PIOD.MachineType">
            <summary>
            Machine Type </summary>
        </member>
        <member name="M:Okuma.Scout.PIOD.FindMachinePiodFile">
            <summary>
            Returns the file path to the PIOD file </summary>
            <returns> true if found, else false </returns>
        </member>
        <member name="M:Okuma.Scout.PIOD.ReadPiodFile">
            <summary>
            Load a PIOD file into memory (populate PBUSections Dictionary) </summary>
            <returns> true if file successfully loaded, else false. </returns>
        </member>
        <member name="T:Okuma.Scout.PIOD.PBU">
            <summary>
            Class used to store PIOD:PBU Section data in the PBUSections Dictionary </summary>
        </member>
        <member name="T:Okuma.Scout.Platform">
            <summary>
            
            Provides basic information about the machine and control
            
            </summary>
        </member>
        <member name="M:Okuma.Scout.Platform.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Okuma.Scout.Platform" /> class. </summary>
        </member>
        <member name="P:Okuma.Scout.Platform.Machine">
            <summary>
            Returns enumeration of type 'MachineType' </summary>
        </member>
        <member name="P:Okuma.Scout.Platform.Control">
            <summary>
            Returns enumeration of type 'ControlType' </summary>
        </member>
        <member name="P:Okuma.Scout.Platform.BaseMachineType">
            <summary>
            The Base type ignores NC-Master or PC-NC master types and only reports 
            Lathe, Machining Center, or Grinder for those types. </summary>
            <remarks> This is for convenience when differentiating 
            which API calls are required in a function which can then 
            provide the desired functionality regardless of machine type. </remarks>
        </member>
        <member name="P:Okuma.Scout.Platform.OspSuiteVersion">
            <summary>
            Version of OSP suite on this machine </summary>
            <remarks> Returns "N/A" if not installed. </remarks>
        </member>
        <member name="P:Okuma.Scout.Platform.NcControlPackageVersion">
            <summary>
            NC Control Package Version on this machine </summary>
            <remarks> Returns "N/A" if unable to determine version. </remarks>
        </member>
        <member name="M:Okuma.Scout.Platform.ConvertToMachineTypeString(Okuma.Scout.Enums.MachineType)">
            <summary>
            Returns a more human readable version of the enumeration values for MachineType. </summary>
            <param name="MT"> [in] Machine Type </param>
            <returns> Description of the machine type. </returns>
        </member>
        <member name="M:Okuma.Scout.Platform.DetermineMachineType">
            <summary>
            Determine Machine type </summary>
            <returns> Enumeration Enums.MachineType </returns>
        </member>
        <member name="M:Okuma.Scout.Platform.DetermineControlType">
            <summary>
            Determines the Machine Control Generation (P-Series)
            If Machine Type is PC, control type is N/A.
            If no match is found, returns ControlType "Unknown" </summary>
            <returns> enumeration Platform.ControlType </returns>
        </member>
        <member name="T:Okuma.Scout.ProgramInfo">
            <summary>
            
            This class was built to be a reusable way to populate the about screen with useful information
            
            </summary>
        </member>
        <member name="P:Okuma.Scout.ProgramInfo.ErrorMessage">
            <summary>
            This is the string value returned if an error is encountered during the file version retrieval process.
            </summary>
        </member>
        <member name="P:Okuma.Scout.ProgramInfo.AssemblyGuid">
            <summary>
            public GUID property for use in static class </summary>
            <returns> 
            Returns the application GUID or ErrorMessage if unable to get it. </returns>
        </member>
        <member name="P:Okuma.Scout.ProgramInfo.AssemblyTitle">
            <summary>
            Returns the program "Title" / Name.
            Alternatively, if the title attribute is empty, it will try getting the file name of the assembly minus the extension.
            </summary>
        </member>
        <member name="P:Okuma.Scout.ProgramInfo.AssemblyCopyright">
            <summary>
            Returns the application's copyright info or ErrorMessage if unable to get it
            </summary>
        </member>
        <member name="P:Okuma.Scout.ProgramInfo.AssemblyCompany">
            <summary>
            Returns the company field for the application or ErrorMessage if unable to get it
            </summary>
        </member>
        <member name="P:Okuma.Scout.ProgramInfo.AssemblyDescription">
            <summary>
            Returns the description of this assembly or else ErrorMessage </summary>
        </member>
        <member name="P:Okuma.Scout.ProgramInfo.ScoutDllAssemblyVersion">
            <summary>
            Returns the Scout Library version </summary>    
        </member>
        <member name="P:Okuma.Scout.ProgramInfo.ThisAssemblyVersion">
            <summary>
            Returns the application version or ErrorMessage if unable to get it
            </summary>
        </member>
        <member name="P:Okuma.Scout.ProgramInfo.ScoutDllBuildDate">
            <summary>Returns the build date of Okuma.Scout.dll </summary>
        </member>
        <member name="P:Okuma.Scout.ProgramInfo.ThisAssemblyBuildDate">
            <summary>Returns the build date of the application consuming Scout.dll </summary>
        </member>
        <member name="M:Okuma.Scout.ProgramInfo.getAssemblyBuildDate(System.String)">
            <summary> Returns the build date of a given library via linker time stamp </summary>
        </member>
        <member name="T:Okuma.Scout.Reg">
            <summary>
            
            This class provides registry access, works in 32 or 64 bit environments, and is .Net 2 compatible
            
            </summary>
        </member>
        <member name="F:Okuma.Scout.Reg.ERROR_SUCCESS">
            <summary> 0 (0x0)
            The operation completed successfully. </summary>
        </member>
        <member name="F:Okuma.Scout.Reg.ERROR_FILE_NOT_FOUND">
            <summary> 2 (0x2) 
            The system cannot find the file specified. </summary>
        </member>
        <member name="F:Okuma.Scout.Reg.ERROR_ACCESS_DENIED">
            <summary> 5 (0x5) 
            Access is denied. </summary>
        </member>
        <member name="F:Okuma.Scout.Reg.ERROR_NO_MORE_FILES">
            <summary> 18 (0x12) 
            There are no more files. </summary>
        </member>
        <member name="F:Okuma.Scout.Reg.ERROR_MORE_DATA">
            <summary> 234 (0xEA) 
            More data is available. </summary>
        </member>
        <member name="F:Okuma.Scout.Reg.ERROR_NO_MORE_ITEMS">
            <summary> 259 (0x103) 
            No more data is available. </summary>
        </member>
        <member name="P:Okuma.Scout.Reg.AccessDeniedEncountered">
            <summary> Set to true if an Access Denied error is encountered.
            Subsequent Access Denied warnings will be ignored when this flag is set. </summary>
        </member>
        <member name="M:Okuma.Scout.Reg.RegistryGetSubKeyNames(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Retrieves a list of key names that exist under a specified key </summary>
            <param name="SubKey"> Sub-Key Name </param>
            <param name="Result"> List of Sub-Keys listed under the specified key (if present, otherwise NULL) </param>
            <remarks> Specify "out" before referencing a string list when using this function </remarks>
            <returns> Boolean "True" if 'out Result' is not null. </returns>
        </member>
        <member name="M:Okuma.Scout.Reg.RegistryGetLocalMachineValue(System.String,System.String,System.String@)">
            <summary>
            Returns the data for a specified value as an out parameter of type string 
            </summary>
            <param name="SubKey"> Name of the key to retrieve </param>
            <param name="Value"> The value that will be retrieved </param>
            <param name="Result"> Contents of Value </param>
            <returns> True if successful, otherwise False. 
            </returns>
            <remarks> This function is superior to using .NET 'Registry' class because it will work on 
            both 32bit and 64bit systems and uses native Win32 API code for faster execution. 
            However the only data types supported at this time are "REG_SZ", "REG_DWORD", and "REG_QWORD" 
            </remarks>
        </member>
        <member name="T:Okuma.Scout.Reg.RegistryWOW6432">
            <summary>
            Functions which enable RegistryGetSubKeyNames() and RegistryGetLocalMachineValue() 
            to abstract away Operating System bitness. Operates on HKEY_LOCAL_MACHINE only.
            </summary>
        </member>
        <member name="M:Okuma.Scout.Reg.RegistryWOW6432.GetRegKey64(System.String,System.String)">
            <summary>
            Returns the DATA value for a given VALUE and KEY from the Windows registry.
            Applications on 64-bit Windows will execute on 64-bit registry view (ignored by 32-bit Windows) </summary>
            <param name="inKeyName"> Key name where desired VALUE exists </param>
            <param name="inValueName"> The VALUE to retrieve DATA from </param>
            <returns> type string </returns>
        </member>
        <member name="M:Okuma.Scout.Reg.RegistryWOW6432.GetRegKey32(System.String,System.String)">
            <summary>
            Returns the DATA value for a given VALUE and KEY from the Windows registry.
            Applications on 64-bit Windows will execute on 32-bit registry view (ignored by 32-bit Windows) </summary>
            <param name="inKeyName"> Key name where desired VALUE exists </param>
            <param name="inValueName"> The VALUE to retrieve DATA from </param>
            <returns> type string </returns>
        </member>
        <member name="M:Okuma.Scout.Reg.RegistryWOW6432.GetSubKeys64(System.String)">
            <summary>
            Returns a list of sub-keys for a specified key.
            Applications on 64-bit Windows will execute on 64-bit registry view (ignored by 32-bit Windows) </summary>
            <param name="inKeyName"> string key name </param>
            <returns> List of type string </returns>
        </member>
        <member name="M:Okuma.Scout.Reg.RegistryWOW6432.GetSubKeys32(System.String)">
            <summary>
            Returns a list of sub-keys for a specified key.
            Applications on 64-bit Windows will execute on 32-bit registry view (ignored by 32-bit Windows) </summary>
            <param name="inKeyName"> string key name </param>
            <returns> List of type string </returns>
        </member>
        <member name="M:Okuma.Scout.Reg.RegistryWOW6432.FullErrorReport(System.String,System.Int32,System.String)">
            <summary>Return a nice error string. 
            For example: "Error in RegistryWOW6432.GetSubKeys(), [0x005 : Access is denied.] @HKLM//example key." </summary>
            <param name="MethodName"> For example, "RegistryWOW6432.GetSubKeys()" </param>
            <param name="lResult"> Windows System Error Code as integer (ex. 5) </param>
            <param name="Arguments"> optional string (ex. "@" + inKeyName) </param>
            <returns> type string </returns>
        </member>
        <member name="T:Okuma.Scout.SpecCode">
            <summary>
            
            Provides access to Machine Spec Codes
            
            </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.FileNotFoundErrorMessage">
            <summary> Error message returned when a file is not found </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.FileReadErrorMessage">
            <summary> Error message returned when a file is not found </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.PLC1_DMC_FirstHalf">
            <summary>Retrieve the first half of PLC Spec Code No.1 from Data Management Card </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.PLC1_DMC_SecondHalf">
            <summary>Retrieve the second half of PLC Spec Code No.1 from Data Management Card </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.PLC2_DMC_FirstHalf">
            <summary>Retrieve the first half of PLC Spec Code No.2 from Data Management Card </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.PLC2_DMC_SecondHalf">
            <summary>Retrieve the second half of PLC Spec Code No.2 from Data Management Card </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NC1_DMC_FirstHalf">
            <summary>Retrieve the first half of NC Spec Code No.1 from Data Management Card </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NC1_DMC_SecondHalf">
            <summary>Retrieve the second half of NC Spec Code No.1 from Data Management Card </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NCB1_DMC_FirstHalf">
            <summary>Retrieve the first half of NC B-Spec Code No.1 from Data Management Card </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NCB1_DMC_SecondHalf">
            <summary>Retrieve the second half of NC B-Spec Code No.1 from Data Management Card </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.Match_PLC1_FirstHalf">
            <summary>Determine if the NC Spec Code Data File matches the Data Management Card
            for PLC Spec Code '1A'</summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.Match_PLC1_SecondHalf">
            <summary>Determine if the NC Spec Code Data File matches the Data Management Card
            for PLC Spec Code '1B'</summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.Match_PLC2_FirstHalf">
            <summary>Determine if the NC Spec Code Data File matches the Data Management Card
            for PLC Spec Code '2A'</summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.Match_PLC2_SecondHalf">
            <summary>Determine if the NC Spec Code Data File matches the Data Management Card
            for PLC Spec Code '2B'</summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.Match_NC1_FirstHalf">
            <summary>Determine if the NC Spec Code Data File matches the Data Management Card
            for NC Spec Code 'A'</summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.Match_NC1_SecondHalf">
            <summary>Determine if the NC Spec Code Data File matches the Data Management Card
            for NC Spec Code 'B'</summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.Match_NCB1_FirstHalf">
            <summary>Determine if the NC Spec Code Data File matches the Data Management Card
            for NC B-Spec Code 'A'</summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.Match_NCB1_SecondHalf">
            <summary>Determine if the NC Spec Code Data File matches the Data Management Card
            for NC B-Spec Code 'B'</summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.ThincApiSpec">
            <summary>
            Checks the "Custom API" / "CAPI" NC Spec Code from NC data file </summary>
            <returns>True if the spec code is turned on, else false</returns>
            <remarks>This function will not return any error information. If the spec code
            file is not found, for example, and in all other cases where execution does
            not complete normally, it will return false.</remarks>
        </member>
        <member name="P:Okuma.Scout.SpecCode.P300Spec">
            <summary>
            -MACHINING CENTER ONLY- 
            Checks the "P300" NC Spec Code from NC data file </summary>
            <returns>True if the spec code is turned on, else false</returns>
            <remarks>This function will not return any error information. If the spec code
            file is not found, for example, and in all other cases where execution does
            not complete normally, it will return false.</remarks>
        </member>
        <member name="P:Okuma.Scout.SpecCode.TurnCutSpec">
            <summary>
            -MACHINING CENTER ONLY- 
            Checks the "L. Turning cut" / "LAMC" NC Spec Code from NC data file </summary>
            <returns>True if the spec code is turned on, else false</returns>
            <remarks>This function will not return any error information. If the spec code
            file is not found, for example, and in all other cases where execution does
            not complete normally, it will return false.</remarks>
        </member>
        <member name="P:Okuma.Scout.SpecCode.BaseOpScreenSpec">
            <summary>
            -LAHTE ONLY- 
            Checks the "BASE OP. SCREEN" / "BOPS" NC Spec Code from NC data file </summary>
            <returns>True if the spec code is turned on, else false</returns>
            <remarks>This function will not return any error information. If the spec code
            file is not found, for example, and in all other cases where execution does
            not complete normally, it will return false.</remarks>
        </member>
        <member name="P:Okuma.Scout.SpecCode.EasyOperationPanelSpec">
            <summary>
            -LAHTE ONLY- 
            Checks the "EASY OPERAT PANEL" / "EOPL" NC Spec Code from NC data file </summary>
            <returns>True if the spec code is turned on, else false</returns>
            <remarks>This function will not return any error information. If the spec code
            file is not found, for example, and in all other cases where execution does
            not complete normally, it will return false.</remarks>
        </member>
        <member name="P:Okuma.Scout.SpecCode.MultOperationPanelSpec">
            <summary>
            -LAHTE ONLY- 
            Checks the "MULT OPERAT PANEL" / "MEOP" NC Spec Code from NC data file </summary>
            <returns>True if the spec code is turned on, else false</returns>
            <remarks>This function will not return any error information. If the spec code
            file is not found, for example, and in all other cases where execution does
            not complete normally, it will return false.</remarks>
        </member>
        <member name="P:Okuma.Scout.SpecCode.OspRectrictions">
            <summary>
            Returns type Enums.OSP_Restrictions (NA, NONE, R-spec, or -e spec). </summary>
            <remarks> Will always return NONE for Grinder, and NA for PC and 
            Unknown machine types. (only applicable to L and MC) </remarks> 
        </member>
        <member name="M:Okuma.Scout.SpecCode.TurnCutSpecEnabled">
            <summary>
            P300 Machining Center Only
            </summary>
            <returns></returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.P300SpecEnabled">
            <summary>
            P300 Machining Center Only
            </summary>
            <returns></returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.ThincApiSpecCodeEnabled">
            <summary>
            Checks the "Custom API" NC Spec Code from NC data file </summary>
            <returns>True if the spec code is turned on, else false</returns>
            <remarks>This function will not return any error information. If the spec code
            file is not found, for example, and in all other cases where execution does
            not complete normally, it will return false.</remarks>
        </member>
        <member name="M:Okuma.Scout.SpecCode.AlphaNumericVersionIsGreaterThanOrEqualTo(System.String,System.Int32,System.String)">
            <summary>
            Expects numbers followed by letters and compares them to given values </summary>
            <param name="inputVersion"> string example:"123ABC" </param>
            <param name="compareNumber"> integer to compare </param>
            <param name="compareLetters"> letter to compare </param>
            <returns> true if compare values are greater than or equal to input value, else false. </returns>
            <remarks>
             Should accept numbers followed by letters, numbers only or letters only. 
             WILL NOT HANDLE LETTERS FOLLOWED BY NUMBERS! </remarks>
        </member>
        <member name="M:Okuma.Scout.SpecCode.GetSpecCodeBit(System.String,System.Int32,System.Int32)">
            <summary>
            Get the value of a particular spec code bit </summary>
            <param name="SpecPart"></param>
            <param name="word"> Which Byte; Not to exceed 16 (17-32 is 'B' part)</param>
            <param name="bit"> Which Bit; Not to exceed 7 (8 bits per word, zero based)</param>
            <returns> True if bit is a 1, else false. </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.ReverseString(System.String)">
            <summary>
            Receives string and returns the string with its letters reversed.
            </summary>
        </member>
        <member name="M:Okuma.Scout.SpecCode.GetSpecCodeByteAsHexString(System.String,System.Int32)">
            <summary>
            Retrieve a specific Spec Code Byte / Word </summary>
            <param name="SpecPart"> Which Group </param>
            <param name="word"> Which Byte; Not to exceed 16 (17-32 is 'B' part) </param>
            <returns> Byte as Hexadecimal string </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.CompareFileToDMC(System.String,System.String)">
            <summary>
            Compares two spec code strings using string.Equals() and includes checks for 
            SCOUT error return values for spec code reading errors (returns null in those cases). </summary>
            <param name="fromFile"> Spec code from spec code file (type String) </param>
            <param name="fromDmc"> Spec code from data management card (type String) </param>
            <returns> Nullable Boolean (will return null if cannot find spec codes to compare)</returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.DataHexToString(System.Byte[])">
            <summary>
            Transforms raw bytes into human readable hex</summary>
            <param name="dataHex">The source data</param>
            <returns>A string</returns>
        </member>
        <member name="T:Okuma.Scout.SpecCode.NC">
            <summary> Provides access to NC Spec codes </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.machineName">
            <summary>Name of machine from NC Spec Code file </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.projectNumber">
            <summary>Project Number</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.nc1MG">
            <summary>NC-SPEC CODE No.1</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.nc2MG">
            <summary>NC-SPEC CODE No.2</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.nc3MG">
            <summary>NC-SPEC CODE No.3</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.nc4MG">
            <summary>NC-SPEC CODE No.4</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.nc5MG">
            <summary>NC-SPEC CODE No.5</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.nc6MG">
            <summary>NC-SPEC CODE No.6</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.nc7MG">
            <summary>NC-SPEC CODE No.7</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.nc8MG">
            <summary>NC-SPEC CODE No.8</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.useUserDefinedSpecCodeFile">
            <summary> If true, use the requestedSpecCodeFilePath, otherwise use MachineSpecCodeFilePath</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.machineSpecCodeFilePath">
            <summary> File path to active NC spec code file (generally for machines and simulators only)</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.userDefinedSpecCodeFilePath">
            <summary> File source for user defined spec code file </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.cached_UseUserFile">
            <summary> If this cache does not match useUserDefinedSpecCodeFile,
            That means it was changed and we need to read again instead of using cached values. </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.cached_MachineFileExists">
            <summary> (Cached) Machine Spec Code File exists (has the right name) </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.cached_UserFileExists">
            <summary> (Cached) User Defined Spec Code File exists </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.cached_MachineFileValid">
            <summary> (Cached) Machine Spec Code File is valid (has the right name) </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.cached_UserFileValid">
            <summary> (Cached) User Defined Spec Code File is valid </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NC.cached_UserFilePath">
            <summary> (Cached) File source for user defined spec code file </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NC.UseUserDefinedFile">
            <summary>
            Switch indicating whether to use active 
            machine spec file or a user defined one </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NC.UserDefinedFilePath">
            <summary>
            User defined file path to an NC Spec Code file </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NC.SpecFileIsValid">
            <summary>
            Returns true if the currently selected Spec 
            Code file exits and is the correct file type </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NC.MachineSpecCodeFileExists">
            <summary> Does an active NC Spec Code File exist on this machine? 
            Note: active means the file name and location is 
            accordant with a real machine or simulator </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NC.machineNameFromFile">
            <summary>
            Machine Name from NC Spec Code file</summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NC.projectNumberFromFile">
            <summary>
            Project Number from NC Spec Code file </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NC.GetBaseMachineTypeFromSpecCodeFileName">
            <summary>
            Make a determination about base machine type based on the file name of the spec code file. </summary>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NC.Bit(Okuma.Scout.Enums.NCSpecGroup,System.Int32,System.Int32)">
            <summary>
            Check status of NC Spec Codes by Group, Word, and Bit </summary>
            <param name="groupNo">Typically only 'NC1MG' is used, the rest are available for expansion</param>
            <param name="byteNo">Word "No." (1-32)</param>
            <param name="bitNo">Bit Number (0-7)</param>
            <returns> Boolean status of spec </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NC.Byte(Okuma.Scout.Enums.NCSpecGroup,System.Int32)">
            <summary>
            Return a specific byte from the NC Spec code file </summary>
            <param name="groupNo">Typically only 'NC1MG' is used, the rest are available for expansion</param>
            <param name="byteNo">Word "No." (1-32)</param>
            <returns> Hex string of selected word value </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NC.GroupFirstHalf(Okuma.Scout.Enums.NCSpecGroup)">
            <summary>
            Retrieve first half (16 bytes) of spec code group
            </summary>
            <param name="groupNo">Which group to retrieve</param>
            <returns>String containing hyphen delimited 2 byte data words, else string.empty</returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NC.GroupSecondHalf(Okuma.Scout.Enums.NCSpecGroup)">
            <summary>
            Retrieve second half (16 bytes) of spec code group
            </summary>
            <param name="groupNo">Which group to retrieve</param>
            <returns>String containing hyphen delimited 2 byte data words, else string.empty</returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NC._specCodeFileExists">
            <summary>
            Checks for Existence of spec code file 
            (machine or user depending on UseUserDefinedFile) </summary>
            <returns> boolean true if exists </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NC._specCodeFileValid">
            <summary>
            Read and Check validity of spec code file 
            (machine or user depending on UseUserDefinedFile) </summary>
            <returns> boolean true if valid </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NC.FindMachineNcSpecFile">
            <summary>
            Find NC Spec Code File (path => machineSpecCodeFilePath) </summary>
            <returns> True if found, otherwise false </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NC.ReadAndValidateNcSpec">
            <summary>
            Read and Validate NC Spec Code File </summary>
            <returns> Boolean true if success </returns>
        </member>
        <member name="T:Okuma.Scout.SpecCode.NCB">
            <summary>
            
            Provides access to NC B-Spec codes
            
            </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.machineName">
            <summary>Name of machine from NC Spec Code file </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.projectNumber">
            <summary>Project Number</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.ncb1MG">
            <summary>NC B-SPEC CODE No.1</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.ncb2MG">
            <summary>NC B-SPEC CODE No.2</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.ncb3MG">
            <summary>NC B-SPEC CODE No.3</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.ncb4MG">
            <summary>NC B-SPEC CODE No.4</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.ncb5MG">
            <summary>NC B-SPEC CODE No.5</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.ncb6MG">
            <summary>NC B-SPEC CODE No.6</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.ncb7MG">
            <summary>NC B-SPEC CODE No.7</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.ncb8MG">
            <summary>NC B-SPEC CODE No.8</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.useUserDefinedSpecCodeFile">
            <summary> If true, use the requestedSpecCodeFilePath, otherwise use MachineSpecCodeFilePath</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.machineSpecCodeFilePath">
            <summary> File path to active NC spec code file (generally for machines and simulators only)</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.userDefinedSpecCodeFilePath">
            <summary> File source for user defined spec code file </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.cached_UseUserFile">
            <summary> If this cache does not match useUserDefinedSpecCodeFile,
            That means it was changed and we need to read again instead of using cached values. </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.cached_MachineFileExists">
            <summary> (Cached) Machine Spec Code File exists (has the right name) </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.cached_UserFileExists">
            <summary> (Cached) User Defined Spec Code File exists </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.cached_MachineFileValid">
            <summary> (Cached) Machine Spec Code File is valid (has the right name) </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.cached_UserFileValid">
            <summary> (Cached) User Defined Spec Code File is valid </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.NCB.cached_UserFilePath">
            <summary> (Cached) File source for user defined spec code file </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NCB.UseUserDefinedFile">
            <summary>
            Switch indicating whether to use active 
            machine spec file or a user defined one </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NCB.UserDefinedFilePath">
            <summary>
            User defined file path to an NC B-Spec Code file </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NCB.SpecFileIsValid">
            <summary>
            Returns true if the currently selected Spec 
            Code file exits and is the correct file type </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NCB.MachineSpecCodeFileExists">
            <summary> Does an active NC B-Spec Code File exist on this machine? 
            Note: active means the file name and location is 
            accordant with a real machine or simulator </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NCB.machineNameFromFile">
            <summary>
            Machine Name from NC B-Spec Code file </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.NCB.projectNumberFromFile">
            <summary>
            Project Number from NC Spec Code file </summary>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NCB.Bit(Okuma.Scout.Enums.NCBSpecGroup,System.Int32,System.Int32)">
            <summary>
            Check status of NC B-Spec Codes by Group, Word, and Bit </summary>
            <param name="groupNo"> Typically only 'NCB1MG' is used, the rest are available for expansion </param>
            <param name="byteNo"> Word "No." (1-32) </param>
            <param name="bitNo"> Bit Number (0-7) </param>
            <returns> Boolean status of spec </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NCB.Byte(Okuma.Scout.Enums.NCBSpecGroup,System.Int32)">
            <summary>
            Return a specific byte from the B-Spec code file </summary>
            <param name="groupNo"> Typically only 'NCB1MG' is used, the rest are available for expansion </param>
            <param name="byteNo"> Word "No." (1-32) </param>
            <returns> Hex string of selected word value </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NCB.GroupFirstHalf(Okuma.Scout.Enums.NCBSpecGroup)">
            <summary>
            Retrieve first half (16 bytes) of spec code group </summary>
            <param name="groupNo"> Which group to retrieve </param>
            <returns> String containing hyphen delimited 2 byte data words, else string.empty </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NCB.GroupSecondHalf(Okuma.Scout.Enums.NCBSpecGroup)">
            <summary>
            Retrieve second half (16 bytes) of spec code group </summary>
            <param name="groupNo"> Which group to retrieve </param>
            <returns> String containing hyphen delimited 2 byte data words, else string.empty </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NCB._specCodeFileExists">
            <summary>
            Checks for Existence of spec code file 
            (machine or user depending on UseUserDefinedFile) </summary>
            <returns> boolean true if exists </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NCB._specCodeFileValid">
            <summary>
            Read and Check validity of spec code file 
            (machine or user depending on UseUserDefinedFile) </summary>
            <returns> boolean true if valid </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NCB.FindMachineNcbSpecFile">
            <summary>
            Returns the file path to the NCB Spec Code file </summary>
            <returns> True if found, else false </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.NCB.ReadAndValidateNcbSpec">
            <summary>
            Read and Validate NC B-Spec Code File </summary>
            <returns> Boolean true if success </returns>
        </member>
        <member name="T:Okuma.Scout.SpecCode.PLC">
            <summary> 
            
            Provides access to PLC Spec codes 
            
            </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.PLC.plc1MG">
            <summary>NC B-SPEC CODE No.1</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.PLC.plc2MG">
            <summary>NC B-SPEC CODE No.2</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.PLC.plc3MG">
            <summary>NC B-SPEC CODE No.3</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.PLC.useUserDefinedSpecCodeFile">
            <summary> If true, use the requestedSpecCodeFilePath, otherwise use MachineSpecCodeFilePath</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.PLC.machineSpecCodeFilePath">
            <summary> File path to active NC spec code file (generally for machines and simulators only)</summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.PLC.userDefinedSpecCodeFilePath">
            <summary> File source for user defined spec code file </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.PLC.cached_UseUserFile">
            <summary> If this cache does not match useUserDefinedSpecCodeFile,
            That means it was changed and we need to read again instead of using cached values. </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.PLC.cached_MachineFileExists">
            <summary> (Cached) Machine Spec Code File exists (has the right name) </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.PLC.cached_UserFileExists">
            <summary> (Cached) User Defined Spec Code File exists </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.PLC.cached_MachineFileValid">
            <summary> (Cached) Machine Spec Code File is valid (has the right name) </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.PLC.cached_UserFileValid">
            <summary> (Cached) User Defined Spec Code File is valid </summary>
        </member>
        <member name="F:Okuma.Scout.SpecCode.PLC.cached_UserFilePath">
            <summary> (Cached) File source for user defined spec code file </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.PLC.UseUserDefinedFile">
            <summary>
            Switch indicating whether to use active 
            machine spec file or a user defined one </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.PLC.UserDefinedFilePath">
            <summary>
            User defined file path to an PLC Spec Code file </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.PLC.SpecFileIsValid">
            <summary>
            Returns true if the currently selected Spec 
            Code file exits and is the correct file type </summary>
        </member>
        <member name="P:Okuma.Scout.SpecCode.PLC.MachineSpecCodeFileExists">
            <summary> Does an active PLC Spec Code File exist on this machine? 
            Note: active means the file name and location is 
            accordant with a real machine or simulator </summary>
        </member>
        <member name="M:Okuma.Scout.SpecCode.PLC.Bit(Okuma.Scout.Enums.PLCSpecGroup,System.Int32,System.Int32)">
            <summary>
            Check status of PLC Spec Codes by Group, Word, and Bit </summary>
            <param name="groupNo"> Typically only 'PLC1MG' is used, the rest are available for expansion </param>
            <param name="byteNo"> Word "No." (1-32) </param>
            <param name="bitNo"> Bit Number (0-7) </param>
            <returns> Boolean status of spec </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.PLC.Byte(Okuma.Scout.Enums.PLCSpecGroup,System.Int32)">
            <summary>
            Return a specific byte from the PLC Spec code file </summary>
            <param name="groupNo">Typically only 'PLC1MG' is used, the rest are available for expansion</param>
            <param name="byteNo">Word "No." (1-32)</param>
            <returns> Hex string of selected word value </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.PLC.GroupFirstHalf(Okuma.Scout.Enums.PLCSpecGroup)">
            <summary>
            Retrieve first half (16 bytes) of spec code group
            </summary>
            <param name="groupNo">Which group to retrieve</param>
            <returns>String containing hyphen delimited 2 byte data words, else string.empty</returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.PLC.GroupSecondHalf(Okuma.Scout.Enums.PLCSpecGroup)">
            <summary>
            Retrieve second half (16 bytes) of spec code group
            </summary>
            <param name="groupNo">Which group to retrieve</param>
            <returns>String containing hyphen delimited 2 byte data words, else string.empty</returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.PLC._specCodeFileExists">
            <summary>
            Checks for Existence of spec code file 
            (machine or user depending on UseUserDefinedFile) </summary>
            <returns> boolean true if exists </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.PLC._specCodeFileValid">
            <summary>
            Read and Check validity of spec code file 
            (machine or user depending on UseUserDefinedFile) </summary>
            <returns> boolean true if valid </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.PLC.FindMachinePlcSpecFile">
            <summary>
            Find PLC Spec Code File (path => machineSpecCodeFilePath) </summary>
            <returns> True if found, otherwise false </returns>
        </member>
        <member name="M:Okuma.Scout.SpecCode.PLC.ReadAndValidatePlcSpec">
            <summary>
            Read and Validate PLC Spec Code File </summary>
            <returns> Boolean true if success </returns>
        </member>
        <member name="T:Okuma.Scout.ThincApi">
            <summary>
            
            Provides information about the THINC API on the current system 
            
            </summary>
        </member>
        <member name="F:Okuma.Scout.ThincApi.thincApiVersion">
            <summary>Object to store Version information of THINC API files and installed version </summary>
            <remarks> Storing here and checking for null prevents unnecessarily running code to check every time.</remarks>
        </member>
        <member name="F:Okuma.Scout.ThincApi.customApiVersion">
            <summary>Object to store Version information of CUSTOM API files and CAPI version </summary>
            <remarks> Storing here and checking for null prevents unnecessarily running code to check every time.</remarks>
        </member>
        <member name="F:Okuma.Scout.ThincApi._apiCrossReferenceDictionary">
            <summary>
            Storage location for information retrieved from ApiVersionCrossRef.xml </summary>
        </member>
        <member name="M:Okuma.Scout.ThincApi.#cctor">
            <summary> 
            Initializes static members of the <see cref="T:Okuma.Scout.ThincApi" /> class.
            Retrieves in formation on class load. </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.InstallVersion">
            <summary>
            Gets Install Version THINC API </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.CAPIVersion">
            <summary>
            Gets the OSP Custom API Version</summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.InstallType">
            <summary>
            Gets type string: "Basic", "Development", or "N/A" </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.Installed">
            <summary>
            Gets a value indicating whether THINC API files exist in the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.ApiAvailable">
            <summary>
            Gets is the ApiNotifier Status "Ready"?
            <para> Attempt to determine if the API is ready to be initialized based on ApiNotifier status
            registry entry. </para></summary>
            <remarks> If the current version of API doesn't support this, use the old method
            of just attempting to the initialize the API. </remarks>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACExist_DataApi_Lathe">
            <summary>
            Gets a value indicating whether Okuma.CLDATAPI exists in the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACAssemblies_DataApi_Lathe">
            <summary>
            Gets a list of AssemblyName objects from the Global Assembly Cache 
            for libraries matching the alias Okuma.CLDATAPI </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACExist_CommandApi_Lathe">
            <summary>
            Gets a value indicating whether Okuma.CLCMDAPI exists in the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACAssemblies_CommandApi_Lathe">
            <summary>
            Gets a list of AssemblyName objects from the Global Assembly Cache 
            for libraries matching the alias Okuma.CLCMDAPI </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACExist_DataApi_MachiningCenter">
            <summary>
            Gets a value indicating whether Okuma.CMDATAPI exists in the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACAssemblies_DataApi_MachiningCenter">
            <summary>
            Gets a list of AssemblyName objects from the Global Assembly Cache 
            for libraries matching the alias Okuma.CMDATAPI </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACExist_CommandApi_MachiningCenter">
            <summary>
            Gets a value indicating whether Okuma.CMCMDAPI exists in the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACAssemblies_CommandApi_MachiningCenter">
            <summary>
            Gets a list of AssemblyName objects from the Global Assembly Cache 
            for libraries matching the alias Okuma.CMCMDAPI </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACExist_DataApi_Grinder">
            <summary>
            Gets a value indicating whether Okuma.CGDATAPI exists in the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACAssemblies_DataApi_Grinder">
            <summary>
            Gets a list of AssemblyName objects from the Global Assembly Cache 
            for libraries matching the alias Okuma.CGDATAPI </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACExist_CommandApi_Grinder">
            <summary>
            Gets a value indicating whether Okuma.CGCMDAPI exists in the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACAssemblies_CommandApi_Grinder">
            <summary>
            Gets a list of AssemblyName objects from the Global Assembly Cache 
            for libraries matching the alias Okuma.CGCMDAPI </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACExist_FlexNet">
            <summary>
            Gets a value indicating whether Okuma.FlexNet OR Okuma.FlexNet.Net4 exists in the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.GACAssemblies_FlexNet">
            <summary>
            Gets a list of AssemblyName objects from the Global Assembly Cache 
            for libraries matching the alias Okuma.FlexNet OR Okuma.FlexNet.Net4 </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.DataApiVersionInGAC_Lathe">
            <summary>
            Gets string version of THINC Lathe Data API file from the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.DataApiVersionInGAC_MachiningCenter">
            <summary>
            Gets string version of THINC Machining Center Data API file from the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.DataApiVersionInGAC_Grinder">
            <summary>
            Gets string version of THINC Grinder Data API file from the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.CommandApiVersionInGAC_Lathe">
            <summary>
            Gets string version of THINC Lathe Command API file from the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.CommandApiVersionInGAC_MachiningCenter">
            <summary>
            Gets string version of THINC Machining Center Command API file from the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.CommandApiVersionInGAC_Grinder">
            <summary>
            Gets string version of THINC Grinder Command API file from the Global Assembly Cache </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.FlexNetVersionInGAC">
            <summary>
            Gets string version of FlexNet Library from the Global Assembly Cache </summary>
        </member>
        <member name="M:Okuma.Scout.ThincApi.DoesMachineSupportThincApiVersion(System.Version)">
            <summary>
            Determine if the current platform will support the execution of THINC API commands of a given THINC API version </summary>
            <remarks> This test is based on the versions of THINC API library files present in the system, and doesn't rely 
            on a result of ApiVersionCheckResult.VersionRecognized from DetermineThincAPIVersion(). 
            This means compatibility can still be determined, even for systems which have new versions of 
            THINC API unknown to SCOUT or development versions of API. </remarks>
            <param name="v"> type Version, typically the required THINC API version for an application to run. </param>
            <returns> type boolean </returns>
        </member>
        <member name="M:Okuma.Scout.ThincApi.P_ThincApiInstalled">
            <summary>
            Checks existence of THINC API files in GAC to determine if API is installed
                (API files could still exist in the OSP directory although API is not installed...) </summary>
            <returns>type Boolean </returns>
        </member>
        <member name="M:Okuma.Scout.ThincApi.ThincApiInstallType">
            <summary>
            Detects if the THINC-API "Development" Version is installed by looking for 
            THINC API files in the `THINC API\Bin` folder.</summary>
            <returns> Boolean: If false, but API files exist in the GAC, assume "Basic" install</returns>
        </member>
        <member name="M:Okuma.Scout.ThincApi.DetermineThincAPIVersion">
            <summary>
            Determines the THINC API install version by comparing API DLL 
            versions to known versions for install packages. </summary>
            <returns>string: Returns the API install version or else "Unknown:" 
            followed by the versions of CMD and DATA API libraries respectively. </returns>
        </member>
        <member name="M:Okuma.Scout.ThincApi.DetermineCAPIVersion">
            <summary>
            Determines the Custom API version by comparing Machine API 
            Library files to known versions. </summary>
            <returns>string: Returns the CAPI package version or else "Unknown:" 
            followed by the versions of CMD and DATA API assemblies respectively. </returns>
        </member>
        <member name="M:Okuma.Scout.ThincApi.GetThincApiVersionData">
            <summary>
            Creates a set of THINC API file versions (if they exist)
            </summary>
            <returns>type object "VersionInformation"</returns>
        </member>
        <member name="M:Okuma.Scout.ThincApi.GetCustomApiVersionData">
            <summary>
            Creates a set of CUSTOM API file versions based on the machine type.
            Returns a null object if the files or machine type doesn't exist. </summary>
            <returns> Type object "VersionInformation" </returns>
        </member>
        <member name="M:Okuma.Scout.ThincApi.BuildApiCrossReference">
            <summary>
            Read 'ApiVersionCrossRef.xml' and populate the API Cross Reference Dictionary. </summary>
            <remarks>This method may be called several times but should only execute once,
            based on the dictionary item count. 
            If the base machine type is other than M, L, or G, than the nothing will be added
            to the cross reference dictionary.</remarks>
        </member>
        <member name="M:Okuma.Scout.ThincApi.P_ApiReady">
            <summary>
            Attempt to determine if the API is ready to be initialized based on ApiNotifier status
            registry entry. If the current version of API doesn't support this, use the old method
            of just attempting to the initialize the API.
            </summary>
            <returns>Type Enums.ApiStatus</returns>
        </member>
        <member name="M:Okuma.Scout.ThincApi.RegistryGetLocalMachineValue(System.String,System.String,System.String@)">
            <summary>
            Get the value of a registry key </summary>
            <param name="subKey">Name of the key to retrieve</param>
            <param name="value">The value that will be retrieved</param>
            <param name="result">Contents of Value</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="T:Okuma.Scout.ThincApi.ApiCrossReferenceItem">
            <summary>
            This class is used to store the various assembly versions used 
            for comparison to the current system </summary>
        </member>
        <member name="F:Okuma.Scout.ThincApi.ApiCrossReferenceItem.apitype">
            <summary> Reference Item API Type </summary>
        </member>
        <member name="F:Okuma.Scout.ThincApi.ApiCrossReferenceItem.commandapi">
            <summary> private field for the command API </summary>
        </member>
        <member name="F:Okuma.Scout.ThincApi.ApiCrossReferenceItem.dataapi">
            <summary> private field for the DATA API </summary>
        </member>
        <member name="F:Okuma.Scout.ThincApi.ApiCrossReferenceItem.notifierservice">
            <summary> private field for the Notifier service </summary>
        </member>
        <member name="M:Okuma.Scout.ThincApi.ApiCrossReferenceItem.#ctor(Okuma.Scout.Enums.ApiType,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Okuma.Scout.ThincApi.ApiCrossReferenceItem" /> class.
            </summary>
            <param name="type"> Type of API being itemized (Enums.ApiType) </param>
            <param name="CMD"> the command library</param>
            <param name="DATA"> the DATA library</param>
            <param name="notifier"> the Notifier service executable</param>
        </member>
        <member name="P:Okuma.Scout.ThincApi.ApiCrossReferenceItem.Type">
            <summary> Gets the type of reference item </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.ApiCrossReferenceItem.Cmd">
            <summary> Gets the command version </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.ApiCrossReferenceItem.Data">
            <summary> Gets the DATA version </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApi.ApiCrossReferenceItem.Notifier">
            <summary> Gets the Notifier version </summary>
        </member>
        <member name="T:Okuma.Scout.VersionInformation">
            <summary>
            This class is used to format and report the results of checking THINC API and CUSTOM API versions.
            In case of CUSTOM API, 'ApiNotifierVersion' is unused. </summary>
        </member>
        <member name="F:Okuma.Scout.VersionInformation.result">
            <summary>Return value for Version Information.Result </summary>
        </member>
        <member name="F:Okuma.Scout.VersionInformation.apiversion">
            <summary>When found, the install version of THINC API </summary>
        </member>
        <member name="F:Okuma.Scout.VersionInformation.capiversion">
            <summary>When found, the installed version of CUSTOM API </summary>
        </member>
        <member name="F:Okuma.Scout.VersionInformation.commandapiversion">
            <summary>If found, the version of command API </summary>
        </member>
        <member name="F:Okuma.Scout.VersionInformation.dataapiversion">
            <summary>If found, the version of DATA API </summary>
        </member>
        <member name="F:Okuma.Scout.VersionInformation.apinotifierversion">
            <summary>If found, the version of API Notifier </summary>
        </member>
        <member name="P:Okuma.Scout.VersionInformation.Result">
            <summary> Gets the result of attempt to identify the THINC API Version. 
            Type 'Enums.ApiVersionCheckResult' </summary>
        </member>
        <member name="P:Okuma.Scout.VersionInformation.ApiVersion">
            <summary> Gets the THINC API Install Version.
            Null until successful check is performed. 
            Either perform null check before retrieving or check the 'Result' field first. </summary>
        </member>
        <member name="P:Okuma.Scout.VersionInformation.CustomApiVersion">
            <summary> Gets the CUSTOM API Version.
            Null until successful check is performed. 
            Either perform null check before retrieving or check the 'Result' field first. </summary>
        </member>
        <member name="P:Okuma.Scout.VersionInformation.CommandApiVersion">
            <summary>
            Gets the version of Command API file (as string), otherwise "N/A" </summary>
        </member>
        <member name="P:Okuma.Scout.VersionInformation.DataApiVersion">
            <summary>
            Gets the version of Data API file (as string), otherwise "N/A" </summary>
        </member>
        <member name="P:Okuma.Scout.VersionInformation.ApiNotifierVersion">
            <summary>
            Gets the version of the APINotifierService executable (as string), otherwise "N/A" </summary>
        </member>
        <member name="T:Okuma.Scout.ThincApiReflector">
            <summary>
            
            Provides the ability to call THINC API functions without a direct reference to the libraries
            
            </summary>
        </member>
        <member name="F:Okuma.Scout.ThincApiReflector.apiInitHasBeenAttempted">
            <summary> Has API Initialization been attempted? </summary>
        </member>
        <member name="F:Okuma.Scout.ThincApiReflector.apiInitTimeOut">
            <summary> Used to make sure API INIT is not executed more than once every 5 seconds</summary>
        </member>
        <member name="P:Okuma.Scout.ThincApiReflector.DataApiAssembly">
            <summary> THINC Data API Assembly </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApiReflector.DataApiAssemblyTypes">
            <summary> Type Names in the Data API </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApiReflector.TypeDataCMachine">
            <summary> Gets Type information for DataApi.CMachine </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApiReflector.TypeDataCVariables">
            <summary> Gets Type information for DataAPI.CVariables </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApiReflector.TypeDataCSpec">
            <summary> Gets Type information for DataAPI.CVariables </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApiReflector.CommandApiAssembly">
            <summary> THINC Command API Assembly </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApiReflector.CommandApiAssemblyTypes">
            <summary> Type Names in the Data API </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApiReflector.TypeCommandCProgram">
            <summary> Gets Type information for CommandApi.CProgram </summary>
        </member>
        <member name="P:Okuma.Scout.ThincApiReflector.TypeCommandCMachine">
            <summary> Gets Type information for CommandApi.CMachine </summary>
            <remarks> As of THINC API 1.20.0.0 (July 2017) 
            Grinder API does not contain the CMachine class. </remarks> 
        </member>
        <member name="P:Okuma.Scout.ThincApiReflector.TypeCommandCATC">
            <summary> Gets Type information for CommandApi.CATC </summary>
        </member>
        <member name="M:Okuma.Scout.ThincApiReflector.InitAPI">
            <summary> Instantiate THINC-API using reflection </summary>
            <returns> Type Enums.ApiStatus </returns>
        </member>
        <member name="M:Okuma.Scout.ThincApiReflector.MachineName">
            <summary>
            Get Machine Name using the API through reflection </summary>
            <returns>string: the machine name, or string EMPTY if unable to determine. </returns>
        </member>
        <member name="M:Okuma.Scout.ThincApiReflector.SerialNumber">
            <summary>
            Get Machine Serial Number using the API through reflection </summary>
            <returns>string: the serial number, or string EMPTY if unable to determine. </returns>
        </member>
        <member name="M:Okuma.Scout.ThincApiReflector.GetCommonVariable(System.Int32)">
            <summary>
            Retrieves the specified common variable value using the API through reflection. </summary>
            <param name="readCV"> [in] type integer, the CV number to read (0 is NOT ALLOWED). </param>
            <returns> type double: the value of the common variable or -1 on fail </returns>
        </member>
        <member name="T:Okuma.Scout.ThisSystemInfo">
            <summary>
            Structure to keep machine compatibility information for comparison with system
            <para>NOTE: This object is not used by <c>Okuma.Scout.dll</c> </para> </summary>
            <remarks>For comparison with app requirements by SCOUT.EXE</remarks>
        </member>
        <member name="P:Okuma.Scout.ThisSystemInfo.OS">
            <summary>Gets or sets Operating system </summary>
            <value>XP-32,XP-32_SP1,XP-32_SP2,XP-32_SP3,XP-64,XP-64_SP1,XP-64_SP2,W7-32,W7-32_SP1,W7-64,W7-64_SP1,W8-32,W8-64</value>
        </member>
        <member name="P:Okuma.Scout.ThisSystemInfo.API">
            <summary>Gets or sets API version detected on this machine </summary>
            <value>(Unknown API Version. CMD: ...),1.6.4.0,1.8.0.0,1.9.1.0,1.10.0.0,1.11.0.0,1.11.1.0,1.12.0.0,1.12.1.0,1.15.0.0,1.16.0.0,1.17.1.0,1.17.2.0</value>
        </member>
        <member name="P:Okuma.Scout.ThisSystemInfo.DotNet">
            <summary>Gets or sets List of all versions of .NET installed on this system </summary>
            <value>10,11,20,30,35,40C,40F,45,451,452</value>
        </member>
        <member name="P:Okuma.Scout.ThisSystemInfo.Control">
            <summary>Gets or sets the control type of this machine (if it's a machine) </summary>
            <value>string.Empty(if not machine),P100,P100II,P200,P200A,P300,P300S</value>
        </member>
        <member name="P:Okuma.Scout.ThisSystemInfo.MachineType">
            <summary>Gets or sets the Machine Type of this system </summary>
            <value>PC,L,NCM_L,PCNCM_L,M,NCM_M,PCNCM_M,G,NCM_G,PCNCM_G</value>
        </member>
        <member name="P:Okuma.Scout.ThisSystemInfo.LicenseFeatures">
            <summary>Gets or sets all valid optional THINC API license features on this machine </summary>
            <value>CurrentAlarm,ToolID,M_TaskIOVar,L_TaskIOVar,M_UserAlarm,L_UserAlarm</value>
        </member>
        <member name="P:Okuma.Scout.ThisSystemInfo.StartupService">
            <summary>Version of THINC Startup Service (TSS)</summary>
            <value>3.2.1.0,4.4.0.0</value>
        </member>
        <member name="T:Okuma.Scout.Vars">
            <summary>
            
            This class contains commonly referenced constants related to Okuma OSP Controls 
            
            </summary>
        </member>
        <member name="F:Okuma.Scout.Vars.OSP_Dir">
            <summary> C:\OSP-P\ </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.CNS_Dir">
            <summary> [DIRECTORIES] Gets C:\OSP-P\CNS-DAT\ </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.HMI_Dir">
            <summary> [DIRECTORIES] Gets C:\OSP-P\HMI\ </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.SHAREDDLL_Dir">
            <summary> [DIRECTORIES] Gets C:\OSP-P\SHAREDDLL\ </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.CRAD_Dir">
            <summary> [DIRECTORIES] Gets C:\OSP-P\VOLANTE\CRAD\ </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.OkumaDir">
            <summary> [DIRECTORIES] Gets D:\Program Files\Okuma\ </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.LicenseDir">
            <summary> [DIRECTORIES] Gets D:\Program Files\Okuma\Licenses\ </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.ThincApiBinDir">
            <summary> [DIRECTORIES] Gets D:\Program Files\Okuma\THINC API\Bin\ </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.L_Data_API">
            <summary> [FILES] Gets string literal "LDATAPI.DLL" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.L_CMD_API">
            <summary> [FILES] Gets string literal "LCMDAPI.EXE" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.MC_Data_API">
            <summary> [FILES] Gets string literal "MDATAPI.DLL" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.MC_CMD_API">
            <summary> [FILES] Gets string literal "MCMDAPI.EXE" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.G_Data_API">
            <summary> [FILES] Gets string literal "GDATAPI.DLL" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.G_CMD_API">
            <summary> [FILES] Gets string literal "GCMDAPI.EXE" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.SoftSwitch">
            <summary> [FILES] Gets string literal "SOFTSWITCH.EXE" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.P300LS_API">
            <summary> [FILES] Gets string literal "LTMIM_API.DLL" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.P300M_API">
            <summary> [FILES] Gets string literal "MTMIM_API.DLL" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.API_License">
            <summary> [FILES] Gets string literal "okuma.api.lic" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.CLCMDAPI">
            <summary> [FILES] Gets string literal "Okuma.CLCMDAPI.dll" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.CLDATAPI">
            <summary> [FILES] Gets string literal "Okuma.CLDATAPI.dll" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.CMCMDAPI">
            <summary> [FILES] Gets string literal "Okuma.CMCMDAPI.dll" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.CMDATAPI">
            <summary> [FILES] Gets string literal "Okuma.CMDATAPI.dll" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.CGCMDAPI">
            <summary> [FILES] Gets string literal "Okuma.CGCMDAPI.dll" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.CGDATAPI">
            <summary> [FILES] Gets string literal "Okuma.CGDATAPI.dll" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.PLCSpecWild">
            <summary> [FILES] Gets string literal "PLCUB11-*.CNS" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.NCSpecWild">
            <summary> [FILES] Gets string literal "*NCSPEC-*.DAT" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.NCBSpecWild">
            <summary> [FILES] Gets string literal "*NCBSPC-*.DAT" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.DataManagementCard">
            <summary> [FILES] Gets string literal "OSPMNGCD.CNC" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.EbiFry">
            <summary> [FILES] Gets string literal "EBISTART.EXE" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.ApiNotifier">
            <summary> [FILES] Gets string literal "APINotifierService.exe" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.FlexNet">
            <summary> [FILES] Gets string literal "Okuma.FlexNet.dll" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.FlexNet4">
            <summary> [FILES] Gets string literal "Okuma.FlexNet.Net4.dll" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.PiodLib">
            <summary> [FILES] Gets string literal "PIODLIB.dll" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.P300A_OspGesture">
            <summary> [FILES] Gets string literal "OSP-GESTURE.dll" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.P300A_OspTouch">
            <summary> [FILES] Gets string literal "OSP-TOUCH-LIB.dll" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.DMC_NCSpecCode1">
            <summary> [DMC VALUES] Gets string literal "[ NC-SPEC CODE No.1 ]" </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.AssemblyName_DataApi">
            <summary>
            "Okuma.CLDATAPI", "Okuma.CMDATAPI", "Okuma.CGDATAPI",
            or string.Empty depending on machine type. </summary>
        </member>
        <member name="P:Okuma.Scout.Vars.AssemblyName_CmdApi">
            <summary>
            "Okuma.CLCMDAPI", "Okuma.CMCMDAPI", "Okuma.CGCMDAPI",
            or string.Empty depending on machine type. </summary>
        </member>
    </members>
</doc>
