<?xml version="1.0"?>
<doc>
<assembly>
<name>
Okuma.CGDATAPI
</name>
</assembly>
<members>
<member name="T:Okuma.CGDATAPI.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Okuma.CGDATAPI.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Okuma.CGDATAPI.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.MacMan.CAlarm">
 -----------------------------------------------------------------------------
 <summary>
 Class provides Alarm information related to MacMan Alarm History
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CAlarm.Date">
 <summary>
 Date of alarm
 </summary>
 <returns>A System.String value that represents date of alarm in the format: yyyy/MM/dd
 For example: 2016/12/30</returns>
 <Figure> MacMan HMI - ALARM HISTORY - DATE
 <para> 
 <img src="../media/MacMan-AlarmHistory.jpg"/>
 </para>
 </Figure>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CAlarm.Time">
 <summary>
 Time of alarm
 </summary>
 <returns>A System.String value that represents time of alarm in the 24 hours format: HH:mm:ss
 For example: 23:59:59</returns>
 <Figure> MacMan HMI - ALARM HISTORY - TIME
 <para> 
 <img src="../media/MacMan-AlarmHistory.jpg"/>
 </para>
 </Figure>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CAlarm.Message">
 <summary>
 Alarm message
 </summary>
 <returns>A System.String value that represents an message of alarm</returns>
 <Figure> MacMan HMI - ALARM HISTORY - ALARM STRINGS
 <para> 
 <img src="../media/MacMan-AlarmHistory.jpg"/>
 </para>
 </Figure>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CAlarm.Number">
 <summary>
 Alarm number
 </summary>
 <returns>A System.String value that represents alarm number</returns>
 <Figure> MacMan HMI - ALARM HISTORY - ALARM NO.: 2263-03 - 2263 is alarm number
 <para> 
 <img src="../media/MacMan-AlarmHistory.jpg"/>
 </para>
 </Figure>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CAlarm.Code">
 <summary>
 Alarm code
 </summary>
 <returns>A System.String value that represents alarm code</returns>
 <Figure> MacMan HMI - ALARM HISTORY - ALARM CODE
 <para> 
 <img src="../media/MacMan-AlarmHistory.jpg"/>
 </para>
 </Figure>        
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CAlarm.Object">
 <summary>
 Alarm object
 </summary>
 <returns>A System.Integer value that represents alarm object</returns>
 <Figure> MacMan HMI - ALARM HISTORY - ALARM NO.: 2263-03 - 03 is alarm object
 <para> 
 <img src="../media/MacMan-AlarmHistory.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.MacMan.CAlarmHistory">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functions to obtain Alarm information related to MacMan Alarm History
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.CAlarmHistory.#ctor">
 <summary>
 Create an instance of this class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.CAlarmHistory.GetMaxCount">
 <summary>
 Gets the maximum number of alarm histories that can be stored by the system.
 </summary>
 <example> This example shows how to sets GetMaxCount method
 <code lang="VB.NET">
	Dim objAlarmHistory As New MacMan.CAlarmHistory	
	Dim intValue As Integer	
	intValue= objAlarmHistory.GetMaxCount()	
 </code></example>
 <returns>A System.Int32 value that represents the maximum number of Alarm History</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.CAlarmHistory.GetCount">
 <summary>
 Gets the number of records contained in the Alarm History
 </summary>
 <example> This example shows how to sets GetCount method
 <code lang="VB.NET">
 Dim objAlarmHistory As New MacMan.CAlarmHistory	
	Dim intValue As Integer	
	intValue= objAlarmHistory.GetCount()	
 </code></example>
 <returns>A System.Int32 value that represents the number of records contained in the Alarm History</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.CAlarmHistory.GetAlarms(System.Int32,System.Int32)">
 <summary>
 Gets alarm history information at the specified alarm indexes
 </summary>
 <example> This sample code shows how to use the GetAlarms() method.
 <code lang="VB.NET">
 Dim m_objAlarmHistory As New CAlarmHistory
 Dim intFromAlarmIndex As Integer = 1 
 Dim intToAlarmIndex As Integer
 Dim objAlarms As ArrayList 
 intToAlarmIndex = m_objAlarmHistory.GetCount()
 objAlarm = m_objAlarmHistory.GetAlarms(intFromAlarmIndex, intToAlarmIndex ) 
 </code></example>
 <param name="intFromAlarmIndex">From starting index.  The 1-based index at which the information is obtained</param>
 <param name="intToAlarmIndex">To ending index.  The 1-based index at which the information is obtained</param>
 <returns>An array list of CAlarm object that represents the Alarm history data if there is one available.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> ALARM HISTORY - List of all alarms in history in the descending order of date
 <para>
 <img src="../media/MacMan-AlarmHistory.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.CAlarmHistory.GetAlarm(System.Int32)">
 <summary>
 Gets alarm history information at the specified alarm index
 </summary>
 <example> This sample code shows how to use the GetAlarm() method.
 <code lang="VB.NET">
 Dim intAlarmIndex As Integer = 1 
 Dim objAlarm As CAlarm 
 objAlarm = m_objAlarmHistory.GetAlarm(intAlarmIndex) 
 </code></example>
 <param name="intAlarmIndex">Starting index.  The 1-based index at which the information is obtained</param>
 <returns>An Okuma.CGDATAPI.DataAPI.MacMan.CAlarm object that represents the Alarm history data if there is one available.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> ALARM HISTORY - List of all alarms in history in the descending order of date
 <para>
 <img src="../media/MacMan-AlarmHistory.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.MacMan.CMachining">
 -----------------------------------------------------------------------------
 <summary>
 Class provides Machining Report information related to MacMan Machining Report
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CMachining.NumberOfWork">
 <summary>
 Gets processing track record - Number of work. 
 Sets processing track record - Number of work for this class instance only
 </summary>
 <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006
 <para> NO. OF WORK</para>
 <img src="../media/MacMan-MachiningReport.jpg"/>
 </Figure>        
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CMachining.RunningTime">
 <summary>
 Gets processing track record - Running time. 
 Sets processing track record - Running Time for this class instance only. Data unit is second.
 </summary>
 <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006
 <para> RUNNING</para>
 <img src="../media/MacMan-MachiningReport.jpg"/>
 </Figure> 
 <DataUnit>
	Seconds
 </DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CMachining.CuttingTime">
 <summary>
 Gets processing track record - Cutting time. 
 Sets processing track record - Cutting Time for this class instance only. Data unit is second. 
 </summary>
 <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006
 <para> CUTTING</para>
 <img src="../media/MacMan-MachiningReport.jpg"/>
 </Figure> 
 <DataUnit>
	Seconds
 </DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CMachining.OperatingTime">
 <summary>
 Gets processing track record - Operating time. 
 Sets processing track record - Operating Time for this class instance only.
 </summary>
 <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006
 <para> OPERATING</para>
 <img src="../media/MacMan-MachiningReport.jpg"/>
 </Figure> 
 <DataUnit>
	Seconds
 </DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CMachining.MainProgramFileName">
 <summary>
 Gets processing track record - Main program file name.
 Sets processing track record - Main program file name for this class instance only. 
 </summary>
 <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006
 <para> MAIN FROGRAM</para>
 <img src="../media/MacMan-MachiningReport.jpg"/>
 </Figure> 
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CMachining.MainProgramName">
 <summary>
 Gets processing track record - Main program name. 
 Sets processing track record - Main program name for this class instance only. 
 </summary>
 <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006
 <para> PROG NAME</para>
 <img src="../media/MacMan-MachiningReport.jpg"/>
 </Figure> 
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CMachining.StartDate">
 <summary>
 Gets processing track record - Start Date. 
 Sets processing track record - Start Date for this class instance only. Data is in "yyyy/MM/dd" format. 
 </summary>
 <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006
 <para> START DAY</para>
 <img src="../media/MacMan-MachiningReport.jpg"/>
 </Figure> 
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.CMachining.StartTime">
 <summary>
 Gets processing track record - Start Time. 
 Sets processing track record - Start Time for this class instance only. Data is in "HH:mm:ss" format. 
 </summary>
 <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006
 <para> START TIME</para>
 <img src="../media/MacMan-MachiningReport.jpg"/>
 </Figure> 
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.MacMan.CMachiningReport">
 -----------------------------------------------------------------------------
 <summary>
 Class provides function to obtain Machining Report information related to MacMan Machining Report
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.CMachiningReport.GetMaxCount(Okuma.CGDATAPI.Enumerations.ReportPeriodEnum)">
 <summary>
 Gets the maximum number of Machining Report that can be stored by the system.
 </summary>
 <example>This example shows how to call GetMaxCount method.
 <code lang="VB.NET">
 Dim objMachiningReport As New MacMan.CMachiningReport 
 Dim enReportPeriod As ReportPeriodEnum = ReportPeriodEnum.TodayReport
 Dim intCount As Integer	
 intCount = objMachiningReport.GetMaxCount(enReportPeriod)	
 </code></example>
 <param name="enReportPeriod">Type of report to be retrieved.  Values of parameter come from Okuma.CGDATAPI.Enumerations.ReportPeriodEnum enumeration.</param>
 <returns>A System.Int32 value that represents the max number of machining report records available</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.CMachiningReport.GetCount(Okuma.CGDATAPI.Enumerations.ReportPeriodEnum)">
 <summary>
 Gets the number of records contained in the Machining Report given report index
 </summary>
 <example>This example shows how to call GetCount method.
 <code lang="VB.NET">
 Dim objMachiningReport As New MacMan.CMachiningReport 
 Dim enReportPeriod As ReportPeriodEnum = ReportPeriodEnum.TodayReport
 Dim intCount As Integer	
 intCount = objMachiningReport.GetCount(enReportPeriod)	
 </code></example>
 <param name="enReportPeriod">Type of report to be retrieved.  Values of parameter come from Okuma.CGDATAPI.Enumerations.ReportPeriodEnum enumeration.</param>
 <returns>A System.Int32 value that represents the number of records contained in the Machining Report</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.CMachiningReport.GetMachiningReport(System.Int32,Okuma.CGDATAPI.Enumerations.ReportPeriodEnum)">
 <summary>
 Gets the Machining report data at the specified report index, and report period type
 </summary>
 <example>This example shows how to call GetMachiningReport method.
 <code lang="VB.NET">
 Dim objMachiningReport As New MacMan.CMachiningReport 
 Dim objMachining As MacMan.CMachining	
 Dim enReportPeriod As ReportPeriodEnum = ReportPeriodEnum.TodayReport
 Dim intIndex As Integer = 1
 objMachining = objMachiningReport.GetMachiningReport(intIndex, enReportPeriod)	
 </code></example>
 <param name="intIndex">Machining report index. It is 1-based index.</param>
 <param name="enReportPeriod">Type of report to be retrieved.  Values of parameter come from Okuma.CGDATAPI.Enumerations.ReportPeriodEnum enumeration.</param>
 <returns>An Okuma.CGDATAPI.DataAPI.CMachining object that represents the Machining report data at the specified report index, and report period type</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006
 <para>
 <img src="../media/MacMan-MachiningReport.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.CMachiningReport.GetMachiningReports(System.Int32,System.Int32,Okuma.CGDATAPI.Enumerations.ReportPeriodEnum)">
 <summary>
 Gets the Machining report data at the specified report indexes, and report period type
 </summary>
 <example>This example shows how to call GetMachiningReport method.
 <code lang="VB.NET">
 Dim objMachiningReport As New MacMan.CMachiningReport 
 Dim objMachiningList As ArrayList
 Dim enReportPeriod As ReportPeriodEnum = ReportPeriodEnum.TodayReport
 Dim intFromIndex As Integer = 1
 Dim intToIndex As Integer = 10
 objMachiningList = objMachiningReport.GetMachiningReport(intFromIndex, intToIndex, enReportPeriod)	
 </code></example>
 <param name="intFromIndex">Machining report index. It is 1-based index and must be equal 1 or smaller than or equal to ToIndex </param>
 <param name="intToIndex">Machining report index. It is 1-based index and must be equal 1 or greater than or equal to intFromIndex </param>
 <param name="enReportPeriod">Type of report to be retrieved.  Values of parameter come from Okuma.CGDATAPI.Enumerations.ReportPeriodEnum enumeration.</param>
 <returns>An System.Collections.ArrarList object that represents the Machining report data at the specified report indexes, and report period type</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006
 <para>
 <img src="../media/MacMan-MachiningReport.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.MacMan.COperatingHistory">
 -----------------------------------------------------------------------------
 <summary>
 Class provides function to obtain Operating History information related to MacMan Operating History report
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperatingHistory.#ctor">
 <summary>
 Create an instance of this class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperatingHistory.GetTodayOperatingHistory(System.Int32,System.Int32,Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum)">
 <summary>
 Gets today operating history at the specified report data, and report indexes
 </summary>
 <example> This example shows how to call GetTodayOperatingHistory method
 <code lang="VB.NET">
 Dim objOperatingHistory As New COperatingHistory
 Dim intValues As Integer()
 Dim intFromIndex  As Integer = 1  
 Dim intToIndex As Integer 
 Dim enReportDabta As OperatingReportDataEnum 
 intToIndex = ojOperatingHistory.GetMaxCount()
 intValue = objOperatingHistory.GetTodayOperatingHistory(intFromIndex, intToIndex, enReportPeriod) 
 </code></example>
 <param name="intFromIndex">Starting operating history index.  The 1-based index at which the report information is obtained</param>
 <param name="intToIndex">Ending operating history index.  The 1-based index at which the report information is obtained</param>
 <param name="enReportData">Operating history data to be retrieved</param>
 <returns>A zero-based array of System.Int32 values that represents the today operating history at the specified report data, and report indexes.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 If a request for a total of 144 operating histories, then each value in the array is equivalent to the time period as shown in the table below.  
 A value of 1 indicates that operating state is ON otherwise it is OFF.
 <list type="table">
 <listheader>
 <term>Index</term>
 <description>Time slot (hh:mm) </description>
 </listheader>
 <item>
 <term>0</term>
 <description>00:00</description>
 </item>
 <item>
 <term>1</term>
 <description>00:10</description>
 </item>
 <item>
 <term>2</term>
 <description>00:20</description>
 </item>
 <item>
 <term>...</term>
 <description>...</description>
 </item>
 <item>
 <term>...</term>
 <description>...</description>
 </item>
 <item>
 <term>142</term>
 <description>23:40</description>
 </item>
 <item>
 <term>143</term>
 <description>23:50</description>
 </item>
 </list>
 </remarks>
 <Figure> OPERATING HIS - DAILY(TODAY):2006/10/25 
 <para>
 <img src="../media/MacMan.OperatingHistory.TodayReport.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperatingHistory.GetPreviousOperatingHistory(System.Int32,System.Int32,Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum)">
 <summary>
 Gets previous day operating history at the specified report data, and report indexes
 </summary>
 <example> This example shows how to call GetPreviousOperatingHistory method
 <code lang="VB.NET">
 Dim objOperatingHistory As New COperatingHistory
 Dim intValues As Integer()
 Dim intFromIndex  As Integer = 1  
 Dim intToIndex As Integer 
 Dim enReportData As OperatingReportDataEnum 
 intToIndex = objOperatingHistory.GetMaxCount() 
 intValue = objOperatingHistory.GetPreviousOperatingHistory(intFromIndex, intToIndex, enReportPeriod) 
 </code></example>
 <param name="intFromIndex">Starting operating history index.  The 1-based index at which the report information is obtained</param>
 <param name="intToIndex">Ending operating history index.  The 1-based index at which the report information is obtained</param>
 <param name="enReportData">Operating history data to be retrieved</param>
 <returns>A zero-based array of System.Int32 values that represents the previous day operating history at the specified report data, and report indexes.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 If a request for a total of 144 operating histories, then each value in the array is equivalent to the time period as shown in the table below.  
 A value of 1 indicates that the state of this requested report data is ON otherwise it is OFF.
 <list type="table">
 <listheader>
 <term>Index</term>
 <description>Time slot (hh:mm) </description>
 </listheader>
 <item>
 <term>0</term>
 <description>00:00</description>
 </item>
 <item>
 <term>1</term>
 <description>00:10</description>
 </item>
 <item>
 <term>2</term>
 <description>00:20</description>
 </item>
 <item>
 <term>...</term>
 <description>...</description>
 </item>
 <item>
 <term>...</term>
 <description>...</description>
 </item>
 <item>
 <term>142</term>
 <description>23:40</description>
 </item>
 <item>
 <term>143</term>
 <description>23:50</description>
 </item>
 </list>
 </remarks>
 <Figure> OPERATING HIS - DAILY(PREV):2006/10/25 
 <para>
 <img src="../media/MacMan.OperatingHistory.PreviousReport.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperatingHistory.GetMaxCount">
 <summary>
 Gets the maximum number of Operating History that can be stored by the system.
 </summary>
 <example> This example shows how to sets GetMaxCount method
 <code lang="VB.NET">
	Dim objOperatingHistory As New MacMan.COperatingHistory	
	Dim intValue As Integer
	intValue= objOperatingHistory.GetMaxCount()	
 </code></example>
 <returns>A System.Int32 value that represents the maximum number of Operating History report</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.MacMan.COperatingReport">
 -----------------------------------------------------------------------------
 <summary>
 Class provides function to obtain Operating Report information related to MacMan Operating Report
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperatingReport.#ctor">
 <summary>
 Create an instance of this class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperatingReport.GetMaxCount">
 <summary>
 Gets the maximum number of Operating report that can be stored by the system
 </summary>
 <example> This example shows how to sets GetMaxCount method
 <code lang="VB.NET">
	Dim objOperatingReport As New MacMan.COperatingReport	
	Dim intValue As Integer
	intValue= objOperatingReport.GetMaxCount()	
 </code></example>
 <returns>A System.Int32 value that represents the maximum number of Operating report that can be stored by the system.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperatingReport.GetTodayOperatingReport(Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum)">
 <summary>
 Gets the Today operating report at the specified report data
 </summary>
 <example> This example shows how to call GetTodayOperatingReport method
 <code lang="VB.NET">
	Dim objOperatingReport As New MacMan.COperatingReport 
	Dim intValue As Int64 
	Dim enOperatingReport As OperatingReportEnum = OperatingReportEnum.AlarmTimeOn 
	intValue = objOperatingReport.GetTodayOperatingReport(enOperatingReport)	
 </code></example>
 <param name="enOperatingReportEnum">Report data to be retrieved. Values for this parameter come from the OperatingReportDataEnum enumeration. </param>
 <returns>A System.Int64 value that represents the Today operating report at the specified report data.</returns>
 <DataUnit>seconds</DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> OPERATING REP:DAILY(TODAY)
 <para>
 <img src="../media/MacMan-OperatingReport.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperatingReport.GetPreviousOperatingReport(Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum)">
 <summary>
 Gets the previoud day operating report at the specified report data
 </summary>
 <example> This example shows how to call GetPreviousOperatingReport method
 <code lang="VB.NET">
	Dim objOperatingReport As New MacMan.COperatingReport 
	Dim intValue As Int64 
	Dim enOperatingReport As OperatingReportEnum = OperatingReportEnum.AlarmTimeOn 
	intValue = objOperatingReport.GetPreviousOperatingReport(enOperatingReport)	
 </code></example>
 <param name="enOperatingReportEnum">Report data to be retrieved. Values for this parameter come from the OperatingReportDataEnum enumeration. </param>
 <returns>A System.Int64 value that represents the previoud day operating report at the specified report data</returns>
 <DataUnit>seconds</DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> OPERATING REP:DAILY(PRE)
 <para>
 <img src="../media/MacMan-OperatingReport.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperatingReport.GetPeriodOperatingReport(Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum)">
 <summary>
 Gets the period operating report at the specified report data
 </summary>
 <example> This example shows how to call GetPeriodOperatingReport method
 <code lang="VB.NET">
	Dim objOperatingReport As New MacMan.COperatingReport 
	Dim intValue As Int64 
	Dim enOperatingReport As OperatingReportEnum = OperatingReportEnum.AlarmTimeOn 
	intValue = objOperatingReport.GetPeriodOperatingReport(enOperatingReport)	
 </code></example>
 <param name="enOperatingReportEnum">Report data to be retrieved. Values for this parameter come from the OperatingReportDataEnum enumeration. </param>
 <returns>A System.Int64 value that represents the period operating report at the specified report data.</returns>
 <DataUnit>seconds</DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> OPERATING REP:PERIOD
 <para>
 <img src="../media/MacMan-OperatingReport.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperatingReport.GetTodayOperatingReportDate">
 <summary>
 Gets the today operating report date
 </summary>
 <example> This example shows how to sets GetTodayOperatingReportDate method
 <code lang="VB.NET">
	Dim objOperatingReport As New MacMan.COperatingReport	
	Dim strValue As String = ""	
	strValue = objOperatingReport.GetTodayOperatingReportDate()	
 </code></example>
 <returns>A System.String value that represents the Today operating report at the specified report data in this format: yyyy/mm/dd.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> OPERATING REP:DAILY(TODAY)
 <para>
 <img src="../media/MacMan-OperatingReport.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperatingReport.GetPreviousOperatingReportDate">
 <summary>
 Gets the previous day operating report date
 </summary>
 <example> This example shows how to sets GetPreviousOperatingReportDate method
 <code lang="VB.NET">
	Dim objOperatingReport As New MacMan.COperatingReport	
	Dim strValue As String = ""	
	strValue = objOperatingReport.GetPreviousOperatingReportDate()	
 </code></example>
 <returns>A System.String value that represents the previous day operating report date in this format: yyyy/mm/dd</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> OPERATING REP:DAILY(PRE)
 <para>
 <img src="../media/MacMan-OperatingReport.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperatingReport.GetPeriodOperatingReportDate">
 <summary>
 Gets the Period operating report date
 </summary>
 <example> This example shows how to sets GetPeriodOperatingReportDate method
 <code lang="VB.NET">
	Dim objOperatingReport As New MacMan.COperatingReport	
	Dim strValue As String = ""	
	strValue = objOperatingReport.GetPeriodOperatingReportDate()	
 </code></example>
 <returns>A System.String value that represents the Period operating report date in this format: yyyy/mm/dd</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> OPERATING REP:PERIOD
 <para>
 <img src="../media/MacMan-OperatingReport.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.MacMan.COperation">
 -----------------------------------------------------------------------------
 <summary>
 Class provides Operation information related to MacMan Operation History
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.COperation.Data">
 <summary>
 Gets/Sets data property of Operation history instance
 </summary>
 <returns>
 A System.String value containg operation history data
 </returns>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.COperation.Date">
 <summary>
 Gets/Sets Date property of Operation history instance
 </summary>
 <returns>
 A System.String value containg operation history Date
 </returns>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.MacMan.COperation.Time">
 <summary>
 Gets/Sets Time property of Operation history instance
 </summary>
 <returns>
 A System.String value containg operation history Time
 </returns>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.MacMan.COperationHistory">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functios to obtain Operation information related to MacMan Operation History
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperationHistory.#ctor">
 <summary>
 Create an instance of this class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperationHistory.GetMaxCount">
 <summary>
 Gets the maximum number of Operation History that can be stored by the system
 </summary>
 <example> This example shows how to sets GetMaxCount method
 <code lang="VB.NET">
	Dim objOperationHistory As New MacMan.COperationHistory	
	Dim intValue As Integer	
	intValue= objOperationHistory.GetMaxCount()	
 </code></example>
 <returns>A System.Int32 value that represents the maximum number of Operation History that can be stored by the system.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperationHistory.GetCount">
 <summary>
 Gets the number of records contained in the Operation History
 </summary>
 <example> This example shows how to sets GetCount method
 <code lang="VB.NET">
	Dim objOperationHistory As New MacMan.COperationHistory
	Dim intValue As Integer	
	intValue= objOperationHistory.GetCount()	
 </code></example>
 <returns>A System.Int32 value that represents the number of records contained in the Operation History.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperationHistory.GetOperationHistory(System.Int32)">
 <summary>
 Gets the Operation history data at the specified index
 </summary>
 <example> This example shows how to call GetOperationHistory method
 <code lang="VB.NET">
	Dim objOperationHistory As New MacMan.COperationHistory 
	Dim objOperation As MacMan.COperation()	
	Dim intIndex As Int32	
	objOperation = objOperationHistory.GetOperationHistory(intIndex)	
 </code></example>
 <param name="intIndex">Operation history record index</param>
 <returns>An Okuma.CGDATAPI.DataAPI.COperationCOperation object that represents the Operation history data at the specified index.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> OPERATION HISTORY: OPERATE PANEL
 <para>
 <img src="../media/MacMan-OperationHistory.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.MacMan.COperationHistory.GetOperationHistory(System.Int32,System.Int32)">
 <summary>
 Gets the Operation history data at the specified indexes
 </summary>
 <example> This example shows how to call GetOperationHistory method
 <code lang="VB.NET">
	Dim intStartingIndex As Int32
	Dim intEndingIndex As Int32	
	Dim objOperationHistory As New MacMan.COperationHistory 
	Dim arOperations As ArrayList
	objOperations = objOperationHistory.GetOperationHistory(intStartingIndex, intEndingIndex)
 </code></example>
 <param name="intFromIndex">Starting index of operation history record. It is 1-based at which the information obtained</param>
 <param name="intToIndex">Ending index of operation history record. It is 1-based at which the information obtained</param>
 <returns>A System.Collection.ArrayList object that represents the Operation history data at the specified indexes.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> OPERATION HISTORY: OPERATE PANEL
 <para>
 <img src="../media/MacMan-OperationHistory.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CAxis">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functions to obtain machine axes data 
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAxis.#ctor">
 <summary>
 Create an instance of this class.  
 </summary>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAxis.GetCurrentAxisCoordinate">
 <summary>
 Gets current axis coordinate system
 </summary>
 <example>This example shows how to call GetCurrentAxisCoordinate.
 <code lang="VB.NET">
 Dim objAxis As CAxis = New CAxis	
 Dim enValue As AxisCoordinateEnum 	
 enValue= objAxis.GetCurrentAxisCoordinate()	
 </code></example>
 <returns>An AxisCoordinateEnum value that represents the current selected axis coordinate</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - ACT POS(2/2) - WHEEL COORD./WORK COORD. 
 <para>
 <img src="../media/P300.Grinder.WheelPositions.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAxis.GetActualFeedrate(Okuma.CGDATAPI.Enumerations.AxisIndexEnum)">
 <summary>
 Gets actual feedrate given axis index 
 </summary>
 <example>This example shows how to call GetActualFeedrate.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum = AxisIndexEnum.X_Axis	
 Dim dblValue As Double 	
 dblValue= objAxis.GetActualFeedrate(enAxisIndex)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum enumeration.</param>
 <returns>A System.Double that represents the actual feedrate</returns>
 <DataUnit>
 <para>For linear axes: Default unit is in mm/min.  Other unit can be set by calling SetDataUnit method. </para>
 <para>For rotary axes: Default unit is in degree/min</para>
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - X/Y/B/C ... FEEDRATE
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActualPosition.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAxis.GetCommandFeedrate">
 <summary>
 Gets command feedrate. The path feedrate value can be feedrate per rev or per min.  
 The GetFeedrateType function can be used to determine the feedrate type
 </summary>
 <example>This example shows how to call GetCommandFeedrate.
 <code lang="VB.NET">	
 Dim strValue As String = "" 	
 Dim dblValue As Double 	
 Dim enFeedrateType As FeedrateTypeEnum
 dblValue= objAxis.GetCommandFeedrate()	
 enFeedrateType = objAxis.GetFeedrateType()	
 if ( enFeedrateType = 	FeedrateTypeEnum.PerRevolution ) then
     strValue = String.Format("Fr = {0}", dblValue) 
 Else 
     strValue = String.Format("Fm = {0}", dblValue) 
 End If
 </code></example>
 <returns>A System.Double that represents the command path feedrate</returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method. It can be in rev or min. 
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - Fm - Actual feedrate per minute/ Fr - Actual feedrate per revolution
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActualPosition.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAxis.GetActualFeedrate">
 <summary>
 Gets actual path feedrate  The path feedrate value can be feedrate per rev or per min.  
 The GetFeedrateType function can be used to determine the feedrate type
 </summary>
 <example>This example shows how to call GetActualFeedrate.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum 	
 Dim strValue As String = "" 	
 Dim dblValue As Double 	
 Dim enFeedrateType As FeedrateTypeEnum
 dblValue= objAxis.GetActualFeedrate()	
 enFeedrateType = objAxis.GetFeedrateType()	
 if ( enFeedrateType = 	FeedrateTypeEnum.PerRevolution ) then
     strValue = String.Format("Fr = {0}", dblValue) 
 Else 
     strValue = String.Format("Fm = {0}", dblValue) 
 End If
 </code></example>
 <returns>A System.Double that represents the actual path feedrate</returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method. It can be in rev or min. 
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - Fm - Actual feedrate per minute/ Fr - Actual feedrate per revolution
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActualPosition.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAxis.GetFeedrateType">
 <summary>
 Gets current feedrate type
 </summary>
 <example>This example shows how to call GetFeedrateType.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum 
 Dim strValue As String = "" 	
 Dim dblValue As Double 	
 Dim enFeedrateType As FeedrateTypeEnum
 dblValue= objAxis.GetActualFeedrate()	
 enFeedrateType = objAxis.GetFeedrateType()	
 if ( enFeedrateType = 	FeedrateTypeEnum.PerRevolution ) then 
 	     strValue = String.Format("Fr = {0}", dblValue) 
 	Else 
 	     strValue = String.Format("Fm = {0}", dblValue) 
 End If
 </code></example>
 <returns>A System.Double that represents the actual path feedrate</returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method. It can be in rev or min.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - Fm - Actual feedrate per minute/ Fr - Actual feedrate per revolution
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActualPosition.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAxis.GetFeedrateOverride">
 <summary>
 Gets path feedrate override
 </summary>
 <example>This example shows how to call GetFeedrateOverride.
 <code lang="VB.NET">
 Dim objAxis As CAxis = New CAxis	
 Dim intValue As Integer 	
 intValue= objAxis.GetFeedrateOverride()	
 </code></example>
 <returns>A System.Integer that represents the percentage of feedrate override</returns>
 <DataUnit>
	Percentage
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - ACT POS (1/2) - FEED AXIS OVERRIDE
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActPos2.2.CycleSelect.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAxis.GetActualPositionProgramCoord(Okuma.CGDATAPI.Enumerations.AxisIndexEnum)">
 <summary>
 Gets actual position in program coordinate given axis index    
 </summary>
 <example>This example shows how to call GetActualPositionProgramCoord.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum 	
 Dim dblValue As Double 	
 dblValue= objAxis.GetActualPositionProgramCoord(enAxisIndex)
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum enumeration.</param>
 <returns>A System.Double that represents the actual position in program coordinate system</returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - ACT POSIT
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActualPosition.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAxis.GetActualPositionMachineCoord(Okuma.CGDATAPI.Enumerations.AxisIndexEnum)">
 <summary>
 Gets actual position in machine coordinate given axis index    
 </summary>
 <example>This example shows how to call GetActualPositionMachineCoord.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum 	
 Dim dblValue As Double 	
 dblValue= objAxis.GetActualPositionMachineCoord(enAxisIndex)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum enumeration.</param>
 <returns>A System.Double that represents the actual position in machine coordinate system</returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - MACHINE
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActualPosition.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAxis.GetAxisLoad(Okuma.CGDATAPI.Enumerations.AxisIndexEnum)">
 <summary>
 Gets axis load given axis index
 </summary>
 <example>This example shows how to call GetAxisLoad.
 <code lang="VB.NET">
 Dim objAxis As CAxis = New CAxis	
 Dim enAxisIndex As AxisIndexEnum 	
 Dim dblValue As Double 	
 dblValue= objAxis.GetAxisLoad(enAxisIndex)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum enumeration.</param>
 <returns>A System.Double that represents the percentage of axis load</returns>
 <DataUnit>
	Percentage
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - LOAD ON/OFF - X/Z/B
 <para>
 <img src="../media/P300.Grinder.Auto.ActualPosition.Load.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAxis.GetActualPositionWheelCoord(Okuma.CGDATAPI.Enumerations.WheelAxisIndexEnum)">
 <summary>
 Gets actual position in wheel coordinate given axis index    
 </summary>
 <example>This example shows how to call GetActualPositionWheelCoord.
 <code lang="VB.NET">
 Dim enAxisIndex As WheelAxisIndexEnum 	
 Dim dblValue As Double 	
 Dim objWheel As New CAxis
 dblValue= objAxis.GetActualPositionWheelCoord(enAxisIndex)
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the WheelAxisIndexEnum enumeration.</param>
 <returns>A System.Double that represents the actual position in wheel coordinate system</returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - ACT POS(2/2) - WHEEL COORD. - ACT POSIT U/W
 <para>
 <img src="../media/P300.Grinder.WheelPositions.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAxis.SetDataUnit(Okuma.CGDATAPI.Enumerations.DataUnitEnum)">
 <summary>Sets current data unit for this class instance.</summary>
 <example> This example shows how to call the SetDataUnit method.
 <code lang="VB.NET">
 Dim objAxis As New CAxis
 objAxis.SetDataUnit(DataUnitEnum.Unit_Inch)
 </code></example>
 <param name="enValue">Data Unit to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 If applicable, this setting is applied to data in this class instance only, not for NC Data Unit.
 For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, 
 then offset value will be converted to inch from NC offset data and vice versa.
 </remarks>
 <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. 
 <para>
 <img src="../media/P300.Grinder.Paramters.DataUnit.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CAPISpecException">
 <summary>
 A derived class of ApplicationException to be used specifically when initializing API
 </summary>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CAPISpecException.#ctor(System.String)">
 <summary>
 Create an instance of this class given an error message 
 </summary>
 <param name="strErrorMessage">error message</param>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CBase">
 <summary>
 It is a base class for all classes of Data API. 
 All classes in DATA-API will be derived from this class to handle error handling, 
 logging service, and other services for internal data structure of this library ONLY. 
 For a list of all members of this type, see CBase Members.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.DataAPI.CBase.m_strFeatureName">
 ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.#ctor(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Create an instance of CBase class given class ID and class name.
 </summary>
 <param name="strClassId">Derived class ID</param>
 <param name="strClassName">Derived class name.</param>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.#ctor(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Create an instance of this class.
 In addition to library name, the provided logging name will be used for logging all function calls 
 </summary>
 <param name="strClassId">Derived class ID</param>
 <param name="strClassName">Derived class name.</param>
 <param name="strLoggingName">Logging Name.  Globally, The logging name will be combined with library name as the logging name for all logging message.</param>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.SetLoggingLevelToGet">
 <summary>
 Set logging level LoggingLevelEnum.logGet
 <para>The system will not log operations having logging level above this setting level.</para>
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.SetLoggingLevelToAll">
 <summary>
 Set logging level to LoggingLevelEnum.logAll for this instance
 <para>The system will not log operations having logging level above this setting level.</para>
 </summary>
 <remarks>
 Note: It is highly recommended for debugging purpose only
 Note2: All exceptions and writing operations to NC will be logged automatically
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.SetLoggingLevelToSet">
 <summary>
 Set logging level to LoggingLevelEnum.logSet for this instance
 <para>The system will not log operations having logging level above this setting level.</para>
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.GetLoggingLevel">
 <summary>
 Get current logging level for this instance
 </summary>
 <returns>An enumeration of LoggingLevelEnum</returns>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.SetMicronOption(System.Boolean)">
 <summary>
 Set default number of decimal numbers for linear and rotary axes in metric or inch unit
 </summary>
 <param name="blnValue">True if 0.1 micron option is active</param>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.MicronToMM(System.Int32)">
 <summary>
 Perform the conversion of an integer value to a decimal value based on m_intMetricConversionUnit
 </summary>
 <param name="intValue">value to be converted from integer to decimal number</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.MMToMicron(System.Double)">
 <summary>
 Perform the conversion of a decimal value to an integer value based on m_intMetricConversionUnit
 </summary>
 <param name="dblValue"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.GetControlType">
 -----------------------------------------------------------------------------
 <summary>
 Get control type of this machine
 </summary>
 <returns>An enumeration of ControlTypeEnum</returns>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.ThrowAE(System.String,System.String)">

 <summary>For internal usage only</summary>
<example> This example shows how to call the ThrowAE mothod.
<code escaped="true" language="Visual Basic">
 Sample code is not available.
</code>
</example>
<param name="strMessage">Message String.</param>
<param name="strError">Error String</param>
<Figure>
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.ThrowNE(System.String,System.String)">
 <summary>For internal usage only</summary>
<example> This example shows how to call the ThrowNE mothod.
<code escaped="true" language="Visual Basic">
 Sample code is not available.
</code>
</example>
<param name="strMessage">Message String.</param>
<param name="strError">Error String</param>
<Figure>
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.ThrowSpecE(System.String,System.String)">
 <summary>For internal usage only.  This function will throw a custom exception derived from ApplicaitonException when initializing API is failed due to spec is not enabled</summary>
<param name="strMessage">Message String.</param>
<param name="strError">Error String</param>
<Figure>
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.AllExceptionHandler(System.String,System.String@,System.Exception@)">
 <summary>For internal usage only. Log and throw exception back to calling app</summary>
<example> This example shows how to call the AllExceptionHandler mothod.
<code escaped="true" language="Visual Basic">
 Sample code is not available.
</code>
</example>
<param name="strFunctionName">Function Name.</param>
<param name="strParameters">Parameter String.</param>
<param name="objEx">Object Exception</param>
<exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
<exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system</exception>
<Figure>
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.LogExceptionMessage(System.String,System.String@,System.String@)">
 <summary>Log exception message</summary>
<example> This example shows how to call the LogExceptionMessage mothod.
<code escaped="true" language="Visual Basic">
 Not available in object browser
</code>
</example>
<param name="strFunctionName">Function Name.</param>
<param name="strParameters">Parameter String.</param>
<param name="strError">Error String.</param>
<exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
<exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system</exception>
<Figure>
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.LogMessage(System.String,System.String@,Okuma.CGDATAPI.Enumerations.LoggingLevelEnum)">
 <summary>Log function name, function parameters.  This library name and name of instance of class derived from this base class is also logged.</summary>
<example> This example shows how to call the LogMessage mothod.
<code escaped="true" language="Visual Basic">
 Sample code is not available.
</code>
</example>
<param name="strFunctionName">Function Name.</param>
<param name="strParameters">Parameter String.</param>
<param name="enLoggingLevel">Log Type. Values for this parameter come from the Okuma.CGCMDAPI.CommandAPI.LoggingService.LoggingLevelEnum.</param>
<exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
<exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system</exception>
<Figure>
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.LogMessage(System.String,System.String,System.String@,Okuma.CGDATAPI.Enumerations.LoggingLevelEnum,System.Boolean)">
 <summary>If no error then Log message with function name, function parameter given the logging level. </summary>
<param name="strFunctionName">Function Name</param>
<param name="strParameters">Parameters</param>
<param name="strLogMessage">log message</param>
<param name="enLoggingLevel">Login Request Type</param>
<exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation .</exception>
<exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
<Figure> 
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.CheckErrorCode(System.Int16,System.String)">
<summary>For internal usage only. 
 Function will throw an Application exception if the return error code is greater than 0
 Function will throw a NotSupportedException exception if the return error code is less than 0
 </summary>
<param name="nReturnErrorCode">Error code returns from the calling function</param>
<param name="strSource">Source of error such as function name</param>
<exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
<exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system</exception>
<Figure>
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.SetUnit(Okuma.CGDATAPI.Enumerations.DataUnitEnum)">
 <summary>
 Set data unit for this class instance
 </summary>
 <param name="enDataUnit">data unit to be set</param>
 <returns>True if data unit can be set. Otherwise it returns false</returns>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.ConvertUnitToInch(System.Double)">
 <summary>Convert data value in mm unit to inch unit and perform any round off if necessary</summary>
<param name="dblValue">value to be converted</param>
<return>A System.Double value that is converted from mm to inch unit</return>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.ConvertUnitToInch2(System.Double,System.Int32)">
 <summary>Convert data value in mm unit to inch unit and perform any round off if necessary</summary>
<param name="dblValue">value to be converted</param>
<param name="intPrecision">number of precisions that value to be round off from</param>
<return>A System.Double value that is converted from mm to inch unit</return>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.ConvertUnitToMM(System.Double,System.Int32)">
 <summary>Convert data value in inch unit to mm unit and perform any round off if necessary</summary>
<param name="dblValue">Double Value.</param>
<return>A System.Double value that is converted from inch to mm unit</return>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.ConvertUnitToMM2(System.Double,System.Int32,System.Int32)">
 <summary>Convert data value in inch unit to mm unit and perform any round off if necessary</summary>
<param name="dblValue">Double Value.</param>
<param name="intInchPrecision">Inch precision</param>
<param name="intMetricPrecision">Metric precision</param>
<return>A System.Double value that is converted from inch to mm unit</return>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.ConvertMetricToFeet(System.Double)">
 <summary>Convert metric value to feet  value if current NC data unit is inch</summary>
<param name="dblValue">metric value to be converted</param>
<return>A System.Integer value that is converted from inch to mm unit</return>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.ConvertMetricToFeetSet(System.Double)">
 <summary>Convert metric value to feet  value if current NC data unit is inch</summary>
<param name="dblValue">metric value to be converted</param>
<return>A System.Integer value that is converted from inch to mm unit</return>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.ConvertMetricToFeetGet(System.Double)">
 <summary>Convert metric value to feet  value if current NC data unit is inch</summary>
<param name="dblValue">metric value to be converted</param>
<return>A System.Integer value that is converted from inch to mm unit</return>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.ValidateControlType(System.Int32,System.Int32,System.String,Okuma.CGDATAPI.Enumerations.ValidateLevelEnum)">
 <summary>
 Verify if the passing control type is the same current control type
 Verify if the passing control type is the same or higher current control type if blnSameOrHigher flag is true
 Throw exception if it is not
 </summary>
 <param name="intControlType"></param>
 <param name="intFunctionErrorCode"></param>
 <param name="strSource">caller of this function</param>
 <param name="enValidateLevel">validate level to be evaluated</param>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.GetSubSystem(System.Int32)">
 <summary>
 Get OCJ sub system based on SubsystemEnum value
 </summary>
 <param name="enSubSystem"></param>
 <returns>OCJ subsystem value</returns>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.GetDoubleDataValue(System.String@,System.Int32)">
 <summary>
 Return double value if data is numeric value otherwise it returns an overflow value
 Negative overflow value = –2147483648
 Positive overflow value = 2147483647
 </summary>
 <param name="strData">value to be converted</param>
 <returns></returns>
 <remarks>This function will converse data to inch unit if its data unit of this object is for inch</remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.GetDoubleDataValue_2(System.String@)">
 <summary>
 Return double value if data is numeric value otherwise it returns an overflow value
 Negative overflow value = –2147483648
 Positive overflow value = 2147483647
 </summary>
 <param name="strData">value to be converted</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.IsNCMetricSystem">
 <summary>
 Check if NC Data unit is set to metric
 </summary>
 <returns>True if it is metric otherwise it returns false</returns>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.CheckLicense(System.String,System.String,System.String,System.String)">
 <summary>N/A</summary>
<example> This example shows how to call the CheckLicense method.
<code escaped="true" language="Visual Basic">
 Not available in Object Browser.
</code>
</example>
<param name="strFeatureName">License Feature Name</param>
<param name="strFeatureVersion">License Feature Version</param>
<param name="strFeatureLabel">License Feature Label.</param>
<param name="strLicensePath">License Path</param>
<exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
<exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
<Figure>
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.CreateLoggingService">

 <summary>N/A</summary>
<example> This example shows how to call the CreateLoggingService mothod.
<code escaped="true" language="Visual Basic">
 Not available in object browser
</code>
</example>
<exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
<exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system</exception>
<Figure>
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.GetErrorCode(System.Int32)">

 <summary>N/A</summary>
<example> This example shows how to call the GetErrorCode mothod.
<code escaped="true" language="Visual Basic">
 Not available in object browser
</code>
</example>
<param name="intFunctionErrorCodeId">Function Error Code ID</param>
<return>A System.String value</return>
<exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
<exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system</exception>
<Figure>
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.GetErrorNumberFromErrorMessage(System.String)">

 <summary>N/A</summary>
<example> This example shows how to call the GetErrorNumberFromErrorMessage mothod.
<code escaped="true" language="Visual Basic">
 Not available in object browser
</code>
</example>
<param name="strErrorCode">Error Code String.</param>
<return>A System.String value</return>
<exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
<exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system</exception>
<Figure>
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.GetExceptionErrorCode(System.Int32)">

 <summary>N/A</summary>
<example> This example shows how to call the GetExceptionErrorCode mothod.
<code escaped="true" language="Visual Basic">
 Not available in object browser
</code>
</example>
<param name="intErrorCode">Error Code.</param>
<return>A System.String value</return>
<exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
<exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system</exception>
<Figure>
</Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.DetectControlType">
 -----------------------------------------------------------------------------
 <summary>
 Get control type of this machine
 </summary>
 <remarks>
 </remarks>
 <history>
 	[lhuynh]	3/25/2013	Created
 </history>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.ShutDown">
 <summary>
 Close the communication with NC
 </summary>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>Note: Any subsequent calls for NC data will fail after calling this method.</remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.CheckUserErrorCode(System.Int32,System.String)">
 <summary>NA</summary>
 <example> This sample code shows how to use CheckUserErrorCode() method.
 </example>
 <param name="nErrorCode">User Error Code Number</param>
 <param name="strSource">Source String</param>
 <exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
 <Figure>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.CheckControlType">
 <summary>
 Check control type based on DMC file
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CBase.RegisterControlType">
 -----------------------------------------------------------------------------
 <summary>
 Get control type of this machine
 </summary>
 <remarks>
 </remarks>
 <history>
 	[lhuynh]	3/25/2013	Created
 </history>
 -----------------------------------------------------------------------------
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CIO">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functions to obtain PLC I/O data 
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CIO.#ctor">
 <summary>
 Create an instance of this class
 </summary>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CIO.GetBitIO(Okuma.CGDATAPI.Enumerations.IOTypeEnum,System.Int32,Okuma.CGDATAPI.Enumerations.BitsEnum)">
 <summary>Gets I/O bit at the specified address index.
 <para></para>
 </summary>
 <example> This example shows how to call GetBitIO method
 <code lang="VB.NET">
 Dim enValue As OnOffStateEnum
 Dim enIO As IOTypeEnum= IOTypeEnum.Input
 Dim intAddressIndex As Integer = 1
 Dim enBit As BitsEnum = BitsEnum.Bit_0
 enValue= objIO.GetBitIO( enIO,  intAddressIndex,  enBit)	
 </code></example>
 <param name="enIO">
 <para>I/O variable type.  Values of parameter come from Okuma.CGDATAPI.Enumerations.IOTypeEnum enumeration.</para>
 </param>
 <param name="intAddressIndex">
 <para> Logical I/O address index</para>
 <para>Input address is starting from 0 to 511</para>
 <para>Output address is starting from 512 to 1023</para>
 </param>
 <param name="enBit">Bit number.  Values of parameter come from Okuma.CGDATAPI.Enumerations.BitsEnum enumeration.</param>
 <returns>An Okuma.CGDATAPI.Enumerations.OnOffStateEnum enumeration value.  It is ON if Bit is high. Otherwise, it is OFF.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> I/O Monitor application
 <para>
 <img src="../media/IO.Monitor.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CIO.GetWordIO(Okuma.CGDATAPI.Enumerations.IOTypeEnum,System.Int32)">
 <summary>Gets I/O WORD at the specified address index
 </summary>
 <example> This example shows how to call GetWordIO method
 <code lang="VB.NET">
 Dim intValue As Integer
 Dim enIO As IOTypeEnum = IOTypeEnum.Input
 intValue= objIO.GetWordIO(enIO,  intAddressIndex)
 </code></example>
 <param name="enIO">
 <para>I/O variable type.  Values of parameter come from Okuma.CGDATAPI.Enumerations.IOTypeEnum enumeration.</para>
 </param>
 <param name="intAddressIndex">
 <para> Logical I/O address index</para>
 <para>Input address is starting from 0 to 511</para>
 <para>Output address is starting from 512 to 1023</para>
 </param>
 <returns>A System.Int32 value represents decimal value</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 <para>Data value displayed on OSP IO Monitor application can have negative values in DEC column. </para>
 <para>However, HEX column will display actual value. </para>
 <para>For example: </para>
 <para>If Word data of index 17 bit 15 is ON then it will be displayed as -1 in DEC column, </para>
 <para>and FFFF in HEX column. This function will return 65535. </para>
 </remarks>
 <Figure> I/O Monitor application
 <para>
 <img src="../media/IO.Monitor.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CIO.GetLongWordIO(Okuma.CGDATAPI.Enumerations.IOTypeEnum,System.Int32)">
 <summary>Gets I/O long word at the specified address index
 </summary>
 <example> This example shows how to call GetLongWordIO method
 <code lang="VB.NET">
 Dim intValue As Int64
 Dim enIO As IOTypeEnum = IOTypeEnum.Input
 intValue= objIO.GetLongWordIO(enIO,  intAddressIndex)	
 </code></example>
 <param name="enIO">
 <para>I/O variable type.  Values of parameter come from Okuma.CGDATAPI.Enumerations.IOTypeEnum enumeration.</para>
 </param>
 <param name="intAddressIndex">
 <para> Logical I/O address index</para>
 <para>Input address is starting from 0 to 510</para>
 <para>Output address is starting from 512 to 1022</para>
 </param>
 <returns>A System.Int64 value represents decimal value</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 <para>Data value displayed on OSP IO Monitor application can have negative values in DEC column. However, HEX column </para>
 <para>will display actual value. For example: If Long Word data has a HEX value of FFFFFFFF then it will be displayed as -1</para>
 <para>in DEC column. This function will return 4294967295 for the equivalent value of FFFFFFFF in HEX . </para>
 </remarks>
 <Figure> I/O Monitor application
 <para>
 <img src="../media/IO.Monitor.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CIO.GetLabel(Okuma.CGDATAPI.DataAPI.CIOAddress)">
 <summary>
 Gets label associated with the I/O address location, I/O size, and I/O type. 
 </summary>
 <example> This example shows how to call GetLabel method
 <code lang="VB.NET">
 Dim objAddress As CIOAddress = new CIOAddress
 Dim strValue As String
 objAddress.Address = 11
 objAddress.Bit = 15
 objAddress.Size = IOAddressSizeEnum.Bit
 objAddress.IOType = IOTypeEnum.Input 
 strValue = m_objIO.GetLabel(objAddress)
 </code>
	</example>
 <param name="objIOAddress">I/O address location, I/O address size, and I/O type </param>
 <returns>A label if the label can be found based on the given information.  It can be empty if no label assigned to an I/O address location</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> I/O Monitor application
 <para>
 <img src="../media/IO.Monitor.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>**************** Important: This function can only support STA Threading model if Apartment state is required to be set **************** </para>
 <para>Example:</para>
 <code lang="VB.NET">
 Dim t As Threading.Thread
 t = New Threading.Thread(AddressOf GetIOThread)
 t.SetApartmentState(Threading.ApartmentState.STA)
 t.Start()
 ....
 Private Sub GetIOThread()
    Dim objIOAddress As CIOAddress
     Try
         objIOAddress = m_objIO.GetLabel(objIOAddress)
     Catch ex As Exception
         MsgBox(ex.ToString)
     End Try
 End Sub
 </code>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CIO.GetIO(System.String)">
 <summary>
 Gets I/O address value given I/O label. 
 </summary>
 <example> This example shows how to call GetLabel method
 <code lang="VB.NET">
 Dim objIOAddress As CIOAddress
 
  txtPLCBitAddress.Text = ""
  txtPLCBit.Text = ""
  txtPLCBitData.Text = ""
  txtPLCWordData.Text = ""
  txtPLCWordAddress.Text = ""
  txtPLCLongWordAddress.Text = ""
  txtPLCLongWordData.Text = ""
 
  objIOAddress = m_objIO.GetIO(txtIOLabel.Text)
 
  cboIOVariableTypes.SelectedIndex = objIOAddress.IOType
 
  Select Case objIOAddress.Size
  Case IOAddressSizeEnum.Bit
      txtPLCBitAddress.Text = objIOAddress.Address
      txtPLCBit.Text = objIOAddress.Bit
    txtPLCBitData.Text = objIOAddress.Value
 
     Case IOAddressSizeEnum.Word
         txtPLCWordAddress.Text = objIOAddress.Address
         txtPLCWordData.Text = objIOAddress.Value
 
      Case IOAddressSizeEnum.DWord
          txtPLCLongWordAddress.Text = objIOAddress.Address
          txtPLCLongWordData.Text = objIOAddress.Value
 
      Case Else
          DisplayError("I/O Variables", "Not found")
  End Select
 </code>
	</example>
 <param name="strLabel">I/O address label for Bit/Word/Long Word. It is case-sensitive and cannot be blank label. </param>
 <returns>An I/O address data value associated with the label if it is found. Otherwise, address/bit location will be reset to -1, and 0 respectively.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> I/O Monitor application
 <para>
 <img src="../media/IO.Monitor.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>**************** Important: This function can only support STA Threading model if Apartment state is required to be set **************** </para>
 <code lang="VB.NET">
 Example:
 Dim t As Threading.Thread
 t = New Threading.Thread(AddressOf GetIOThread)
 t.SetApartmentState(Threading.ApartmentState.STA)
 t.Start()
 ....
 Private Sub GetIOThread()
    Dim objIOAddress As CIOAddress
     Try
         objIOAddress = m_objIO.GetIO("ipNTS_B")
     Catch ex As Exception
         MsgBox(ex.ToString)
     End Try
 End Sub
 </code>
 </remarks>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CIOAddress">
<summary>
Class represents IO address data
</summary>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CIOAddress.Address">
 <summary>
 Address location for Input/Output 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CIOAddress.Bit">
 <summary>
 Bit location 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CIOAddress.Size">
 <summary>
 Data size of address location 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CIOAddress.IOType">
 <summary>
 type of I/O address location 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CIOAddress.Value">
 <summary>
 Data value at address/bit location
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CLoader">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functions to obtain  Loader data
 </summary>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>NC Loader: NC spec code [28,1]</term>
 <description>Valid</description>
 </item>
 <item>
 <term>NC Robot: NC spec code [28,0]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CLoader.#ctor">
 <summary>
 Create an instance of this class
 </summary>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CLoader.GetRegisterData(System.Int32)">
 <summary>Gets general purpose register data at the specified index
 <para></para>
 </summary>
 <example> This example shows how to call GetRegisterData method
 <code lang="VB.NET">
 Dim intIndex As Int32 = 0
 Dim intValue As Int32
 Dim objLoader As New CLoader
 intValue = objLoader.GetRegisterData(intIndex)	
 </code></example>
 <param name="intIndex">General purpose register index: 0 to 89</param>
 <returns>A System.Int32 value that represents value of the register</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> General Purpose Register 0-89
 <para>
 <img src="../media/Loader.RegisterData0To99.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CLoader.GetPointData(System.Int32,Okuma.CGDATAPI.Enumerations.LoaderAxisIndexEnum)">
 <summary>Gets point data at the specified index, and axis index
 <para></para>
 </summary>
 <example> This example shows how to call GetPointData method
 <code lang="VB.NET">
 Dim intIndex As Int32 = 0
 Dim dblValue As Double
 Dim enAxisIndex As LoaderAxisIndexEnum
 Dim objLoader As New CLoader
 dblValue = objLoader.GetPointData(intIndex, enAxisIndex)	
 </code></example>
 <param name="intIndex">point data index: 0 to 99</param>
 <param name="enAxisIndex">Loader Axis index</param>
 <returns>A System.Double value that represents value of the point data</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> Loader - Point Data
 <para>
 <img src="../media/Loader.PointData.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CLoader.SetRegisterData(System.Int32,System.Int32)">
 <summary>Sets general purpose register data at the specified index
 <para></para>
 </summary>
 <example> This example shows how to call SetRegisterData method
 <code lang="VB.NET">
 Dim intIndex As Int32 = 0
 Dim intValue As Int32 = 1
 Dim objLoader As New CLoader
 objLoader.SetRegisterData(intIndex, intValue)	
 </code></example>
 <param name="intIndex">General purpose register index: 0 to 89</param>
 <param name="intValue">value to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> General Purpose Register 0-89
 <para>
 <img src="../media/Loader.RegisterData0To99.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CLoader.AddRegisterData(System.Int32,System.Int32)">
 <summary>
  Sets general purpose register data by adding the input value to the existing data at the specified index 
 </summary>
 <example> This example shows how to call AddRegisterData method
 <code lang="VB.NET">
 Dim intIndex As Int32 = 0
 Dim intValue As Int32 = 1
 Dim objLoader As New CLoader
 objLoader.SetRegisterData(intIndex, intValue)	
 </code></example>
 <param name="intIndex">General purpose register index: 0 to 89</param>
 <param name="intValue">value to be added</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> General Purpose Register 0-89
 <para>
 <img src="../media/Loader.RegisterData0To99.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CLoader.SetPointData(System.Int32,Okuma.CGDATAPI.Enumerations.LoaderAxisIndexEnum,System.Double)">
 <summary>Sets point data at the specified index, and axis index
 <para></para>
 </summary>
 <example> This example shows how to call SetPointData method
 <code lang="VB.NET">
 Dim intIndex As Int32 = 0
 Dim enAxisIndex As LoaderAxisIndexEnum = LoaderAxisIndexEnum.X_Axis
 Dim dblValue As Double = 1.23
 Dim objLoader As New CLoader
 objLoader.SetPointData(intIndex, enAxisIndex, dblValue)	
 </code></example>
 <param name="intIndex">point data index: 0 to 99</param>
 <param name="enAxisIndex">Loader Axis index</param>
 <param name="dblValue">value to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> Loader - Point Data
 <para>
 <img src="../media/Loader.PointData.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CLoader.AddPointData(System.Int32,Okuma.CGDATAPI.Enumerations.LoaderAxisIndexEnum,System.Double)">
 <summary>Sets point data by adding the input value to the current value at the specified index, and axis index
 <para></para>
 </summary>
 <example> This example shows how to call AddPointData method
 <code lang="VB.NET">
 Dim intIndex As Int32 = 0
 Dim enAxisIndex As LoaderAxisIndexEnum = LoaderAxisIndexEnum.X_Axis
 Dim dblValue As Double = 1.23
 Dim objLoader As New CLoader
 objLoader.AddPointData(intIndex, enAxisIndex, dblValue)	
 </code></example>
 <param name="intIndex">point data index: 0 to 99</param>
 <param name="enAxisIndex">Loader Axis index</param>
 <param name="dblValue">value to be added</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> Loader - Point Data
 <para>
 <img src="../media/Loader.PointData.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CMachine">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functions to obtain general machine status.  This is the main class that must be created first and the Init method
 must be called to initiate the communication with machine once NC is fully started.
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.#ctor">
 <summary>
 Create an instance of this class
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.#ctor(System.String)">
 <summary>
 Create an instance of this class
 In addition to library name, the provided logging name will be used for logging all function calls 
 </summary>
 <param name="strLoggingName">Logging name.  Normally, it is the name of the application using this library</param>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.Close">
 <summary>
 Close the communication with NC
 </summary>
 <remarks>Any subsequent call for NC data will fail after calling this method</remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetCurrentAlarmMessage">
 <summary>
 Gets current alarm message
 </summary>
 <example> This example shows how to call GetCurrentAlarmMessage method .
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim strValue As String = ""
 strValue = objMachine.GetCurrentAlarmMessage()	
 </code></example>
 <returns>A System.String value.  If there is no alarm in the system, alarm message will be empty string.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> Current Alarm Message
 <para>
 <img src="../media/P300.Grinder.AlarmMessage.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetOperationMode">
 <summary>
 Gets current machine operation mode 
 </summary>
 <example> This sample code shows how to use the GetOperationMode() method.
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim enOperationMode As OperationModeEnum 
 enOperationMode = objMachine.GetOperationMode()
 </code></example>
 <returns>An Okuma.CGDATAPI.Enumerations.OperationModeEnum enumeration value that represents the NC operation modes</returns>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetExecutionMode">
 <summary>
 Gets the machine execution mode.  It is considered running if it is currently executing a block of code either in Auto or MDI mode.
 <para>Notes: If a program is current executing and Slide Hold is activated then the execution mode is still active or Running </para>
 </summary>
 <example> This example shows how to call GetExecutionMode method
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim enValue As ExecutionModeEnum
 enValue = objMachine.GetExecutionMode()	
 </code></example>
 <returns>An Okuma.CGDATAPI.Enumerations.ExecutionModeEnum enum value.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetSingleBlockState">
 <summary>
 Gets the single block state
 </summary>
 <example> This example shows how to call GetSingleBlockState method .
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim enValue As OnOffStateEnum
 enValue = objMachine.GetSingleBlockMode()	
 </code></example>
 <returns>An Okuma.CGDATAPI.Enumerations.OnOffStateEnum enum value.  It is ON if Single Block LED is on. Otherwise, it is OFF.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> SINGLE BLOCK
 <para>
 <img src="../media/P300.Grinder.NC.Panel.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetMachineLockState">
 <summary>
 Gets machine lock state 
 </summary>
 <example> This example shows how to call GetMachineLockState method .
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim enValue As OnOffStateEnum
 enValue = objMachine.GetMachineLockState()	
 </code></example>
 <returns>An Okuma.CGDATAPI.Enumerations.OnOffStateEnum enum value.  It is ON if machine lock LED is on. Otherwise, it is OFF.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> MACHINE LOCK
 <para>
 <img src="../media/P300.Grinder.NC.Panel.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetDryRunState">
 <summary>
 Gets Dry Run state
 </summary>
 <example> This example shows how to call GetDryRun method .
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim enValue As OnOffStateEnum
 enValue = objMachine.GetDryRunState()	
 </code></example>
 <returns>An Okuma.CGDATAPI.Enumerations.OnOffStateEnum enum value.  It is ON if Dry Run LED is on. Otherwise, it is OFF.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> DRY RUN
 <para>
 <img src="../media/P300.Grinder.NC.Panel.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetNCStatus(Okuma.CGDATAPI.Enumerations.NCStatusEnum)">
 <summary>
 Gets current state of the specified NC status
 </summary>
 <example> This example shows how to call GetNCStatus method .
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim enValue As OnOffStateEnum
 Dim enNCStatus As NCStatusEnum = NCStatusEnum.Alarm 
 enValue = objMachine.GetNCStatus(enNCStatus)	
 </code></example>
 <param name="enNCStatus">NC status.  Values of parameter come from Okuma.CGDATAPI.Enumerations.BitsEnum enumeration.</param>
 <returns>An Okuma.CGDATAPI.Enumerations.OnOffStateEnum enum value.  It is ON if the specified NC status is on. Otherwise, it is OFF.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetCuttingTime">
 <summary>
 Gets cutting time. The cutting time will be reset when a part program is first started.
 </summary>
 <example> This example shows how to call GetCuttingTime method .
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim strValue As String = ""
 strValue = objMachine.GetCuttingTime()	
 </code></example>
 <returns>A System.String value that represents the time in this format:
 HHH:MM:SS where HHH = hours, MM = minutes, and SS = seconds
 Example: 0: 4:32 = 4 minutes 32 seconds 
 </returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - LOAD ON/OFF - CUTTING TIME
 <para>
 <img src="../media/P300.Grinder.Auto.ActualPosition.Load.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetHourMeterCount(Okuma.CGDATAPI.Enumerations.HourMeterEnum)">
 <summary>
 Gets hour meter count for the specified type
 </summary>
 <example> This example shows how to call GetHourMeterCount() method
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim intValue as Int32
 Dim enValue as HourMeterEnum
 intValue = objMachine.GetHourMeterCount(enValue) 
 </code></example>
 <param name="enValue">Hour meter type</param>
 <returns>A System.Int32 value that represents the hour meter count time</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <DataUnit>Second</DataUnit>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - NC OPR. MONITOR - HOUR METER - COUNT
 <para>
 <img src="../media/P300.Grinder.Meter.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>NC Monitor: NC spec code [19,2]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetHourMeterSet(Okuma.CGDATAPI.Enumerations.HourMeterEnum)">
 <summary>
 Gets hour meter set for the specified type 
 </summary>
 <example> This example shows how to call GetHourMeterSet() method
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim intValue as Int32 
 Dim enValue as HourMeterEnum 
 intValue = objMachine.GetHourMeterSet(enValue) 
 </code></example>
 <param name="enValue">Hour meter type</param>
 <returns>A System.Int32 value that represents the hour meter set time</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <DataUnit>Second</DataUnit>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - NC OPR. MONITOR - HOUR METER - SET
 <para>
 <img src="../media/P300.Grinder.Meter.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>NC Monitor: NC spec code [19,2]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetOperationUnitSystemDisplay">
 <summary>
 Gets the current setting of machine data unit
 </summary>
 <example> This example shows how to call GetOperationUnitSystemDisplay method .
 <code lang="VB.NET">
 <para>	Dim objMachine As New CMachine</para>
 <para>	Dim intDataUnit As Integer	</para>
 <para>	intDataUnit = objMachine.GetOperationUnitSystemDisplay	</para>
 </code></example>
 <returns>
 A System.Int32 value that represents the current setting of machine data unit.
 <para>
 <list type="table">
 <listheader>
 <term>Preset value</term>
 <description>Operation unit system</description>
 </listheader>
 <item>
 <term>0</term>
 <description>1mm</description>
 </item>
 <item>
 <term>1</term>
 <description>0.01mm</description>
 </item>
 <item>
 <term>2</term>
 <description>0.001mm</description>
 </item>
 <item>
 <term>3</term>
 <description>0.0001mm</description>
 </item>
 <item>
 <term>4</term>
 <description>1inch</description>
 </item>
 <item>
 <term>5</term>
 <description>0.0001inch</description>
 </item>
 <item>
 <term>6</term>
 <description>0.00001inch</description>
 </item>
 </list>
 </para>
	</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>PARAMETER - UNIT - OPTIONAL PARAMETER - LENGTH UNIT SYSTEM - Current setting of data unit: mm/inch
 <para>
 <img src="../media/P300.Grinder.Paramters.DataUnit.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetPanelMode">
 <summary>
 Gets current machine panel mode 
 </summary>
 <example> This sample code shows how to use the GetPanelMode() method.
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim enPanelMode As PanelModeEnum 
 enPanelMode = objMachine.GetPanelMode()
 </code></example>
 <returns>An Okuma.CGDATAPI.Enumerations.PanelModeEnum enumeration value that represents the panel mode</returns>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.Init">
 <summary>
 Intialize library to communicate with machine sharing data.
 </summary>		
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <exception cref="T:Okuma.CGDATAPI.DataAPI.CAPISpecException">Thrown when API Specification is not enabled on machine</exception>
 <remarks>
 <para> ***************************************************************************************************************************************************************************</para>
 <para> ***************************************************************************************************************************************************************************</para>
 It recommends that this method is called in main thread of application.
 Subsequent methods can be made from threads other than main thread.
 <para> ***************************************************************************************************************************************************************************</para>
 <para> ***************************************************************************************************************************************************************************</para>
 </remarks>	
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.AddHourMeterCount(Okuma.CGDATAPI.Enumerations.HourMeterEnum,System.Int32)">
 <summary>
 Sets hour meter count by adding the input value to the current value for the specified type
 </summary>
 <example> This example shows how to call AddHourMeterCount() method .
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim intValue as Int32 
 Dim enValue as HourMeterEnum 
 objMachine.AddHourMeterCount(enValue, intValue) 
 </code></example>
 <param name="enValue">Hour meter type</param>
 <param name="intValue">value to be added</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <DataUnit>Second</DataUnit>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - NC OPR. MONITOR - HOUR METER - COUNT
 <para>
 <img src="../media/P300.Grinder.Meter.jpg"/>
 </para>
 </Figure>
 <SubSystem>
 Please see <a href="../ExternalDocuments/SubSystemNoteTable.htm">Sub System Note Table</a> for more information if applicable.
 <para>Valid sub systems for this function (Y = Valid, N = Not valid)</para>
 <para>
 <list type="table">
 <listheader>
 	<term>NC_RUN </term>
 	<term>NC_RUN_1 </term>
 	<term>NC_PANEL </term>
 	<term>NC_PANEL_1 </term>
 	<term>NC_AL </term>
 	<term>NC_AR </term>
 </listheader>
 <item>
 	<term>Y</term>
 	<term>Y</term>
 	<term>Y</term>
 	<term>Y</term>
 	<term>Y</term>
 	<term>Y</term>
 </item>
 </list>
 </para>
 </SubSystem>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>NC Monitor: NC spec code [19,2]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.SetHourMeterCount(Okuma.CGDATAPI.Enumerations.HourMeterEnum,System.Int32)">
 <summary>
 Sets hour meter count for the specified type
 </summary>
 <example> This example shows how to call SetHourMeterCount() method .
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim intValue as Int32 
 Dim enValue as HourMeterEnum 
 objMachine.SetHourMeterCount(enValue, intValue) 
 </code></example>
 <param name="enValue">Hour meter type</param>
 <param name="intValue">value to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <DataUnit>Second</DataUnit>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - NC OPR. MONITOR - HOUR METER - COUNT
 <para>
 <img src="../media/P300.Grinder.Meter.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>NC Monitor: NC spec code [19,2]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.AddHourMeterSet(Okuma.CGDATAPI.Enumerations.HourMeterEnum,System.Int32)">
 <summary>
 Sets hour meter set by adding the input value to the current value for the specified type
 </summary>
 <example> This example shows how to call AddHourMeterSet() method .
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim intValue as Int32 
 Dim enValue as HourMeterEnum 
 objMachine.AddHourMeterSet(enValue, intValue)
 </code></example>
 <param name="enValue">Hour meter type</param>
 <param name="intValue">value to be added</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <DataUnit>Second</DataUnit>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - NC OPR. MONITOR - HOUR METER - SET
 <para>
 <img src="../media/P300.Grinder.Meter.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>NC Monitor: NC spec code [19,2]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.SetHourMeterSet(Okuma.CGDATAPI.Enumerations.HourMeterEnum,System.Int32)">
 <summary>
 Sets hour meter set for the specified type
 </summary>
 <example> This example shows how to call SetHourMeterSet() method .
 <para>	Dim intValue As Int32 </para>
 <para>	Dim enValue As HourMeterEnum </para>
 <para>	objMachine.SetHourMeterSet(enValue, intValue) </para>
 </example>
 <param name="enValue">Hour meter type</param>
 <param name="intValue">value to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <DataUnit>Second</DataUnit>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - NC OPR. MONITOR - HOUR METER - SET
 <para>
 <img src="../media/P300.Grinder.Meter.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>NC Monitor: NC spec code [19,2]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CMachine.GetNCReset">
 <summary>
 Gets NC reset state.  The state of NC Reset is last for a short period of time (less than 500ms)  when Reset button is pressed. 
 </summary>
 <example> This example shows how to call GetNCReset method .
 <code lang="VB.NET">
 Dim objMachine As New CMachine
 Dim enValue As OnOffStateEnum
 enValue = objMachine.GetNCReset()	
 </code></example>
 <returns>An Okuma.CGDATAPI.Enumerations.OnOffStateEnum enum value.  It is ON if NC Reset button is pressed. Otherwise, it is OFF.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.COptionalParameter">
 -----------------------------------------------------------------------------
 <summary>
 Class provides operation to Optional Parameter Long, Word, and Bit on NC. 
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.COptionalParameter.#ctor">
 <summary>
 Create an instance of this class
 </summary>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.COptionalParameter.GetNCOptionalParameterBit(System.Int32,System.Int32)">
 <summary>Gets NC Optional parameter bit value at bit index and bit number
 </summary>
 <example> This example shows how to GetNCOptionalParameterBit()
 <para> Dim objOptionalParameter As New COptionalParameter </para> 
  <para> Dim intBitNo As Integer	 </para> 
  <para> Dim intBitIndex As Integer	 </para> 
  <para> Dim enValue As OnOffStateEnum	 </para> 
  <para> enValue = objOptionalParameter.GetNCOptionalParameterBit(intBitIndex, intBitNo )	 </para> 
	</example>
 <param name="intBitIndex">Bit index</param>
 <param name="intBitNo">Bit nummber ranging from 0 to 7</param>
 <returns>An OnOffStateEnum value represents the NC Optional parameter bit value at bit index and bit number</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD 
 <para>
 <img src="../media/P300.Grinder.OptionaParameter.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.COptionalParameter.GetNCOptionalParameterWord(System.Int32)">
 <summary>Gets NC Optional parameter value at word index
 </summary>
 <example> This example shows how to GetNCOptionalParameterWord()
 <para> Dim objOptionalParameter As New COptionalParameter </para> 
  <para> Dim intWordIndex As Integer	 </para> 
  <para> Dim intValue As Integer	 </para> 
  <para> intValue = objOptionalParameter.GetNCOptionalParameterWord(intWordIndex)	 </para> 
	</example>
 <param name="intWordIndex">Word index</param>
 <returns>A System.Int32 value represents the NC Optional parameter value at word index</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD 
 <para>
 <img src="../media/P300.Grinder.OptionaParameter.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.COptionalParameter.GetNCOptionalParameterLongWord(System.Int32)">
 <summary>Gets NC Optional parameter value at long word index
 </summary>
 <example> This example shows how to GetNCOptionalParameterLongWord()
 <para> Dim objOptionalParameter As New COptionalParameter </para> 
  <para> Dim intLongWordIndex As Integer	 </para> 
  <para> Dim intValue As Integer	 </para> 
  <para> intValue = objOptionalParameter.GetNCOptionalParameterLongWord(intLongWordIndex)	 </para> 
	</example>
 <param name="intLongWordIndex">Long Word index</param>
 <returns>A System.Int32 value represents the NC Optional parameter value at long word index</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD 
 <para>
 <img src="../media/P300.Grinder.OptionaParameter.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.COptionalParameter.SetNCOptionalParameterBit(System.Int32,System.Int32,Okuma.CGDATAPI.Enumerations.OnOffStateEnum)">
 <summary>Sets NC Optional parameter bit value at bit index and bit number
 </summary>
 <example> This example shows how to SetNCOptionalParameterBit()
 <para> Dim objOptionalParameter As New COptionalParameter </para> 
  <para> Dim intBitNo As Integer	 </para> 
  <para> Dim intBitIndex As Integer	 </para> 
  <para> Dim enValue As OnOffStateEnum	 </para> 
  <para> objOptionalParameter.SetNCOptionalParameterBit(intBitIndex, intBitNo, enValue)	 </para> 
	</example>
 <param name="intBitIndex">Bit index</param>
 <param name="intBitNo">Bit nummber ranging from 0 to 7</param>
 <param name="enValue">value to set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD 
 <para>
 <img src="../media/P300.Grinder.OptionaParameter.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.COptionalParameter.SetNCOptionalParameterWord(System.Int32,System.Int32)">
 <summary>Sets NC Optional parameter word value at word index
 </summary>
 <example> This example shows how to SetNCOptionalParameterWord()
 <para> Dim objOptionalParameter As New COptionalParameter </para> 
  <para> Dim intWordIndex As Integer	 </para> 
  <para> Dim intValue As Integer	 </para> 
  <para> objOptionalParameter.SetNCOptionalParameterWord(intWordIndex, intValue)	 </para> 
	</example>
 <param name="intWordIndex">Word index</param>
 <param name="intValue">value to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD 
 <para>
 <img src="../media/P300.Grinder.OptionaParameter.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.COptionalParameter.AddNCOptionalParameterWord(System.Int32,System.Int32)">
 <summary>Sets NC Optional Parameter WORD by adding the input value to the existing data at the specified index. 
 </summary>
 <example> This example shows how to AddNCOptionalParameterWord()
 <para> Dim objOptionalParameter As New COptionalParameter </para> 
  <para> Dim intWordIndex As Integer	 </para> 
  <para> Dim intValue As Integer	 </para> 
  <para> objOptionalParameter.AddNCOptionalParameterWord(intWordIndex, intValue)	 </para> 
	</example>
 <param name="intWordIndex">Word index</param>
 <param name="intValue">value to be added</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD 
 <para>
 <img src="../media/P300.Grinder.OptionaParameter.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.COptionalParameter.SetNCOptionalParameterLongWord(System.Int32,System.Int32)">
 <summary>Sets NC Optional parameter LONG WORD value at long word index
 </summary>
 <example> This example shows how to SetNCOptionalParameterLongWord()
 <para> Dim objOptionalParameter As New COptionalParameter </para> 
  <para> Dim intLongWordIndex As Integer	 </para> 
  <para> Dim intValue As Integer	 </para> 
  <para> objOptionalParameter.SetNCOptionalParameterLongWord(intLongWordIndex, intValue)	 </para> 
	</example>
 <param name="intLongWordIndex">Long Word index</param>
 <param name="intValue">value to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD 
 <para>
 <img src="../media/P300.Grinder.OptionaParameter.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.COptionalParameter.AddNCOptionalParameterLongWord(System.Int32,System.Int32)">
 <summary>Sets NC Optional Parameter LONG WORD by adding the input value to the existing data at the specified index. 
 </summary>
 <example> This example shows how to AddNCOptionalParameterLongWord()
 <para> Dim objOptionalParameter As New COptionalParameter </para> 
  <para> Dim intLongWordIndex As Integer	 </para> 
  <para> Dim intValue As Integer	 </para> 
  <para> objOptionalParameter.AddNCOptionalParameterLongWord(intLongWordIndex, intValue)	 </para> 
	</example>
 <param name="intLongWordIndex">Long Word index</param>
 <param name="intValue">value to be added</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD 
 <para>
 <img src="../media/P300.Grinder.OptionaParameter.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CProgram">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functions to obtain part program information 
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.#ctor">
 <summary>
 Create an instance of this class.  
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.GetExecutedSequenceNumber">
 <summary>
 Gets the running sequence name/number
 </summary>
 <example>This example shows how to call GetExecutedSequenceNumber.
 <code lang="VB.NET">
 Dim strValue As String = "" 	
 strValue= objAxis.GetExecutedSequenceNumber()	
 </code></example>
 <returns>A System.String value of current executing sequence number that starts with N. Otherwise, N will be return.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - MAIN PROGRAM - NSTRT - The current executed sequence number is NSTRT 
 <para>
 <img src="../media/P300.Grinder.Auto.ActualPosition.MainProgram.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.GetCurrentBlockNumber">
 <summary>
 Gets current block number
 </summary>
 <example>This example shows how to call GetCurrentBlockNumber.
 <code lang="VB.NET">
 Dim intValue As Integer	
 Dim objProgram As New CProgram
 intValue= objProgram.GetCurrentBlockNumber()	
 </code></example>
 <returns>A System.Integer value that represents current block number</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION 1mm N 1 - 1 is current block number.  
 <para>
 <img src="../media/P300.Grinder.Auto.ActualPosition.ProgramOn.jpg"/>
 </para>
 </Figure>
 <remarks>
 The block number will not be reset when part program is ended or reset. It will be set to 1 when the first line of part program is executed.
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.GetProgramRunningState">
 <summary>
 Gets program running status when operation mode is either in Auto or MDI mode
 </summary>
 <example>This example shows how to call GetProgramRunningState.
 <code lang="VB.NET">
 Dim enValue As ProgramRunningStateEnum 
 enValue = objProgram.GetProgramRunningState()	
 </code></example>
 <returns>A ProgramRunningStateEnum value.  
 It is considered running or executing when current part program loaded on NC is started 
 or NC is currently executing a block of code in MDI mode.  
 Otherwise, it is not running</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.GetActiveIndexProgram">
 <summary>
 Gets current index program file name loaded in NC
 </summary>
 <example>This example shows how to call GetActiveIndexProgram
 <code lang="VB.NET">
 Dim strValue As String 
 strValue = objProgram.GetActiveIndexProgram()	
 </code></example>
 <returns>A System.String value.  It returns an empty string if no current index program loaded into NC.  Otherwise, it returns the current index program file name</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - CYCLE SELECT - SELECT INDEX PROGRAM
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActPos2.2.CycleSelect.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.GetCycleSelectProgramName(Okuma.CGDATAPI.Enumerations.ProgramCycleEnum)">
 <summary>
 Gets cycle select part program name given program cycle.  
 </summary>
 <example>This example shows how to call GetCycleSelectProgramName
 <code lang="VB.NET">
 Dim strValue As String 
 Dim enProgramCycle As ProgramCycleEnum 
 strValue = objProgram.GetCycleSelectProgramName(enProgramCycle)	
 </code></example>
 <param name="enProgramCycle">program cycle.  Values of parameter come from the ProgramCycleEnum enumeration.</param>
 <returns>A System.String value.  It returns an empty string if no current part program assigned to a cycle.  Otherwise, it returns the part program name</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - CYCLE SELECT - PROGRAM NAME - O4567 is program name of WHL. TRUING A2 cycle selection
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActPos2.2.CycleSelect-2.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.GetCycleSelectProgramFileName(Okuma.CGDATAPI.Enumerations.ProgramCycleEnum)">
 <summary>
 Gets cycle select part program file name given program cycle.  
 </summary>
 <example>This example shows how to call GetCycleSelectProgramFileName
 <code lang="VB.NET">
 Dim strValue As String 
 Dim enProgramCycle As ProgramCycleEnum 
 strValue = objProgram.GetCycleSelectProgramFileName(enProgramCycle)	
 </code></example>
 <param name="enProgramCycle">program cycle.  Values of parameter come from the ProgramCycleEnum enumeration.</param>
 <returns>A System.String value.  It returns an empty string if no current part program assigned to a cycle.  Otherwise, it returns the part program file name</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - CYCLE SELECT - SELECT MAIN PROGRAM - LD-IDRS.MIN is program file name of WHL. TRUING A2 cycle selection
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActPos2.2.CycleSelect-2.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.GetActiveProgramFileName">
 <summary>
 Gets current active part program file name loaded into NC
 </summary>
 <example>This example shows how to call GetActiveProgramFileName
 <code lang="VB.NET">
 Dim strValue As String 
 strValue = objProgram.GetActiveProgramFileName()	
 </code></example>
 <returns>A System.String value.  It returns an empty string if no current part program file name loaded into NC.  Otherwise, it returns the current part program file name</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - TEST-I.MIN is program file name 
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActualPosition.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.GetActiveProgramName">
 <summary>
 Gets current active part program name loaded into NC
 </summary>
 <example>This example shows how to call GetActiveProgramName
 <code lang="VB.NET">
 Dim strValue As String
 strValue = objProgram.GetActiveProgramName()	
 </code></example>
 <returns>A System.String value.  It returns an empty string if no current part program file name loaded into NC.  Otherwise, it returns the current part program name defined in the part program file name if any</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - O1234 is program name 
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActualPosition.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.GetActiveScheduleProgramFileName">
 <summary>
 Gets current active schedule part program file name loaded into NC
 </summary>
 <example>This example shows how to call GetActiveScheduleProgramFileName
 <code lang="VB.NET">
 Dim strValue As String
 strValue = objProgram.GetActiveScheduleProgramFileName()	
 </code></example>
 <returns>A System.String value.  It returns an empty string if no current schedule part program file name loaded into NC.  Otherwise, it returns the current schedule part program file name</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - SHCEDULE PRG_OPER - LDPART11.SDF is current active schedule program file name loaded into NC
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActualPosition.ScheduleProgram.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.GetCurrentCycleSelection">
 <summary>
 Gets current program cycle selection for the current or previous index program loaded into NC.
 </summary>
 <example>This example shows how to call GetCurrentCycleSelection.
 <code lang="VB.NET">
 Dim enValue As ProgramCycleEnum
 enValue = objProgram.GetCurrentCycleSelection()	
 </code></example>
 <returns>A ProgramCycleEnum value that represents current cycle selection of index program</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - CYCLE SELECT - The current cycle selection is A2
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActPos2.2.CycleSelect-2.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.GetMCodes(Okuma.CGDATAPI.Enumerations.MCodesEnum)">
 <summary>
 Gets the running M codes of each M code group at the specified M-code line index
 </summary>
 <example> This example shows how to get M codes method
	<para>Dim enMCodeLine As MCodesEnum = MCodesEnum.MCodes_Line1	</para>
	<para>	strMCodes= objProgram.GetMCodes(enMCodeLine)	</para>
 </example>
 <param name="enMCodes">M-Code line index</param>
 <returns>A System.String value represent M Codes</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> AUTO OPERATION - MAIN PROGRAM - MCODE - List of all M codes in line 1,2,3 being executed in NC 
 <para>
 <img src="../media/P300G.MDI.BlockData.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.CycleComplete">
 <summary>
 Check whether or not M02/M30 has been executed in the main part program or in MDI mode 
 </summary>
 <example> This example shows how to call CycleComplete method
 <code lang="VB.NET">
 Dim blnValue As Boolean
 blnValue = m_objProgram.CycleComplete()	
 </code></example>
 <returns>A System.Boolean value.  True if M02/M30 has been executed otherwise it returns false</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CProgram.GetExecuteBlock">
 <summary>
 Gets the Execute block.  Only the first 65 characters will be obtainable.
 </summary>
 <example> This example shows how to call GetExecuteBlock method
 <para>strValue = objProgram.GetExecuteBlock	</para>
 </example>
 <returns>A System.String value.  It returns an empty String if no current block being executed by NC.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> AUTO OPERATION - EXECUTE BLOCK
 <para>
 <img src="../media/P300G.ActualPosition.3.ExecuteBlock.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CSpec">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functions to obtain general machine specification
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpec.#ctor">
 <summary>
 Create an instance of this class
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpec.GetControlType">
 <summary>
 Get control type of machine
 </summary>
 <example> This sample shows how to call the GetControlType() method.
 <code lang="VB.NET">
 Dim enControlType As ControlTypeEnum 
	enControlType = objSpec.GetControlType() 
 </code></example>
 <returns>An Okuma.CGDATAPI.Enumerations.ControlTypeEnum enum value. </returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpec.GetSpecCode(System.Int32,System.Int32)">
 <summary>
 Check if spec. code is enabled or not given spec. code index and spec. code bit number.
 Please see <a href="../ExternalDocuments/P300.Grinder.NC.SpecCode.htm">NC Spec. Code Table</a> for more information.
 </summary>
 <example> This sample shows how to call the GetSpecCode() method.
 <code lang="VB.NET">
 Dim objSpec As new CSpec
 Dim intSpecCodeIndex As Int32
 Dim intBit As Int32 
 Dim blnValue As Boolean 
	blnValue = objSpec.GetSpecCode(intSpecCodeIndex, intBit) 
 </code></example>
 <param name="intSpecCodeIndex">spec. code index</param>
 <param name="intBit">spec. code bit index</param>
 <returns>A System.Boolean value.  True if spec code is enabled, otherwise false.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> AUTO OPERATION - NC SPEC CODE
 <para>
 <img src="../media/P300.Grinder.Auto.NCSpecCode.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpec.GetBSpecCode(System.Int32,System.Int32)">
 <summary>
 Check if spec. code is enabled or not given B spec. code index and B spec. code bit number.
 Please see <a href="../ExternalDocuments/P300.Grinder.NC.SpecCode2.htm">NC Spec. Code 2 Table</a> for more information.
 </summary>
 <example> This sample shows how to call the GetBSpecCode() method.
 <code lang="VB.NET">
	Dim objSpec As new CSpec 
	Dim intSpecCodeIndex As Int32 
	Dim intBit As Int32 
	Dim blnValue As Boolean 
	blnValue = objSpec.GetBSpecCode(intSpecCodeIndex, intBit) 
 </code></example>
 <param name="intSpecCodeIndex">B spec. code index</param>
 <param name="intBit">B spec. code bit index</param>
 <returns>A System.Boolean value.  True if spec code is enabled, otherwise false.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure> AUTO OPERATION - NC SPEC CODE 2
 <para>
 <img src="../media/P300.Grinder.Auto.NCBSpecCode.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpec.GetMachineSerialNumber">
 <summary>
 Get machine serial number
 </summary>
 <example> This sample shows how to call the GetMachineSerialNumber() method.
 <code lang="VB.NET">
	Dim strValue As String
	strValue = m_objSpec.GetMachineSerialNumber() 
 </code></example>
 <returns>A System.String value that represents the machine serial number</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpec.GetMachineName">
 <summary>
 Get machine name
 </summary>
 <example> This sample shows how to call the GetMachineName() method.
 <code lang="VB.NET">
	Dim strValue As String
	strValue = m_objSpec.GetMachineName() 
 </code></example>
 <returns>A System.String value that represents the machine name.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CSpindle">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functions to obtain spindles information 
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpindle.#ctor">
 <summary>
 Create an instance of this class.  
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpindle.GetSpindlerateOverride">
 <summary>
 Gets work spindle rate override
 </summary>
 <example> This sample shows how to call the GetSpindlerateOverride method.
 <code lang="VB.NET">
 Dim intValue As Integer 
 intValue = objSpindle.GetSpindlerateOverride()	
 </code></example>
 <returns> System.Int32 value that represents spindle (work spindle) rate override</returns>
 <DataUnit>
	Percentage
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - RUN - ACT POS (1/2) - SPINDLE OVERRIDE
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActPos2.2.CycleSelect.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpindle.GetActualSpindlerate">
 <summary>
 Gets actual spindle rate 
 </summary>
 <example> This sample shows how to call the GetActualSpindlerate method.
 <code lang="VB.NET">
 Dim intValue As Integer
 intValue = objSpindle.GetActualSpindlerate()	
 </code></example>
 <returns> System.Int32 value that represents spindle (work spindle) rate </returns>
 <DataUnit>
	RPM
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - SETUP - SPINDLE - ACT REV.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpindle.GetSpindleSurfaceSpeed">
 <summary>
 Gets work spindle surface speed 
 </summary>
 <example> This sample shows how to call the GetSpindleSurfaceSpeed method.
 <code lang="VB.NET">
 Dim intValue As Integer
 intValue = objSpindle.GetSpindleSurfaceSpeed()
 </code></example>
 <returns> System.Int32 value that represents work spindle surface speed</returns>
 <DataUnit>
	It is m/min when data unit sets to mm. Otherwise, it is ft/min for inch unit. 
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - V
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActualPosition.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpindle.GetSpindleLoad">
 <summary>
 Gets work spindle load 
 </summary>
 <example> This sample shows how to call the GetSpindleLoad method.
 <code lang="VB.NET">
 Dim dblValue As Double
 dblValue = objSpindle.GetSpindleLoad()	
 </code></example>
 <returns> System.Double value that represents the measurement value of work spindle load</returns>
 <DataUnit>
	Percentage 
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - LOAD ON/OFF - S
 <para>
 <img src="../media/P300.Grinder.Auto.ActualPosition.Load.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpindle.GetCommandSpindlerate">
 <summary>
 Gets command spindle rate 
 </summary>
 <example> This sample shows how to call the GetCommandSpindlerate method.
 <code lang="VB.NET">
 Dim intValue As Integer 
 intValue = objSpindle.GetCommandSpindlerate()	
 </code></example>
 <returns> System.Int32 value that represents command spindle (work spindle) rate </returns>
 <DataUnit>
	RPM
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - SETUP - SPINDLE - REV.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpindle.SetDataUnit(Okuma.CGDATAPI.Enumerations.DataUnitEnum)">
 <summary>Sets current data unit for this class instance.</summary>
 <example> This example shows how to call the SetDataUnit method.
 <code lang="VB.NET">
 Dim objSpindle As New CSpindle
 objSpindle.SetDataUnit(DataUnitEnum.Unit_Inch)
 </code></example>
 <param name="enValue">Data Unit to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 If applicable, this setting is applied to data in this class instance only, not for NC Data Unit.
 For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, 
 then offset value will be converted to inch from NC offset data and vice versa.
 </remarks>
 <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. 
 <para>
 <img src="../media/P300.Grinder.Paramters.DataUnit.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpindle.SetCommandSpindlerate(System.Int32)">
 <summary>
 Sets spindle rotation speed setup 
 </summary>
 <example> This sample shows how to call the SetCommandSpindlerate method.
 <code lang="VB.NET">
 Dim objSpindle As New CSpindle
 Dim intValue As Integer 
 objSpindle.SetCommandSpindlerate(intValue)
 </code></example>
 <param name="intValue">value to be set. Valid value of spindle rate is from 0 to 30000.</param>
 <DataUnit>
	RPM
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 Valid value of spindle rate is from 0 to 30000.
 </remarks>
 <Figure>AUTO OPERATION - ACTUAL POSITION - SETUP - SPINDLE/REV.
 <para>
 <img src="../media/P300.Grinder.AutoOperation.Setup.WheelRotationSpeed.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CSpindle.AddCommandSpindlerate(System.Int32)">
 <summary>
 Sets spindle rotation speed setup by adding the input to the existing data 
 </summary>
 <example> This sample shows how to call the AddCommandSpindlerate method.
 <code lang="VB.NET">
 Dim objSpindle As New CSpindle
 Dim intValue As Integer 
 objSpindle.AddCommandSpindlerate(intValue)
 </code></example>
 <param name="intValue">value to be added.</param>
 <DataUnit>
	RPM
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 Valid value of spindle rate is from 0 to 30000.
 </remarks>
 <Figure>AUTO OPERATION - ACTUAL POSITION - SETUP - SPINDLE/REV.
 <para>
 <img src="../media/P300.Grinder.AutoOperation.Setup.WheelRotationSpeed.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CTools">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functions to obtain tool information 
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CTools.#ctor">
 <summary>
 Create an instance of this class.  
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CTools.GetCurrentToolNumber">
 <summary>
 Get curent tool number (wheel number)  
 </summary>
 <example>This example shows how to use GetCurrentToolNumber.
 <code lang="VB.NET">
 Dim intValue As Integer
 intValue = objTools.GetCurrentToolNumber()	
 </code></example>
 <returns>A System.Integer that represents current tool (wheel number).</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
 <Figure>AUTO OPERATION - BLOCK DATA - T
 <para>
 <img src="../media/P300G.MDI.BlockData.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CTools.GetToolOffset(System.Int32,Okuma.CGDATAPI.Enumerations.AxisIndexEnum)">
 <summary>
 Gets diamond tool offset at the specified diamond offset index, and axis index 
 </summary>
 <example>This example shows how to call GetToolOffset.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum 	
 Dim intOffsetIndex As Integer 	
 Dim dblValue As Double 	
 Dim objWorkpiece As New CTools
 dblValue= objTools.GetDiamondOffset(intOffsetIndex, enAxisIndex)	
 </code></example>
 <param name="intOffsetIndex">offset index</param>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum enumeration.</param>
 <returns>
 <para>A System.Double that represents the offset value.</para>
 <para>Note: When NC HMI displays an -/+OVER FLOW the system still returns a value.  This value is currently identified not within the setting limit for this data field.</para>
 </returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - DIA. ZERO - OFFSET - X/Z
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CTools.GetNoseRCompensation(System.Int32,Okuma.CGDATAPI.Enumerations.AxisIndexEnum)">
 <summary>
 Gets nose radius compensation at the specified diamond offset index, and axis index 
 </summary>
 <example>This example shows how to call GetNoseRCompensation.
 <code lang="VB.NET">
 Dim intOffsetIndex As Integer 	
 Dim dblValue As Double 
 Dim enAxisIndex As AxisIndexEnum 	
 Dim objWorkpiece As New CTools
 dblValue= objTools.GetNoseRCompensation(intOffsetIndex, enAxisIndex)	
 </code></example>
 <param name="intOffsetIndex">offset index</param>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum enumeration.</param>
 <returns>
 <para>A System.Double that represents the offset value.</para>
 <para>Note: When NC HMI displays an -/+OVER FLOW the system still returns a value.  This value is currently identified not within the setting limit for this data field.</para>
 </returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - DIA. ZERO - NOSE-R COMP. - X/Z
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CTools.SetDataUnit(Okuma.CGDATAPI.Enumerations.DataUnitEnum)">
 <summary>Sets current data unit for this class instance.</summary>
 <example> This example shows how to call the SetDataUnit method.
 <code lang="VB.NET">
 Dim objTools As New CTools
 objTools.SetDataUnit(DataUnitEnum.Unit_Inch)
 </code></example>
 <param name="enValue">Data Unit to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 If applicable, this setting is applied to data in this class instance only, not for NC Data Unit.
 For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, 
 then offset value will be converted to inch from NC offset data and vice versa.
 </remarks>
 <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. 
 <para>
 <img src="../media/P300.Grinder.Paramters.DataUnit.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CTools.SetToolOffset(System.Int32,Okuma.CGDATAPI.Enumerations.AxisIndex2Enum,System.Double)">
 <summary>
 Sets tool offset at the specified diamond offset index, and axis index 
 </summary>
 <example>This example shows how to call SetToolOffset.
 <code lang="VB.NET">
 Dim intOffsetIndex As Integer 	
 Dim enAxisIndex As AxisIndex2Enum  	
 Dim dblValue As Double 	
 Dim objTools As New CTools 
 objTools.SetToolOffset(intOffsetIndex, enAxisIndex, dblValue)	
 </code></example>
 <param name="intOffsetIndex">Offset index</param>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndex2Enum  enumeration.</param>
 <param name="dblValue">Offset value to be set</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - DIA. ZERO - OFFSET - X/Z
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CTools.AddToolOffset(System.Int32,Okuma.CGDATAPI.Enumerations.AxisIndex2Enum,System.Double)">
 <summary>
 Sets tool offset by adding the input value to the existing data at the specified diamond offset index, and axis index 
 </summary>
 <example>This example shows how to call AddToolOffset.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndex2Enum  	
 Dim intOffsetIndex As Integer 	
 Dim dblValue As Double 	
 Dim objTools As New CTools 
 objTools.AddToolOffset(intOffsetIndex, enAxisIndex, dblValue)	
 </code></example>
 <param name="intOffsetIndex">Offset index</param>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndex2Enum  enumeration.</param>
 <param name="dblValue">Offset value to be added</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - DIA. ZERO - OFFSET - X/Z
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CTools.SetNoseRCompensation(System.Int32,Okuma.CGDATAPI.Enumerations.AxisIndex2Enum,System.Double)">
 <summary>
 Sets nose radius compensation at the specified diamond offset index, and axis index 
 </summary>
 <example>This example shows how to call AddNoseRCompensation.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndex2Enum  	
 Dim intOffsetIndex As Integer 
 Dim dblValue As Double 	
 Dim objTools As New CTools 
 objTools.SetNoseRCompensation(intOffsetIndex, enAxisIndex, dblValue)	
 </code></example>
 <param name="intOffsetIndex">Offset index</param>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndex2Enum  enumeration.</param>
 <param name="dblValue">Offset value to be set</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - DIA. ZERO - NOSE-R COMP. - X/Z
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CTools.AddNoseRCompensation(System.Int32,Okuma.CGDATAPI.Enumerations.AxisIndex2Enum,System.Double)">
 <summary>
 Sets nose radius compensation by adding the input value to the existing data at the specified diamond offset index, and axis index 
 </summary>
 <example>This example shows how to call AddNoseRCompensation.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndex2Enum 
 Dim intOffsetIndex As Integer 
 Dim dblValue As Double 	
 Dim objTools As New CTools 
 objTools.AddNoseRCompensation(intOffsetIndex, enAxisIndex, dblValue)	
 </code></example>
 <param name="intOffsetIndex">Offset index</param>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndex2Enum  enumeration.</param>
 <param name="dblValue">Offset value to be added</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - DIA. ZERO - NOSE-R COMP. - X/Z
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CUserManagement">
 -----------------------------------------------------------------------------
 <summary>
 Class provides User Management information.
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CUserManagement.#ctor">
 <summary>
 Create an instance of this class
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CUserManagement.CheckUserErrorCode(Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum)">
 <summary>
 Check the returned error code from LogIn/LogOut function
 </summary>
 <example> This sample shows how to use the LogIn/LogOut and Home Screen() method.
 <code source="../ThincGrinderApp/CDataApi_Samples.vb" region="CUserManagement - Log In/Out Samples" language="vbnet" removeRegionMarkers="false" />
 </example>	
 <param name="enErrorCode">an error code returned by calling either LogIn/LogOut function</param>
 <exception cref="T:System.ApplicationException">Thrown when User API function cannot be performed</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CUserManagement.LogOut">
 <summary>
	<para>Perform the Log Out operation for the current user.</para>
	<para>Note: This operation requires that the machine must be in correct screen and modes to be valid.</para>
	<para>Operation Mode: Auto Mode and in Actual Position page</para>
	<para>Panel Mode: Run Mode</para>
	<para>NC HMI: Home Screen</para>
 </summary>
 <example> This sample shows how to use the LogIn/LogOut and Home Screen() method.
 <code source="../ThincGrinderApp/CDataApi_Samples.vb" region="CUserManagement - Log In/Out Samples" language="vbnet" removeRegionMarkers="false" />
 </example>			
 <returns>An Enumerations.UserApiErrorCodeEnum represents error codes.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 <para>
 The following specifications must be met in order to function on OSP-P300A:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>OSP Suite NC B spec [27,1] SUITE</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
 <Figure> 
 <para>	OSP SUITE HOME SCREEN - LOG OUT
 <img src="../media/HomeScreen.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CUserManagement.LogIn(System.String,System.String)">
 <summary>
	<para>Perform the Log In operation given User ID and password.</para>
	<para>Note: This operation requires that the machine must be in correct screen and modes to be valid.</para>
	<para>Operation Mode: Auto Mode</para>
	<para>Panel Mode: Run Mode</para>
	<para>NC HMI: Home Screen</para>
 </summary>
 <example> This sample shows how to use the LogIn/LogOut and Home Screen() method.
 <code source="../ThincGrinderApp/CDataApi_Samples.vb" region="CUserManagement - Log In/Out Samples" language="vbnet" removeRegionMarkers="false" />
 </example>		
 <returns>An Enumerations.UserApiErrorCodeEnum represents error codes.</returns>
 <param name="strUserID">User ID</param>
 <param name="strPassword">User password</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 <para>
 The following specifications must be met in order to function on OSP-P300A:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>OSP Suite NC B spec [27,1] SUITE</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
 <Figure> 
 <para>	OSP SUITE HOME SCREEN - LOG IN
 <img src="../media/HomeScreen.LogInAdmin.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CVariables">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functions to obtain machine variables information 
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CVariables.#ctor">
 <summary>
 Create an instance of this class.  
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CVariables.GetCommonVariableCount">
 <summary>
 Gets total common variables in the system
 </summary>
 <example>This example shows how to call GetCommonVariableCount method 
 <code lang="VB.NET">
 Dim intValue As Integer
 Dim objVariables As New CVariables
 intValue = objVariables.GetCommonVariableCount()	
 </code></example>
 <returns>A System.Integer value that represents the total common variables in the system</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CVariables.GetCommonVariableValue(System.Int32)">
 <summary>
 Gets common variable at the specified index
 </summary>
 <example>This example shows how to call GetCommonVariableValue method 
 <code lang="VB.NET">
 Dim intIndex As Integer = 1
 Dim dblValue As Double = 0.0
 Dim objVariables As New CVariables
 dblValue = objVariables.GetCommonVariableValue(intIndex)	
 </code></example>
 <param name="intIndex">variable index</param>
 <returns>
 <para>A System.Double that represents the common variable value.</para>
 </returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>PARAMETER - COMMON VARIABLE
 <para>
 <img src="../media/P300.Grinder.CommonVariable.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CVariables.GetCommonVariableValues(System.Int32,System.Int32)">
 <summary>
 Gets common variables at the specified indexes 
 </summary>
 <example>This example shows how to call GetCommonVariableValues method 
 <code lang="VB.NET">
 Dim strValues As New StringBuilder
 Dim dblValue As Double
 Dim arValues() As Double
 Dim intStartingIndex As Integer
 Dim intEndingIndex As Integer
 Dim intIndex As Integer
 arValues = m_objVariables.GetCommonVariableValues(intStartingIndex, intEndingIndex)
 intIndex = intStartingIndex
 For Each dblValue In arValues
      strValues.Append(String.Format("Index {0}: {1}" + vbCrLf, intIndex.ToString, dblValue))
      intIndex = intIndex + 1
 Next
 </code></example>
 <param name="intFromIndex">Starting common variable index </param>
 <param name="intToIndex">Ending common variable index </param>
 <returns>
 <para>A zero-based array of System.Double value.  Each array item will represent the common value for each common variable index </para>
 </returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>PARAMETER - COMMON VARIABLE
 <para>
 <img src="../media/P300.Grinder.CommonVariable.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CVariables.SetCommonVariableValue(System.Int32,System.Double)">
 <summary>
 Sets common variable at the specified index
 </summary>
 <example>This example shows how to call SetCommonVariableValue method 
 <code lang="VB.NET">
 Dim intIndex As Integer = 1
 Dim dblValue As Double = 0.0
 Dim objVariables As New CVariables
 objVariables.SetCommonVariableValue(intIndex, dlbValue)	
 </code></example>
 <param name="intIndex">Common variable index </param>
 <param name="dblValue">Common variable value to be set </param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>PARAMETER - COMMON VARIABLE
 <para>
 <img src="../media/P300.Grinder.CommonVariable.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CVariables.AddCommonVariableValue(System.Int32,System.Double)">
 <summary>
 Sets common variable by adding the input value to the existing data at the specified index 
 </summary>
 <example>This example shows how to call AddCommonVariableValue method 
 <code lang="VB.NET">
 Dim intIndex As Integer = 1
 Dim dblValue As Double = 0.0
 Dim objVariables As New CVariables
 objVariables.AddCommonVariableValue(intIndex, dlbValue)	
 </code></example>
 <param name="intIndex">Common variable index </param>
 <param name="dblValue">Common variable value to be added to </param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>PARAMETER - COMMON VARIABLE
 <para>
 <img src="../media/P300.Grinder.CommonVariable.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CWheel">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functions to obtain wheel information 
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.#ctor">
 <summary>
 Create an instance of this class.  
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetMaxWheels">
 <summary>
 Get total wheels available in the system.  Currently, the system can be configured to have up to 4 wheels.
 </summary>
 <example>This example shows how to use GetMaxWheels method
 <code lang="VB.NET">
 Dim intValue As Integer
 Dim objWheel As New CWheel
 intValue = objWheel.GetMaxWheels()	
 </code></example>
 <returns>A System.Integer that represents total wheels available in the system.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetMaxWheelData">
 <summary>
 Get total wheel data available 
 </summary>
 <example>This example shows how to use GetMaxWheelData method
 <code lang="VB.NET">
 Dim intValue As Integer
 Dim objWheel As New CWheel
 intValue = objWheel.GetMaxWheelData()	
 </code></example>
 <returns>A System.Integer that represents total wheel data available in the system.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
 <Figure>TOOL DATA - MANAGE TOOLS INFORMATION - WHL. DATA(ALL)
 <para>
 <img src="../media/P300.Grinder.WheelDataAll.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetWheelType(System.Int32)">
 <summary>
 Get wheel type given wheel data number
 </summary>
 <example>This example shows how to use GetWheelType
 <code lang="VB.NET">
 Dim enValue As WheelTypeEnum
 Dim objWheel As New CWheel
 intValue = objWheel.GetWheelType(intWheelDataNumber)	
 </code></example>
 <param name="intWheelDataNumber">wheel data number</param>
 <returns>An WheelTypeEnum value that represents the type of wheel</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
 <Figure>TOOL DATA - MANAGE TOOLS INFORMATION - WHL. DATA(ALL)
 <para>
 <img src="../media/P300.Grinder.WheelDataAll.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetWheelShape(System.Int32)">
 <summary>
 Get wheel shape given wheel data number
 </summary>
 <example>This example shows how to use GetWheelShape
 <code lang="VB.NET">
 Dim intValue As Integer
 Dim intWheelDataNumber As Integer
 Dim objWheel As New CWheel
 intValue = objWheel.GetWheelShape(intWheelDataNumber)	
 </code></example>
 <param name="intWheelDataNumber">wheel data number</param>
 <returns>A System.Integer that represents wheel shape of the wheel data number.</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
 <Figure>TOOL DATA - MANAGE TOOLS INFORMATION - WHL. DATA(INDIV) - SHAPE
 <para> Wheel shapes for Angle Wheel type
 <img src="../media/P300.Grinder.AngleWheel.WheelShape.jpg"/>
 </para>
 </Figure>
 <Figure>TOOL DATA - MANAGE TOOLS INFORMATION - WHL. DATA(INDIV) - SHAPE
 <para> Wheel shapes for Plane Wheel type
 <img src="../media/P300.Grinder.PlaneWheel.WheelShape.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetWheelData(System.Int32)">
 <summary>
 Gets wheel spindle data given wheel data number
 </summary>
 <example> This sample shows how to call the GetWheelData method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim objWheelData As CWheelData 
 objWheelData = objWheel.GetWheelData()	
 </code></example>
 <param name="intWheelDataNumber">wheel data number</param>
 <returns> An instance of CWheelData that has wheel data information</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>TOOL DATA - MANAGE TOOLS INFORMATION - WHL. DATA(INDIV) - WHEEL DATA 
 <para>
 <img src="../media/P300.Grinder.WheelData.Individual.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetWheelrateOverride">
 <summary>
 Gets wheel spindle rate override 
 </summary>
 <example> This sample shows how to call the GetWheelrateOverride method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intValue As Integer 
 intValue = objWheel.GetWheelrateOverride()	
 </code></example>
 <returns> System.Int32 value that represents wheel spindle rate override</returns>
 <DataUnit>
	Percentage
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>RUN - ACT POS (1/2) - WHEEL OVERRIDE
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActPos2.2.CycleSelect.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetCurrentWheelDataNumber">
 <summary>
 Gets current wheel data number 
 </summary>
 <example> This sample shows how to call the GetCurrentWheelDataNumber method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intValue As Integer 
 intValue = objWheel.GetCurrentWheelDataNumber()
 </code></example>
 <returns> System.Int32 value that represents current wheel data number</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WHEEL DATA NO.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetCommandWheelrate">
 <summary>
 Gets command wheel spindle rate 
 </summary>
 <example> This sample shows how to call the GetCommandWheelrate method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intValue As Integer 
 intValue = objWheel.GetCommandWheelrate()	
 </code></example>
 <returns> System.Int32 value that represents command wheel spindle rate </returns>
 <DataUnit>
	RPM
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WHEEL - REV.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetWheelLoad(Okuma.CGDATAPI.Enumerations.WheelLoadEnum)">
 <summary>
 Gets wheel spindle load given load type 
 </summary>
 <example> This sample shows how to call the GetWheelLoad method.
 <code lang="VB.NET">
 Dim dblValue As Double
 Dim objWheel As New CWheel 
 Dim enWheelLoad As WheelLoadEnum = WheelLoadEnum.MeasureLoad
 dblValue = objWheel.GetWheelLoad(enWheelLoad)	
 </code></example>
 <param name="enValue">type of load</param>
 <returns> System.Double value that represents load current supplied to the wheel spindle </returns>
 <DataUnit>
	Ampere 
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - LOAD ON/OFF - WHEEL LOAD MONI.
 <para>
 <img src="../media/P300.Grinder.Auto.ActualPosition.Load.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetWheelReferencePosition">
 <summary>
 Gets wheel reference position 
 </summary>
 <example> This sample shows how to call the GetWheelReferencePosition method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intValue As Integer 
 intValue = objWheel.GetWheelReferencePosition()	
 </code></example>
 <returns> System.Int32 value that represents wheel reference position</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WHEEL REF. POS.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetCurrentDiamondToolOffsetNumber">
 <summary>
 Gets current diamond tool offset number 
 </summary>
 <example> This sample shows how to call the GetCurrentDiamondToolOffsetNumber method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intValue As Integer 
 intValue = objWheel.GetCurrentDiamondToolOffsetNumber()	
 </code></example>
 <returns> System.Int32 value that represents current diamond tool number</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - DIA. NO.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetActualWheelrate">
 <summary>
 Gets actual wheel spindle rate 
 </summary>
 <example> This sample shows how to call the GetActualWheelrate method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intValue As Integer 
 intValue = objWheel.GetActualWheelrate()	
 </code></example>
 <returns> System.Int32 value that represents actual wheel spindle rate </returns>
 <DataUnit>
	RPM
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WHEEL - ACT REV.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetWheelSurfaceSpeed">
 <summary>
 Gets current wheel spindle surface speed 
 </summary>
 <example> This sample shows how to call the GetWheelSurfaceSpeed method.
 <code lang="VB.NET">
 Dim intValue As Integer 
 intValue = objSpindle.GetWheelSurfaceSpeed()	
 </code></example>
 <returns> System.Int32 value that represents current wheel spindle surface speed</returns>
 <DataUnit>
	It is m/min when data unit sets to mm. Otherwise, it is ft/min for inch unit. 
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - ACTUAL POSITION - VW
 <para>
 <img src="../media/P300.Grinder.AutoOperation.ActualPosition.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.GetWheelSurfaceSpeedSetup">
 <summary>
 Gets wheel surface speed setup value 
 </summary>
 <example> This sample shows how to call the GetWheelSurfaceSpeedSetup method.
 <code lang="VB.NET">
 Dim intValue As Integer 
 intValue = objSpindle.GetWheelSurfaceSpeedSetup()	
 </code></example>
 <returns> System.Int32 value that represents the setup value of wheel surface speed</returns>
 <DataUnit>
 <para>Current NC Data Unit.</para>
 <para>It is m/min if NC data unit sets to mm. Otherwise, it is ft/min for inch unit. </para>
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - SETUP - EFFECTIVE MODE/SRF SPD - WHEEL SRFC. SPD.
 <para>
 <img src="../media/P300.Grinder.AutoOperation.Setup.WheelSurfaceSpeed.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.SetDataUnit(Okuma.CGDATAPI.Enumerations.DataUnitEnum)">
 <summary>Sets current data unit for this class instance.</summary>
 <example> This example shows how to call the SetDataUnit method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 objWheel.SetDataUnit(DataUnitEnum.Unit_Inch)
 </code></example>
 <param name="enValue">Data Unit to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 If applicable, this setting is applied to data in this class instance only, not for NC Data Unit.
 For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, 
 then offset value will be converted to inch from NC offset data and vice versa.
 </remarks>
 <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. 
 <para>
 <img src="../media/P300.Grinder.Paramters.DataUnit.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.SetCurrentWheelDataNumber(System.Int32)">
 <summary>
 Sets current wheel data number by adding the input value to the existing data 
 </summary>
 <example> This sample shows how to call the SetCurrentWheelDataNumber method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intWheelDataNumber As Integer 
 objWheel.SetCurrentWheelDataNumber(intWheelDataNumber)	
 </code></example>
 <param name="intWheelDataNumber">wheel data number to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WHEEL DATA NO.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.AddCurrentWheelDataNumber(System.Int32)">
 <summary>
 Sets current wheel data number by adding the input value to the existing data 
 </summary>
 <example> This sample shows how to call the AddCurrentWheelDataNumber method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intWheelDataNumber As Integer 
 objWheel.AddCurrentWheelDataNumber(intWheelDataNumber)	
 </code></example>
 <param name="intWheelDataNumber">wheel data number to be added to current value</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WHEEL DATA NO.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.SetWheelReferencePosition(System.Int32)">
 <summary>
 Sets wheel reference position 
 </summary>
 <example> This sample shows how to call the SetWheelReferencePosition method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intValue As Integer 
 objWheel.SetWheelReferencePosition(intValue)
 </code></example>
 <param name="intPosition">wheel reference position to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WHEEL REF. POS.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para> Valid reference positions for Plane wheel type:</para>
 <para> Shape 1: Reference positions: 2, 4</para>
 <para> Shape 2: Reference positions: 2, 4, 6</para>
 <para> Shape 3: Reference positions: 2, 4, 8</para>
 <para> Shape 4: Reference positions: 2, 4, 6, 8</para>
 <para> Shape 5: Reference positions: 2, 4, 10</para>
 <para> Shape 6: Reference positions: 2, 4</para>
 <para> Valid reference positions for Angle wheel type:</para>
 <para> Shape 1: Reference positions: 2</para>
 <para> Shape 2: Reference positions: 2</para>
 <para> Shape 3: Reference positions: 2</para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.AddWheelReferencePosition(System.Int32)">
 <summary>
 Sets wheel reference position number by adding the input value to the existing data 
 </summary>
 <example> This sample shows how to call the AddWheelReferencePosition method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intValue As Integer 
 objWheel.AddWheelReferencePosition(intValue)	
 </code></example>
 <param name="intPosition">wheel reference position to be added to the current value</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WHEEL REF. POS.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.SetCurrentDiamondToolOffsetNumber(System.Int32)">
 <summary>
 Sets current diamond tool offset number 
 </summary>
 <example> This sample shows how to call the SetCurrentDiamondToolOffsetNumber method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intDiamondToolOffsetNumber As Integer 
 bjWheel.SetCurrentDiamondToolOffsetNumber(intDiamondToolOffsetNumber)	
 </code></example>
 <param name="intDiamondToolOffsetNumber">diamond tool number to be set.  Valid diamond tool offset number is 1-9.</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - DIA. NO.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.AddCurrentDiamondToolOffsetNumber(System.Int32)">
 <summary>
 Sets current diamond tool offset number by adding the input value to the existing data 
 </summary>
 <example> This sample shows how to call the AddCurrentDiamondToolOffsetNumber method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intDiamondToolOffsetNumber As Integer 
 objWheel.AddCurrentDiamondToolOffsetNumber(intDiamondToolOffsetNumber)
 </code></example>
 <param name="intDiamondToolOffsetNumber">diamond tool offset number to be added.  Valid diamond tool offset number is 1-9.</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - DIA. NO.
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.SetWheelSurfaceSpeedSetup(System.Int32)">
 <summary>
 Sets wheel surface speed setup 
 </summary>
 <example> This sample shows how to call the SetWheelSurfaceSpeedSetup method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intValue As Integer 
 objWheel.SetWheelSurfaceSpeedSetup(intValue)
 </code></example>
 <param name="intValue">value to be set</param>
 <DataUnit>
 <para>Current NC Data Unit</para>
 <para>It is m/min if NC data unit sets to mm. Otherwise, it is ft/min for inch unit. </para>
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - SETUP - EFFECTIVE MODE/SRF SPD - WHEEL SRFC. SPD.
 <para>
 <img src="../media/P300.Grinder.AutoOperation.Setup.WheelSurfaceSpeed.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWheel.AddWheelSurfaceSpeedSetup(System.Int32)">
 <summary>
 Sets wheel surface speed setup by adding the input to the existing data 
 </summary>
 <example> This sample shows how to call the AddWheelSurfaceSpeedSetup method.
 <code lang="VB.NET">
 Dim objWheel As New CWheel
 Dim intValue As Integer 
 objWheel.AddWheelSurfaceSpeedSetup(intValue)
 </code></example>
 <param name="intValue">value to be added</param>
 <DataUnit>
 <para>Current NC Data Unit.</para>
 <para>It is m/min if NC data unit sets to mm. Otherwise, it is ft/min for inch unit. </para>
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <Figure>AUTO OPERATION - SETUP - EFFECTIVE MODE/SRF SPD - WHEEL SRFC. SPD.
 <para>
 <img src="../media/P300.Grinder.AutoOperation.Setup.WheelSurfaceSpeed.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CWheelData">
 -----------------------------------------------------------------------------
 <summary>
 Class provides wheel data information
 </summary>
 <Figure>TOOL DATA - MANAGE TOOLS INFORMATION - WHL. DATA(INDIV) - WHEEL DATA 
 <para>
 <img src="../media/P300.Grinder.WheelData.Individual.jpg"/>
 </para>
 </Figure>
 -----------------------------------------------------------------------------
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.XOffset">
 <summary>
 X Offset
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value that represents an offset value for X axis</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.ZOffset">
 <summary>
 Z Offset
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value that represents an offset value for Z axis</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.OutSideDiameter">
 <summary>
 Outside diameter (OD)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.OutSideDiameterInitial">
 <summary>
 Outside diameter Initial (OD)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.InsideDiameter">
 <summary>
 Inside diameter (ID)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.WidthLeft">
 <summary>
 Width Left (WL)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.WidthRight">
 <summary>
 Width Right (WR)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.WidthPeriphery">
 <summary>
 Width Periphery (WP)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.WidthSideFace">
 <summary>
 Width Side Face (WS)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.LengthSideFace">
 <summary>
 Length, Side Face (TLS)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.LengthPeriphery">
 <summary>
 Length, Periphery (TLP)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.RadiusLeft">
 <summary>
 Radius Left (RL)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.RadiusRight">
 <summary>
 Radius Right (RR)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.TaperLengthLeft">
 <summary>
 Taper Length Left (TLL)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.TaperLengthRight">
 <summary>
 Taper Length Right (TLR)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.TaperAngleLeft">
 <summary>
 Taper Angle Left (TDL)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Angular Degree </DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.TaperAngleRight">
 <summary>
 Taper Angle Left (TDR)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Angular Degree </DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.TaperAnglePeriphery">
 <summary>
 Taper Angle Periphery (TDP)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Angular Degree </DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.SlopeAngleLeft">
 <summary>
 Slope Angle Left (FDL)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Angular Degree </DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.SlopeAngleRight">
 <summary>
 Slope Angle Right (FDR)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Angular Degree </DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.TiltAngle">
 <summary>
 Tilt Angle (WA)
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Angular Degree </DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.MaximumOperatingSpeed">
 <summary>
 Maximum Operating Speed
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>
	It is m/min when data unit sets to mm. Otherwise, it is ft/min for inch unit. 
 </DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.WidthLeftInitial">
 <summary>
 Width Left Initial value
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.WidthRightInitial">
 <summary>
 Width Right Initial value
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.WidthSideFaceInitial">
 <summary>
 Width Side Face Initial value
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.WidthPeripheryInitial">
 <summary>
 Width Periphery Initial setting value
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.OutSideDiameterChange">
 <summary>
 Outside Diameter Change value
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.WidthLeftChange">
 <summary>
 Width Left Change value
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.WidthRightChange">
 <summary>
 Width Right Change value
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.OutSideDiameterForeCast">
 <summary>
 Outside Diameter Forecast value
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.WidthLeftForeCast">
 <summary>
 Width Left Forecast value
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="P:Okuma.CGDATAPI.DataAPI.CWheelData.WidthRightForeCast">
 <summary>
 Width Right Forecast value
 </summary>
 <value>value to be set for this instance only. Not writtable to machine data</value>
 <returns>A System.Double value</returns>
 <DataUnit>Default unit is in mm.  Other unit can be set by calling SetDataUnit method</DataUnit>
</member>
<member name="T:Okuma.CGDATAPI.DataAPI.CWorkpiece">
 -----------------------------------------------------------------------------
 <summary>
 Class provides functions to obtain workpiece information 
 </summary>
 -----------------------------------------------------------------------------
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.#ctor">
 <summary>
 Create an instance of this class.  
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.GetStyleForAxisIndexEnum(Okuma.CGDATAPI.Enumerations.AxisIndexEnum)">
 <summary>
 get style for axis
 </summary>
 <remarks></remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.GetZeroOffset(Okuma.CGDATAPI.Enumerations.AxisIndexEnum)">
 <summary>
 Gets workpiece zero offset at the specified axis index 
 </summary>
 <example>This example shows how to call GetZeroOffset.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum 	
 Dim dblValue As Double 	
 Dim objWorkpiece As New CWorkpiece
 dblValue= objWorkpiece.GetZeroOffset(enAxisIndex)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum enumeration.</param>
 <returns>A System.Double that represents the zero offset value</returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO OFFSET - X
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroOffset.X.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO OFFSET - Z
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroOffset.Z.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.GetZeroShift(Okuma.CGDATAPI.Enumerations.AxisIndexEnum)">
 <summary>
 Gets workpiece zero shift offset at the specified axis index 
 </summary>
 <example>This example shows how to call GetZeroShift.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum 	
 Dim dblValue As Double 	
 Dim objWorkpiece As New CWorkpiece
 dblValue= objWorkpiece.GetZeroShift(enAxisIndex)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum enumeration.</param>
 <returns>A System.Double that represents the zero shift offset value</returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO SHIFT - X
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroShift.X.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO SHIFT - Z
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroShift.Z.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.GetWorkpieceCounter(Okuma.CGDATAPI.Enumerations.WorkpieceCounterEnum)">
 <summary>
 Gets workpiece counter for the specified counter type
 </summary>
 <example> This example shows how to call GetWorkpieceCounter() method .
 <code lang="VB.NET">
 Dim intValue as Int32
 Dim enValue as WorkpieceCounterEnum 
 intValue = objMachine.GetWorkpieceCounter(enValue)
 </code></example>
 <param name="enValue">Hour meter type</param>
 <returns>A System.Int32 value that represents the count of workpiece</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - NC OPR. MONITOR - WORK COUNTER - COUNT
 <para>
 <img src="../media/P300.Grinder.WorkCounter.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>Work Counter: NC spec code [19,0]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.GetWorkpieceCounterSet(Okuma.CGDATAPI.Enumerations.WorkpieceCounterEnum)">
 <summary>
 Gets workpiece counter SET for the specified counter type
 </summary>
 <example> This example shows how to call GetWorkpieceCounterSet() method .
 <code lang="VB.NET">
 Dim intValue as Int32 
 Dim enValue as WorkpieceCounterEnum 
 intValue = objMachine.GetWorkpieceCounterSet(enValue)
 </code></example>
 <param name="enValue">Hour meter type</param>
 <returns>A System.Int32 value that represents the count of workpiece SET</returns>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - NC OPR. MONITOR - WORK COUNTER - SET
 <para>
 <img src="../media/P300.Grinder.WorkCounter.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>Work Counter: NC spec code [19,0]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.GetWorkLocatorOffsetNegativeSideEndFace(Okuma.CGDATAPI.Enumerations.AxisIndex2Enum)">
 <summary>
 Gets workpiece locator offset given axis index on negative side end face . 
 </summary>
 <example> This example shows how to call GetWorkLocatorOffsetNegativeSideEndFace() method .
 <code lang="VB.NET">
 Dim dblValue As Double 
 Dim enAxisIndex as AxisIndex2Enum  
 dblValue = objMachine.GetWorkLocatorOffsetNegativeSideEndFace(enAxisIndex)
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndex2Enum  enumeration.</param>
 <returns>A System.Double value that represents the offset value of Work Locator on negative side end face</returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - X/-SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.NegativeX.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - Z/-SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.NegativeZ.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.GetWorkLocatorOffsetPositiveSideEndFace(Okuma.CGDATAPI.Enumerations.AxisIndex2Enum)">
 <summary>
 Gets workpiece locator offset given axis index on positive side end face . 
 </summary>
 <example> This example shows how to call GetWorkLocatorOffsetPositiveSideEndFace() method .
 <code lang="VB.NET">
 Dim dblValue As Double
 Dim enAxisIndex as AxisIndex2Enum
 dblValue = objMachine.GetWorkLocatorOffsetPositiveSideEndFace(enAxisIndex)
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndex2Enum  enumeration.</param>
 <returns>A System.Double value that represents the offset value of Work Locator on positive side end face</returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - X/+SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.PositiveX.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - Z/+SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.PositiveZ.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.GetWorkpieceMasterWork(Okuma.CGDATAPI.Enumerations.AxisIndexEnum)">
 <summary>
 Gets workpiece master work given axis index . 
 </summary>
 <example> This example shows how to call GetWorkpieceMasterWork() method .
 <code lang="VB.NET">
 Dim dblValue As Double
 Dim enAxisIndex as AxisIndexEnum
 dblValue = objMachine.GetWorkpieceMasterWork(enAxisIndex)
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum enumeration.</param>
 <returns>A System.Double value that represents the dimension value of the workpiece</returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK OFFSET - MASTER WORK - X/Z/B
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.GetWorkpieceCompensationMeasure(Okuma.CGDATAPI.Enumerations.AxisIndexEnum)">
 <summary>
 Gets workpiece compensation measurement given axis index . 
 </summary>
 <example> This example shows how to call GetWorkpieceCompensationMeasure() method .
 <code lang="VB.NET">
 Dim dblValue As Double 
 Dim enAxisIndex as AxisIndexEnum 
 dblValue = objMachine.GetWorkpieceCompensationMeasure(enAxisIndex)
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum enumeration.</param>
 <returns>A System.Double value that represents the compensation measurement of the workpiece</returns>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK OFFSET - COMP. MES. - X/Z/B
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.SetDataUnit(Okuma.CGDATAPI.Enumerations.DataUnitEnum)">
 <summary>Sets current data unit for this class instance.</summary>
 <example> This example shows how to call the SetDataUnit method.
 <code lang="VB.NET">
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.SetDataUnit(DataUnitEnum.Unit_Inch)
 </code></example>
 <param name="enValue">Data Unit to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
 <remarks>
 If applicable, this setting is applied to data in this class instance only, not for NC Data Unit.
 For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, 
 then offset value will be converted to inch from NC offset data and vice versa.
 </remarks>
 <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. 
 <para>
 <img src="../media/P300.Grinder.Paramters.DataUnit.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.SetZeroOffset(Okuma.CGDATAPI.Enumerations.AxisIndexEnum,System.Double)">
 <summary>
 Sets workpiece zero offset at the specified axis index 
 </summary>
 <example>This example shows how to call SetZeroOffset.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum 
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.SetZeroOffset(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum  enumeration.</param>
 <param name="dblValue">Offset value to be set</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO OFFSET - X
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroOffset.X.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO OFFSET - Z
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroOffset.Z.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.AddZeroOffset(Okuma.CGDATAPI.Enumerations.AxisIndexEnum,System.Double)">
 <summary>
 Sets workpiece zero offset by adding the input value to the existing data at the specified axis index
 </summary>
 <example>This example shows how to call AddZeroOffset.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum  
 Dim dblValue As Double 	
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.AddZeroOffset(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum  enumeration.</param>
 <param name="dblValue">Offset value to be added</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO OFFSET - X
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroOffset.X.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO OFFSET - Z
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroOffset.Z.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.SetZeroShift(Okuma.CGDATAPI.Enumerations.AxisIndexEnum,System.Double)">
 <summary>
 Sets workpiece zero shift offset at the specified axis index 
 </summary>
 <example>This example shows how to call SetZeroShift.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum  	
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.SetZeroShift(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum  enumeration.</param>
 <param name="dblValue">Offset value to be set</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO SHIFT - X
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroShift.X.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO SHIFT - Z
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroShift.Z.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.AddZeroShift(Okuma.CGDATAPI.Enumerations.AxisIndexEnum,System.Double)">
 <summary>
 Sets workpiece zero shift offset by adding the input value to the existing data at the specified axis index 
 </summary>
 <example>This example shows how to call AddZeroShift.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum  	
 Dim dblValue As Double 	
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.AddZeroShift(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum  enumeration.</param>
 <param name="dblValue">Offset value to be added</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO SHIFT - X
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroShift.X.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO SHIFT - Z
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroShift.Z.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.CalZeroShift(Okuma.CGDATAPI.Enumerations.AxisIndexEnum,System.Double)">
 <summary>
 Determine the workpiece zero shift offset based on the calculation on the input value and actual position at the specified axis index 
 </summary>
 <example>This example shows how to call CalZeroShift.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum  	
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.CalZeroShift(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum  enumeration.</param>
 <param name="dblValue">Offset value to be calculated from</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO SHIFT - X
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroShift.X.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO SHIFT - Z
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroShift.Z.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.CalZeroOffset(Okuma.CGDATAPI.Enumerations.AxisIndexEnum,System.Double)">
 <summary>
 Determine the workpiece zero offset based on the calculation on the input value and actual position at the specified axis index 
 </summary>
 <example>This example shows how to call CalZeroOffset.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum  	
 Dim dblValue As Double 	
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.CalZeroOffset(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum  enumeration.</param>
 <param name="dblValue">Offset value to be calculated from</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO OFFSET - X
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroOffset.X.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - ZERO OFFSET - Z
 <para>
 <img src="../media/P300.Grinder.WorkOffset.ZeroOffset.Z.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.SetWorkpieceCounter(Okuma.CGDATAPI.Enumerations.WorkpieceCounterEnum,System.Int32)">
 <summary>
 Sets workpiece counter count for the specified workpiece counter type
 </summary>
 <example> This example shows how to call SetWorkpieceCounter() method .
 <code lang="VB.NET">
 Dim intValue as Int32 
 Dim enValue as WorkpieceCounterEnum 
 objMachine.SetWorkpieceCounter(enValue, intValue) 
 </code></example>
 <param name="enValue">workpiece counter type</param>
 <param name="intValue">value to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - NC OPR. MONITOR - WORK COUNTER - COUNT
 <para>
 <img src="../media/P300.Grinder.WorkCounter.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>Work Counter: NC spec code [19,0]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.AddWorkpieceCounter(Okuma.CGDATAPI.Enumerations.WorkpieceCounterEnum,System.Int32)">
 <summary>
 Sets workpiece counter count by adding the input value to the current value for the specified workpiece counter type 
 </summary>
 <example> This example shows how to call AddWorkpieceCounter() method .
 <code lang="VB.NET">
 Dim intValue as Int32
 Dim enValue as WorkpieceCounterEnum 
 objMachine.AddWorkpieceCounter(enValue, intValue)
 </code></example>
 <param name="enValue">workpiece counter type</param>
 <param name="intValue">value to be added</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - NC OPR. MONITOR - WORK COUNTER - COUNT
 <para>
 <img src="../media/P300.Grinder.WorkCounter.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>Work Counter: NC spec code [19,0]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.SetWorkpieceCounterSet(Okuma.CGDATAPI.Enumerations.WorkpieceCounterEnum,System.Int32)">
 <summary>
 Sets workpiece counter SET for the specified workpiece counter type
 </summary>
 <example> This example shows how to call SetWorkpieceCounterSet() method .
 <code lang="VB.NET">
 Dim intValue as Int32 
 Dim enValue as WorkpieceCounterEnum 
 objMachine.SetWorkpieceCounterSet(enValue, intValue)
 </code></example>
 <param name="enValue">workpiece counter type</param>
 <param name="intValue">value to be set</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - NC OPR. MONITOR - WORK COUNTER - SET
 <para>
 <img src="../media/P300.Grinder.WorkCounter.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>Work Counter: NC spec code [19,0]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.AddWorkpieceCounterSet(Okuma.CGDATAPI.Enumerations.WorkpieceCounterEnum,System.Int32)">
 <summary>
 Sets workpiece counter SET by adding the input value to the current value for the specified workpiece counter type
 </summary>
 <example> This example shows how to call AddWorkpieceCounterSet() method .
 <code lang="VB.NET">
 Dim intValue as Int32 
 Dim enValue as WorkpieceCounterEnum
 objMachine.AddWorkpieceCounterSet(enValue, intValue)
 </code></example>
 <param name="enValue">workpiece counter type</param>
 <param name="intValue">value to be added</param>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION -  ACT POS (2/2) - NC OPR. MONITOR - WORK COUNTER - SET
 <para>
 <img src="../media/P300.Grinder.WorkCounter.jpg"/>
 </para>
 </Figure>
 <remarks>
 <para>
 One of the following specifications must be met in order to function:
 <list type="table">
 <listheader>
 <term>Specification</term>
 <description>Valid/Invalid</description>
 </listheader>
 <item>
 <term>Work Counter: NC spec code [19,0]</term>
 <description>Valid</description>
 </item>
 </list>
 </para>
 </remarks>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.SetWorkLocatorOffsetNegativeSideEndFace(Okuma.CGDATAPI.Enumerations.AxisIndex2Enum,System.Double)">
 <summary>
 Sets work locator offset at the specified axis index on negative side end face 
 </summary>
 <example>This example shows how to call SetWorkLocatorOffsetNegativeSideEndFace.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndex2Enum 
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.SetWorkLocatorOffsetNegativeSideEndFace(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndex2Enum  enumeration.</param>
 <param name="dblValue">Offset value to be set</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - X/-SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.NegativeX.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - Z/-SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.NegativeZ.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.AddWorkLocatorOffsetNegativeSideEndFace(Okuma.CGDATAPI.Enumerations.AxisIndex2Enum,System.Double)">
 <summary>
 Sets work locator offset by adding the input value to the existing value at the specified axis index on negative side end face 
 </summary>
 <example>This example shows how to call AddWorkLocatorOffsetNegativeSideEndFace.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndex2Enum 
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.AddWorkLocatorOffsetNegativeSideEndFace(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndex2Enum  enumeration.</param>
 <param name="dblValue">Offset value to be added</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - X/-SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.NegativeX.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - Z/-SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.NegativeZ.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.SetWorkLocatorOffsetPositiveSideEndFace(Okuma.CGDATAPI.Enumerations.AxisIndex2Enum,System.Double)">
 <summary>
 Sets work locator offset at the specified axis index on positive side end face 
 </summary>
 <example>This example shows how to call SetWorkLocatorOffsetPositiveSideEndFace.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndex2Enum 
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.SetWorkLocatorOffsetPositiveSideEndFace(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndex2Enum  enumeration.</param>
 <param name="dblValue">Offset value to be set</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - X/+SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.PositiveX.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - Z/+SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.PositiveZ.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.AddWorkLocatorOffsetPositiveSideEndFace(Okuma.CGDATAPI.Enumerations.AxisIndex2Enum,System.Double)">
 <summary>
 Sets work locator offset by adding the input value to the existing value at the specified axis index on positve side end face 
 </summary>
 <example>This example shows how to call AddWorkLocatorOffsetPositiveSideEndFace.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndex2Enum 
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.AddWorkLocatorOffsetPositiveSideEndFace(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndex2Enum  enumeration.</param>
 <param name="dblValue">Offset value to be added</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - X/+SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.PositiveX.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - Z/+SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.PositiveZ.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.SetWorkpieceMasterWork(Okuma.CGDATAPI.Enumerations.AxisIndexEnum,System.Double)">
 <summary>
 Sets workpiece master work at the specified axis index 
 </summary>
 <example>This example shows how to call SetWorkpieceMasterWork
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.SetWorkpieceMasterWork(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum  enumeration.</param>
 <param name="dblValue">value to be set</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - MASTER WORK - X/Z/B
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.AddWorkpieceMasterWork(Okuma.CGDATAPI.Enumerations.AxisIndexEnum,System.Double)">
 <summary>
 Sets workpiece master work by adding the input value to the existing value at the specified axis index 
 </summary>
 <example>This example shows how to call AddWorkpieceMasterWork
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.AddWorkpieceMasterWork(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum  enumeration.</param>
 <param name="dblValue">value to be added</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - MASTER WORK - X/Z/B
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.SetWorkpieceCompensationMeasure(Okuma.CGDATAPI.Enumerations.AxisIndexEnum,System.Double)">
 <summary>
 Sets workpiece compensation measure at the specified axis index 
 </summary>
 <example>This example shows how to call SetWorkpieceCompensationMeasure
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.SetWorkpieceCompensationMeasure(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum  enumeration.</param>
 <param name="dblValue">value to be set</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - COMP. MES. - X/Z/B
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.AddWorkpieceCompensationMeasure(Okuma.CGDATAPI.Enumerations.AxisIndexEnum,System.Double)">
 <summary>
 Sets workpiece compensation measure by adding the input value to the existing value at the specified axis index 
 </summary>
 <example>This example shows how to call AddWorkpieceCompensationMeasure
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndexEnum
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.AddWorkpieceCompensationMeasure(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndexEnum  enumeration.</param>
 <param name="dblValue">value to be set</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK ZERO - COMP. MES. - X/Z/B
 <para>
 <img src="../media/P300.Grinder.MDI.Setup.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.CalWorkLocatorOffsetNegativeSideEndFace(Okuma.CGDATAPI.Enumerations.AxisIndex2Enum,System.Double)">
 <summary>
 Determine the work locator offset based on the calculation on the input value and actual position at the specified axis index on the negative side end face 
 </summary>
 <example>This example shows how to call CalWorkLocatorOffsetNegativeSideEndFace.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndex2Enum 
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.CalWorkLocatorOffsetNegativeSideEndFace(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndex2Enum  enumeration.</param>
 <param name="dblValue">Offset value to be calculated from</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - X/-SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.NegativeX.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - Z/-SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.NegativeZ.jpg"/>
 </para>
 </Figure>
</member>
<member name="M:Okuma.CGDATAPI.DataAPI.CWorkpiece.CalWorkLocatorOffsetPositiveSideEndFace(Okuma.CGDATAPI.Enumerations.AxisIndex2Enum,System.Double)">
 <summary>
 Determine the work locator offset based on the calculation on the input value and actual position at the specified axis index on the positive side end face 
 </summary>
 <example>This example shows how to call CalWorkLocatorOffsetPositiveSideEndFace.
 <code lang="VB.NET">
 Dim enAxisIndex As AxisIndex2Enum 
 Dim dblValue As Double 
 Dim objWorkpiece As New CWorkpiece
 objWorkpiece.CalWorkLocatorOffsetPositiveSideEndFace(enAxisIndex, dblValue)	
 </code></example>
 <param name="enAxisIndex">Axis index.  Values of parameter come from the AxisIndex2Enum  enumeration.</param>
 <param name="dblValue">Offset value to be calculated from</param>
 <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method.
 </DataUnit>
 <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
 <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current System.</exception>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - X/+SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.PositiveX.jpg"/>
 </para>
 </Figure>
 <Figure>AUTO OPERATION - RUN - SETUP - WORK LOCATOR OFFSET - LOCATOR OFFSET - Z/+SIDE END FACE
 <para>
 <img src="../media/P300.Grinder.WorkLocator.PositiveZ.jpg"/>
 </para>
 </Figure>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.PanelModeEnum">
 <summary>
 Represents machine navigation panel mode 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.PanelModeEnum.Auto">
 <summary>
 Operation mode - Auto
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.PanelModeEnum.MDI">
 <summary>
 Operation mode - MDI
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.PanelModeEnum.Manual">
 <summary>
 Operation mode - Manual
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.PanelModeEnum.ProgramOperation">
 <summary>
 Program operation mode - In this mode program and data files can be edited, input/output, displayed, and deleted
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.PanelModeEnum.ParameterSetup">
 <summary>
 Parameter set up mode - In this mode the parameter data necessary for numerical control can be set, changed, an displayed.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.PanelModeEnum.ToolDataSetup">
 <summary>
 Too Data set up mode - In this mode the tool offset data, nose radius compensation data, tool shape data, and load monitor
 data can be set, changed, or displayed
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.PanelModeEnum.MacMan">
 <summary>
 MacMan Mode - Machining Maintenance screen
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.LoggingLevelEnum">
 <summary>
 Represents different levels of logging.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.LoggingLevelEnum.logException">
 <summary>
 Level 1 – All exceptions will be logged by the system. (not settable). 
 It is highly not recommended to have polling routines that produce exceptions for any purposes. 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.LoggingLevelEnum.logSet">
 <summary>
 Level 2 – Level 1 + all write functions to the API (default value for all class instances)
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.LoggingLevelEnum.logGet">
 <summary>
 Level 3 – Level 2 + all read functions. 
 Setting the level to 3 or greater will force logging of ALL calls to the API to facilitate debugging of your application. 
 This function is CPU intensive and should only be used for debugging purposes. 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.LoggingLevelEnum.logAll">
 <summary>
 Level 4 – all logging events regardless of level.
 Setting the level to 3 or greater will force logging of ALL calls to the API to facilitate debugging of your application. 
 This function is CPU intensive and should only be used for debugging purposes. 
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.MCodesEnum">
 <summary>
 Represents displayed line of M Codes
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.MCodesEnum.MCodes_Line1">
 <summary>
 Line 1
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.MCodesEnum.MCodes_Line2">
 <summary>
 Line 2
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.MCodesEnum.MCodes_Line3">
 <summary>
 Line 3
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.IOAddressSizeEnum">
 <summary>
 Represent IO Address size
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.IOAddressSizeEnum.None">
 <summary>
 None
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.IOAddressSizeEnum.Bit">
 <summary>
 Bit 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.IOAddressSizeEnum.Word">
 <summary>
 Word
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.IOAddressSizeEnum.DWord">
 <summary>
 Double Word 
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.WheelLoadEnum">
 <summary>
 Represents different types of wheel load
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WheelLoadEnum.MeasureLoad">
 <summary>
 Measure Load
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WheelLoadEnum.EffectLoad">
  <summary>
 Effect Load
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WheelLoadEnum.GAPLoad">
  <summary>
 GAP Load
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WheelLoadEnum.OLLoad">
  <summary>
 OL Load
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WheelLoadEnum.PPCLoad">
  <summary>
 PPC Load
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.WheelTypeEnum">
 <summary>
 Represents different types of wheel
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WheelTypeEnum.InternalGrindingWheel">
 <summary>
 Internal Grinding Wheel
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WheelTypeEnum.PlaneWheel">
  <summary>
 Plane Wheel
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WheelTypeEnum.AngleWheel">
  <summary>
 Angle Wheel
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.AxisCoordinateEnum">
 <summary>
 Represents the axis coordinate system 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.AxisCoordinateEnum.WorkCoordinate">
 <summary>
 Work Coordinate
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.AxisCoordinateEnum.Wheel_Coordinate">
  <summary>
 Wheel Coordinate 
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.WheelAxisIndexEnum">
 <summary>
 Represents wheel controlled axes set applied to functions if applicable
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WheelAxisIndexEnum.U_Axis">
 <summary>
 U Axis 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WheelAxisIndexEnum.W_Axis">
  <summary>
 W Axis 
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.WorkpieceCounterEnum">
 <summary>
 Represents different workpiece counter
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WorkpieceCounterEnum.CounterA">
 <summary>
 Work counter A
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WorkpieceCounterEnum.CounterB">
 <summary>
 Work counter B
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WorkpieceCounterEnum.CounterC">
 <summary>
 Work counter C
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.WorkpieceCounterEnum.CounterD">
 <summary>
 Work counter D
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.HourMeterEnum">
 <summary>
 Represents different hour meter types counter
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.HourMeterEnum.PowerOnTime">
 <summary>
 Power On Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.HourMeterEnum.NCRunningTime">
 <summary>
 NC Running Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.HourMeterEnum.SpindleRevolutionTime">
 <summary>
 Spindle Revolution Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.HourMeterEnum.GrindingTime">
 <summary>
 Grinding Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.HourMeterEnum.DressingTime">
 <summary>
 Dressing Time
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.ApiTypeEnum">
 <summary>
 Type of API to be used by the system
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ApiTypeEnum.THINC_API">
 <summary>
 <para> Support THINC-API only  </para>
 <para> B Spec Code: [22,0]  </para>
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ApiTypeEnum.OSP_API">
 <summary>
 <para> Support OSP-API only   </para>
 <para> B Spec Code: [22,1]  </para>
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ApiTypeEnum.ALL_API">
 <summary>
 <para> Support THINC-API</para>
 <para> B Spec Code: [22,0]  </para>
 <para> Support OSP-API</para>
 <para> B Spec Code: [22,1]  </para>
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.ProgramCycleEnum">
 <summary>
 Represents selection of program cycle
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ProgramCycleEnum.GrindingCycle">
 <summary>
 Grinding Cycle (G) 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ProgramCycleEnum.DressingCycle">
 <summary>
 Wheel Dressing Cycle (A2)
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ProgramCycleEnum.TruingCycle">
 <summary>
 Wheel Truing Cycle (A2)
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.ProgramRunningStateEnum">
 <summary>
 Represents program running state
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ProgramRunningStateEnum.NotRun">
 <summary>
 Program is not in running state.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ProgramRunningStateEnum.Executing">
 <summary>
 Program is in running state.  Once the program has been executed it will remain 
 in the this state until the program is stopped or reset.
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum">
 <summary>
 Represents different sets of data for MacMan operating report 
 </summary>
 <remarks></remarks>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum.OperatingTime">
 <summary>
 Operating Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum.RunningTime">
 <summary>
 Running Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum.CuttingTime">
 <summary>
 Cutting Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum.NonOperatingTime">
 <summary>
 Non Operating Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum.InProcessSetupTime">
 <summary>
 In Process Set-Up Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum.NoOperatorTime">
 <summary>
 No Operator Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum.PartWaitingTime">
 <summary>
 Part Waiting Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum.MaintenanceTime">
 <summary>
 Maintenance Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum.OtherTime">
 <summary>
 Other Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum.SpindleRunTime">
 <summary>
 Spindle Run Time 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum.ExternalInputTime">
 <summary>
 External Input Time
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperatingReportDataEnum.AlarmOnTime">
 <summary>
 Alarm On Time
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.FeedrateTypeEnum">
  <summary>
 Represents type of feed rate
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.FeedrateTypeEnum.PerMinute">
 <summary>
 Per minute (Fm)
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.FeedrateTypeEnum.PerRevolution">
 <summary>
 Per revolution (Fr)
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.AxisIndex2Enum">
 <summary>
 Represents controlled axes set applied to functions if applicable
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.AxisIndex2Enum.X_Axis">
 <summary>
 X Axis 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.AxisIndex2Enum.Z_Axis">
  <summary>
 Z Axis 
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.LoaderAxisIndexEnum">
 <summary>
 Represents controlled axes set applied to functions if applicable
 <para>Note: The availability of each axis depends on sub system/machine model.</para>
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.LoaderAxisIndexEnum.X_Axis">
 <summary>
 X Axis 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.LoaderAxisIndexEnum.Y_Axis">
  <summary>
 Y Axis 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.LoaderAxisIndexEnum.Z_Axis">
  <summary>
 Z Axis 
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.AxisIndexEnum">
 <summary>
 Represents controlled axes set applied to functions if applicable
 <para>Note: The availability of each axis depends on sub system/machine model.</para>
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.AxisIndexEnum.X_Axis">
 <summary>
 X Axis 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.AxisIndexEnum.Z_Axis">
  <summary>
 Z Axis 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.AxisIndexEnum.BA_Axis">
 <summary>
 B Axis.  It is available when NC-B spec [11, 6] is active
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.IOTypeEnum">
 <summary>
 Represents types of I/O variables
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.IOTypeEnum.None">
 <summary>
 Unknown I/O variable type
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.IOTypeEnum.Input">
 <summary>
 Input I/O variable type
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.IOTypeEnum.Output">
 <summary>
 Output I/O variable type
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.BitsEnum">
  <summary>
 Represents 16 bits of a WORD.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_0">
 <summary>
  Bit 0 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_1">
 <summary>
 Bit 1 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_2">
 <summary>
 Bit 2 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_3">
 <summary>
 Bit 3 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_4">
 <summary>
 Bit 4
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_5">
 <summary>
 Bit 5 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_6">
 <summary>
 Bit 6 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_7">
 <summary>
 Bit 7 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_8">
 <summary>
  Bit 8 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_9">
 <summary>
 Bit 9 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_10">
 <summary>
 Bit 10 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_11">
 <summary>
Bit 11 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_12">
 <summary>
 Bit 12 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_13">
 <summary>
 Bit 13 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_14">
 <summary>
 Bit 14 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.BitsEnum.Bit_15">
 <summary>
 Bit 15 
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.ExecutionModeEnum">
  <summary>
 Represents current machine mode.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ExecutionModeEnum.NotRun">
 <summary>
 Not run
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ExecutionModeEnum.Running">
 <summary>
 Running
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.OperationModeEnum">
 <summary>
 Represents 1 of the 3 operation modes
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperationModeEnum.Auto">
 <summary>
 Auto mode
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperationModeEnum.MDI">
 <summary>
 MDI mode
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OperationModeEnum.Manual">
  <summary>
 Manual mode
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.ReportPeriodEnum">
 <summary>
 Represents report period type
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ReportPeriodEnum.TodayReport">
 <summary>
 Today report
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ReportPeriodEnum.PreviousDayReport">
 <summary>
 Previous day report
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ReportPeriodEnum.PeriodReport">
 <summary>
 Period report
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.OnOffStateEnum">
 <summary>
 Represents an ON/OFF state
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OnOffStateEnum.OFF">
 <summary>
 Off State
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.OnOffStateEnum.ON">
 <summary>
 ON State
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.NCStatusEnum">
 <summary>
 Represents status indicator lamps are displayed at the top of the screen
 </summary>
 <Figure> Conditions for ON/Blinking states of status indicating lamps
 <para>
 <img src="../media/Grinder.NCStatus.jpg"/>
 </para>
 </Figure>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.NCStatusEnum.Alarm">
 <summary>
 This lamp goes on when the machine malfunctions or an incorrect program is
 input. It also goes on in the event of a computer fault.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.NCStatusEnum.Limit">
 <summary>
 This lamp goes on when the X-axis or Z-axis reaches its variable limit position.
 With the two-saddle specification, it goes on if any of the XA-, ZA-, XB-, and ZBaxes
 reach their limit.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.NCStatusEnum.SlideHold">
 <summary>
 This lamp goes on when the [SLIDE HOLD] button is pressed in the automatic or
 MDI mode.
 With a two-saddle specification machine, if the machine is operating in the
 automatic mode with the single block function turned on, the lamp also goes on
 when the operations in one block have been completed at one saddle and the
 other saddle has entered the slide hold state.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.NCStatusEnum.STM">
 <summary>
 This lamp is lit while auxiliary function operations other than axis movements -
 such as spindle gear range change, tool change, and spindle rotation - are being
 executed.
 When an axis movement command and S, T, or M command are designated in
 the same block, the axis movement command is executed after the completion of
 the S, T, or M operation.
 If a spindle gear range command, spindle speed command, or tool number
 command is changed using the manual intervention function (called out by
 pressing the [MID AUTO MANUAL] key), the S.T.M. indicating lamp blinks.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.NCStatusEnum.Run">
 <summary>
	This RUN lamp is lit while the machine is actually operating in the automatic or MDI
 mode.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.NCStatusEnum.ProgramStop">
 <summary>
 This lamp is lit during a program stop (M00) or optional stop (M01) in the
 automatic or MDI mode.
 It blinks during dwell (G04).
 <para>Notes: If a program is current executing and Slide Hold is activated then the RUN state is OFF</para>
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.NCStatusEnum.TurretSelection">
 <summary>
 This lamp is lit during turret selection
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.ValidateLevelEnum">
 -----------------------------------------------------------------------------
 <summary>
 Validate level enumeration. For internal data structure only
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ValidateLevelEnum.Exact">
 <summary>
 Exact same level
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ValidateLevelEnum.SameOrHigher">
 <summary>
 Same or higher level
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ValidateLevelEnum.SameOrLower">
 <summary>
 Same or lower level
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ValidateLevelEnum.All">
 <summary>
 All control if applicable
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ValidateLevelEnum.Higher">
 <summary>
 Higher control if applicable
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ValidateLevelEnum.Lower">
 <summary>
 Lower control if applicable
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.FeatureSetEnum">
 -----------------------------------------------------------------------------
 <summary>
 Feature Set enumeration
 </summary>
 <remarks>
 </remarks>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.ControlTypeEnum">
 -----------------------------------------------------------------------------
 <summary>
 Control type enumeration
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.None">
 <summary>
 Un-determined control type
 </summary>        
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.P100">
 <summary>
 P100 Type II OSP-P control 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.P200">
 <summary>
 P200 OSP-P control 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.P300SLP">
 <summary>
 P300 Special Lathe OSP-P control 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.P300L">
 <summary>
 P300 Lathe OSP-P control 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.P300SMP">
 <summary>
 P300 Special Machining Center OSP-P control 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.P300M">
 <summary>
 P300 Machining Center OSP-P control 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.P300G">
 <summary>
 P300 Grinder OSP-P control 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.P500SLP">
 <summary>
 P500S OSP-P control 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.P500L">
 <summary>
 P500L OSP-P control 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.P500SMP">
 <summary>
 P500SM OSP-P control 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.P500M">
 <summary>
 P500M OSP-P control 
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.ControlTypeEnum.P500G">
 <summary>
 P500G OSP-P control 
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.DataUnitEnum">
 <summary>
 Specified the data unit to be used in function for conversion, if applicable
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.DataUnitEnum.Unit_mm">
 -----------------------------------------------------------------------------
 <summary>
 Millimeter unit
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.DataUnitEnum.Unit_Inch">
 -----------------------------------------------------------------------------
 <summary>
 Inch unit
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.OffsetTypeEnum">
 -----------------------------------------------------------------------------
 <summary>
 Specifies the offset type to be 
 </summary>
 <remarks>
 </remarks>
 <history>
 	[Lhuynh]	1/20/2007	Created
 </history>
 -----------------------------------------------------------------------------
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.SubSystemEnum">
 <summary>
 <para>List of available sub systems to functions, if applicable.</para> 
 <para>By default, the sub system is NC-AL for every instance of classes if applicable.</para>
 </summary> 
 <remarks>
 <para></para>
 The machine data area is logically divided into different logical data areas that are based on the coordinate of spindle and turrets/wheel locations.
 <para>*****************************************************</para>
 <para> Application Notes 1:</para> 
 The following subsystem should be never used for getting/setting distinctive logical data.
 It can be used for displaying purpose since these subsystems will 
 return values based on current Panel selection or Program Command Selection on NC.
 <para>NC-RUN,NC-RUN-1, NC-PANEL, NC-PANEL-1</para>
 <para>*****************************************************</para>
 <para> Application Notes 2:</para> 
 To assure that you are always get/set the same logical data areas 
 mentioned above you can always set the subsystem accordingly.
 <para>For example:</para>
 <para> 1/ Machine equipped with main spindle and A turret/Wheel:</para>  
 <para> NC-AL => Data area in the upper left corner as shown in figure</para>
 <para></para>
 <para> 2/ Machine equipped with multiple spindles and single turret/wheel:</para>  
 <para> NC-AL => Data area in the upper left corner as shown in figure</para>
 <para> NC-AR => Data area in the upper right corner as shown in figure</para>
 <para></para>
 <para>*****************************************************</para>
 <para>Application Notes 3:</para>
 <para> Not all machines support all subsystems.</para>
 <para> It is necessary to specify the sub system to obtain different machine data if applicable.</para>
 <para>For example:</para>
 <para> Obtaining machine data related to First spindle and A turret/Wheel:</para>
 <para> objToolsAL.SetSubSystem(SubSystemEnum::NC_AL)</para>
 <para> objToolsAL.GetToolOffset(intOffsetIndex, enAxisIndex)</para>
 <para></para>
 <para> Obtaining machine data related to Second spindle and A turret/Wheel:</para>
 <para> objToolsAR.SetSubSystem(SubSystemEnum::NC_AR)</para>
 <para> objToolsAR.GetToolOffset(intOffsetIndex, enAxisIndex)</para>
 <para></para>
 <para>*****************************************************</para>
 <para>Application Notes 4:</para>
 <para>All exceptions generated by API and all set/add/cal functions will be logged.  Therefore, the application must be designed to minimize</para> 
 <para>unnecessary log by utilizing Object-Oriented Programming practices or preventing perform set/add/cal functions in a loop.</para> 
 </remarks>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.SubSystemEnum.NC_RUN">
 -----------------------------------------------------------------------------
 <summary>
 <para>If applicable, the machine data will be for:</para>
 <para> - Current selection of machine side on NC panel</para>
 <para> - Current selection of wheel head on NC panel</para>
 <para> - Command selection spindle</para>
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.SubSystemEnum.NC_RUN_1">
 -----------------------------------------------------------------------------
 <summary>
 <para>If applicable, the machine data will be for:</para>
 <para> - First Wheel Head</para>
 <para> - Current selection of machine side on NC panel</para>
 <para> - Command selection spindle</para>
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.SubSystemEnum.NC_PANEL">
 -----------------------------------------------------------------------------
 <summary>
 <para>If applicable, the machine data will be for:</para>
 <para> - Current selection of Wheel Head on NC panel</para>
 <para> - Current selection of machine side on NC panel</para>
 <para> - Current selection of spindle on NC panel</para>
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.SubSystemEnum.NC_PANEL_1">
 -----------------------------------------------------------------------------
 <summary>
 <para>If applicable, the machine data will be for:</para>
 <para> - First Wheel Head</para>
 <para> - Current selection of machine side on NC panel</para>
 <para> - Current selection of spindle on NC panel</para>
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.SubSystemEnum.NC_AL">
 -----------------------------------------------------------------------------
 <summary>
 <para>If applicable, the machine data will be for:</para>
 <para> - First Machine</para>
 <para> - First Wheel Head</para>
 <para> - First spindle</para>
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.SubSystemEnum.NC_AR">
 -----------------------------------------------------------------------------
         ''' <summary>
 <para>If applicable, the machine data will be for:</para>
 <para> - First Machine</para>
 <para> - First Wheel Head</para>
 <para> - Second spindle</para>
 </summary>
</member>
<member name="T:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum">
****************************************************************************************
<summary>
Represents different error codes returned by the User API functions
</summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.None">
 <summary>
 No Error
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.IllegalParameter">
 <summary>
 Illegal parameter
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.ExclusiveOperation">
 <summary>
 Cannot perform Log In/Out operation exclusively
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.HomeScreenNotActive">
 <summary>
 HOME screen is not active
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.AuthenticationError">
 <summary>
 The user authentication function is not valid (APPINFO check).
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.AuthenticationFunctionOff">
 <summary>
 The user authentication function is invalid (function is not enable on NC HMI).
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.ShortCutApplicationActivated">
 <summary>
 Shortcut application is activated
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.AuthenticationFailedMultipleTimes">
 <summary>
 One minute has not passed since authentication failed 5 times in succession.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.AlreadyLoggedInOut">
 <summary>
 Already Logged in/out
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.IncorrectUserInformation">
 <summary>
 For LogIn: Authentication Failure. The User ID or password is incorrect.
 For LogOut: See possible error message reported from NC HMI Home screen
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.NCHMINotReady">
 <summary>
 NC HMI initialization is not complete.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.HomeScreenTimeOut">
 <summary>
 Time out waiting for response from HOME Screen (timeout time is 10 seconds). Or event communication failed.
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.Enumerations.UserApiErrorCodeEnum.OtherErrors">
 <summary>
 Other errors (such as resource accquisition failure)
 </summary>
</member>
<member name="F:Okuma.CGDATAPI.modGlobalDeclare.WORD_VALUE">
define WORD_VALUE
</member>
<member name="M:Okuma.CGDATAPI.modMain.ThrowAE(System.String,System.String)">
 <summary>For internal usage only</summary>
<example> This example shows how to call the ThrowAE mothod.
<code escaped="true" language="Visual Basic">
 Sample code is not available.
</code>
</example>
<param name="strMessage">Message String.</param>
<param name="strError">Error String</param>
<Figure>
</Figure>
</member>
</members>
</doc>
