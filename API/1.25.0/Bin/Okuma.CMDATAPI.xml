<?xml version="1.0"?>
<doc>
    <assembly>
        "Okuma.CMDATAPI"
    </assembly>
    <members>
        <member name="F:Okuma.CMDATAPI.Structures.MagazineProperty.EndingPotNumber">
            <summary>
Represent the ending pot number of each magazine.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Structures.MagazineProperty.StartingPotNumber">
            <summary>
Represents the starting pot number of each magazine.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Structures.MagazineProperty.PotPerMagazine">
            <summary>
Number of pot per magazine.
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Structures.MagazineProperty">
            <summary>
Represents ATC magazine property.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Structures.ToolProperty.strToolKind">
            <summary>
An attribute of a tool
<list type="table"><listheader><term>Attribute Name</term><description>Description</description></listheader><item><term>(Blank)</term><description>Tool without any attribute</description></item><item><term>M</term><description>Heavy Tool</description></item><item><term>P</term><description>Planer Tool</description></item><item><term>PM</term><description>A heavy planer tool</description></item><item><term>A</term><description>Attachment Tool</description></item><item><term>AM</term><description>A heavy attachment tool</description></item><item><term>U</term><description>An axial tool</description></item><item><term>UM</term><description>A heavy axial tool</description></item><item><term>N</term><description>Manual attachement tool</description></item><item><term>B</term><description>A tool with a lid</description></item><item><term>L</term><description>Large diameter tool</description></item><item><term>LM (ML on OSP-P300)</term><description>Large diameter and heavy tool</description></item><item><term>PL</term><description>A large diameter planer tool</description></item><item><term>PLM</term><description>A heavy and large diameter planer tool</description></item><item><term>AL</term><description>A large diameter attachement tool</description></item><item><term>ALM</term><description>A heavy and large diameter attachement tool</description></item><item><term>UL</term><description>A large diameter axial tool</description></item><item><term>ULM</term><description>A heavy and large diameter axial tool</description></item><item><term>NL</term><description>Large diameter of manual attachement tool</description></item><item><term>BL</term><description>A large diameter tool with a lid</description></item><item><term>D</term><description>Dummy tool</description></item><item><term>C</term><description>Thru-Spindle Coolant Tool</description></item><item><term>T</term><description>Turning Tool</description></item><item><term>S</term><description>Light Tool</description></item><item><term>E</term><description>Long Tool</description></item><item><term>F</term><description>Super large diameter Tool</description></item><item><term>H</term><description>Small-diameter Tool</description></item><item><term>R</term><description>Standard boring Tool</description></item><item><term>J</term><description>Medium-diameter Tool</description></item><item><term>K</term><description>Medium-diameter boring Tool</description></item><item><term>V</term><description>Large-diameter single-side boring Tool</description></item><item><term>W</term><description>Large-diameter double-side boring Tool</description></item></list></summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Structures.ToolProperty.intToolNo">
            <summary>
Tool number.
<list type="table"><listheader><term>Tool number</term><description>Description</description></listheader><item><term>-1</term><description>NONE - No tool assigned to this pot</description></item><item><term>0</term><description>Represent a dummy Tool.  Ususally it is displayed as 'D'</description></item><item><term>1 - N</term><description>Tool number 1 to max tool number</description></item></list></summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Structures.ToolProperty">
            <summary>
Represents tool property of a tool in ATC.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Structures.IOAddress.Value">
            <summary>
value of I/O address
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Structures.IOAddress.Bit">
            <summary>
I/O bit address location
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Structures.IOAddress.Address">
            <summary>
I/O address location
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Structures.IOAddress.enSize">
            <summary>
I/O size
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Structures.IOAddress.enIOType">
            <summary>
I/O type
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Structures.IOAddress">
            <summary>
Represents I/O address
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Structures.EnergyUsageInfo.System">
            <summary>
Represents the system number that machine can support. Default value is 0 or System 1.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Structures.EnergyUsageInfo.Name">
            <summary>
Represents the axis name associated with this index for the current machine configuration
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Structures.EnergyUsageInfo.AxisIndex">
            <summary>
Represent the index of axis
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Structures.EnergyUsageInfo">
            <summary>
Represents Energy Usage information for the current machine configuration. 
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.TotalEnergyUsageEnum">
            <summary>
Represents total energy usage for each component
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.TotalEnergyUsageEnum.Total_Power">
            <summary>
Total power
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.TotalEnergyUsageEnum.Peripheral">
            <summary>
Total power of peripheral devices
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.TotalEnergyUsageEnum.Machine">
            <summary>
Total power of machine
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.TotalEnergyUsageEnum.FeedAxes">
            <summary>
Total power of feed axes
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.TotalEnergyUsageEnum.Spindle">
            <summary>
Total power of spindle.
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.EnergyUsageAxisIndexEnum">
            <summary>
Represents axis indexes for energy usage
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.EnergyUsageAxisIndexEnum.Sixth_Axis">
            <summary>
6th Axis. Use CAxis.GetAxisName function to obtain axis name per machine spec.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.EnergyUsageAxisIndexEnum.Fifth_Axis">
            <summary>
5th Axis.  It could be assigned to B/C axis. Use CAxis.GetAxisName function to obtain axis name per machine spec.
For example: If machine has only B and C axis, then B is the 4th axis, and C is the 5th axis.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.EnergyUsageAxisIndexEnum.Fourth_Axis">
            <summary>
4th Axis. It could be assigned to A/B/C axis. Use CAxis.GetAxisName function to obtain axis name per machine spec.
For example: If machine has only A axis, then A is the 4th axis.
For example: If machine has only B axis, then B is the 4th axis.
For example: If machine has only C axis, then C is the 4th axis.
For example: If machine has only A and B axis, then A is the 4th axis, and B is the 5th axis.
For example: If machine has only A and C axis, then A is the 4th axis, and C is the 5th axis.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.EnergyUsageAxisIndexEnum.Z_Axis">
            <summary>
Z Axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.EnergyUsageAxisIndexEnum.Y_Axis">
            <summary>
Y Axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.EnergyUsageAxisIndexEnum.X_Axis">
            <summary>
X Axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.EnergyUsageAxisIndexEnum.Spindle">
            <summary>
Spindle Axis
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.EnergyUsageTypeEnum">
            <summary>
Represents type of energy usage
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.EnergyUsageTypeEnum.Instantaneous_Power">
            <summary>
Instantaneous power
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.EnergyUsageTypeEnum.Integral_Power">
            <summary>
Integral of power
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum">
            <summary>
Represents different error codes returned by the User API functions
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.OtherErrors">
            <summary>
Other errors (such as resource accquisition failure)
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.HomeScreenTimeOut">
            <summary>
Time out waiting for response from HOME Screen (timeout time is 10 seconds). Or event communication failed.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.NCHMINotReady">
            <summary>
NC HMI initialization is not complete.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.IncorrectUserInformation">
            <summary>
For LogIn: Authentication Failure. The User ID or password is incorrect.
For LogOut: See possible error message reported from NC HMI Home screen
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.AlreadyLoggedInOut">
            <summary>
Already Logged in/out
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.AuthenticationFailedMultipleTimes">
            <summary>
One minute has not passed since authentication failed 5 times in succession.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.ShortCutApplicationActivated">
            <summary>
Shortcut application is activated
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.AuthenticationFunctionOff">
            <summary>
The user authentication function is invalid (function is not enable on NC HMI).
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.AuthenticationError">
            <summary>
The user authentication function is not valid (APPINFO check).
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.HomeScreenNotActive">
            <summary>
HOME screen is not active
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.ExclusiveOperation">
            <summary>
Cannot perform Log In/Out operation, exclusively
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.IllegalParameter">
            <summary>
Illegal parameter
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum.None">
            <summary>
No Error
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.MacManSubSystemEnum">
            <summary>
Represents sub system for Mac Man data area.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MacManSubSystemEnum.SubSystem_2">
            <summary>
MacMan data for left side of machine having 2 sides
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MacManSubSystemEnum.SubSystem_1">
            <summary>
MacMan data for right side of machine having 2 sides
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MacManSubSystemEnum.CurrentSubSystem">
            <summary>
Current MacMan selection. 
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.DataUnitEnum">
            <summary>
Specified the data unit to be used in function for conversion, if applicable
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.DataUnitEnum.Unit_Inch">
            <summary>
Inch unit
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.DataUnitEnum.Unit_mm">
            <summary>
Millimeter unit
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ReportPeriodEnum">
            <summary>
Represents report period type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ReportPeriodEnum.PeriodReport">
            <summary>
Period report
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ReportPeriodEnum.PreviousDayReport">
            <summary>
Previous day report
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ReportPeriodEnum.TodayReport">
            <summary>
Today report
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum">
            <summary>
Represents operating report data
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.AlarmOnTime">
            <summary>
Alarm on time
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.ExternalInputTime">
            <summary>
External input time
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.SpindleRunTime">
            <summary>
Spindle run time
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.OtherTime">
            <summary>
Non operating time due to other condition
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.MaintenanceTime">
            <summary>
Non operating time due to maintenance
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.PartWaitingTime">
            <summary>
Non operating time due to part waiting
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.NoOperatorTime">
            <summary>
Non operating time due to no operator
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.InProcessSetupTime">
            <summary>
Non operating time due to in process setup time
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.NonOperatingTime">
            <summary>
Non operating time
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.CuttingTime">
            <summary>
Cutting Time
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.RunningTime">
            <summary>
Running Time
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.OperatingTime">
            <summary>
Operating Time
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.LogTypeEnum">
            <summary>
Represents different logging levels.  It logs current and any level below current level.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.LogTypeEnum.Information">
            <summary>
Information logging level
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.LogTypeEnum.ReadData">
            <summary>
Read logging level
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.LogTypeEnum.WriteData">
            <summary>
Write logging level
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.LogTypeEnum.Exception">
            <summary>
Exception logging level
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum">
            <summary>
Represents different conditions when machine is not operating
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum.Other">
            <summary>
Machine is not operating due to other condition
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum.Maintenance">
            <summary>
Machine is not operating due to maintenance
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum.PartWaiting">
            <summary>
Machine is not operating due to waiting for part
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum.NoOperator">
            <summary>
Machine is not operating due to no opeartor
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum.InProcessSetup">
            <summary>
Machine is not operating due to in process set-up
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.OperatingStatusEnum">
            <summary>
Represents machine operating status
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingStatusEnum.MachineOperating">
            <summary>
Machine is operating
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperatingStatusEnum.NonOperating">
            <summary>
Machine is not operating
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.OnOffEnum">
            <summary>
Represents an ON/OFF state
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OnOffEnum.ON">
            <summary>
ON
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OnOffEnum.OFF">
            <summary>
OFF
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ExecuteBlockTypeEnum">
            <summary>
Represent execute block type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ExecuteBlockTypeEnum.NextExecuteBlock">
            <summary>
Next execute block
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ExecuteBlockTypeEnum.CurrentExecuteBlock">
            <summary>
Current execute block
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum">
            <summary>
Represents workpiece counter
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum.CounterD">
            <summary>
Workpiece counter D
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum.CounterC">
            <summary>
Workpiece counter C
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum.CounterB">
            <summary>
Workpiece counter B
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum.CounterA">
            <summary>
Workpiece counter A
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum">
            <summary>
Represents order of command feed rate
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum.FourthCommand">
            <summary>
Fourth command feed rate
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum.ThirdCommand">
            <summary>
Third command feed rate
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum.SecondCommand">
            <summary>
Second command feed rate
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum.CurrentCommand">
            <summary>
Current commmand feed rate
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm">
            <summary>
Represents alarm type of MOP Tool data
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm.OverrideMinimumAlarm">
            <summary>
Override minimum alarm
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm.UnsualSignalAlarm">
            <summary>
Alarm due to unsual signal
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm.ElectricalOverloadAlarm">
            <summary>
Alamr due to electrical overload
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm.ToolWearAlarm">
            <summary>
Alarm due tool wear
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm.NoAlarm">
            <summary>
No alarm
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.OptionSpecEnum">
            <summary>
Represent machine option specification
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OptionSpecEnum.ToolID8Digits">
            <summary>
8 Digits Tool ID spec.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OptionSpecEnum.OneTenthMicron">
            <summary>
0.1 Micron option spec.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OptionSpecEnum.MOPTool">
            <summary>
MOP Tool option spec.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OptionSpecEnum.ToolWearOffset">
            <summary>
Tool wear option spec.
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ATCTypeEnum">
            <summary>
Represents type of ATC
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ATCTypeEnum.RandomAddress">
            <summary>
Random address ATC type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ATCTypeEnum.FixedAddress">
            <summary>
Fixed address ATC type
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.MagazineTypeEnum">
            <summary>
Represents type of ATC magazine.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MagazineTypeEnum.MatrixMagazine">
            <summary>
ATC with maxtrix magazine
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MagazineTypeEnum.MultiMagazine">
            <summary>
ATC with multi-magazines
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MagazineTypeEnum.StandardMagazine">
            <summary>
ATC with standard magazine
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.AxisTypeEnum">
            <summary>
Represents movement type of axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.AxisTypeEnum.Rotation">
            <summary>
Rotary axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.AxisTypeEnum.Linear">
            <summary>
Linear axis
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum">
            <summary>
Represents controlled axes for MOP Tool data
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum.Z_Axis">
            <summary>
Z Axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum.Y_Axis">
            <summary>
Y Axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum.X_Axis">
            <summary>
X Axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum.Spindle_Axis">
            <summary>
Spindle Axis
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.RotaryAxisStructureEnum">
            <summary>
Represents the structure of Rotary controlled axes.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisStructureEnum.SecondAxisRotation">
            <summary>
Second axis of rotation
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisStructureEnum.FirstAxisRotation">
            <summary>
First axis of rotation
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.RotationCenterSideEnum">
            <summary>
Represents the rotation center side enumeration
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotationCenterSideEnum.TableSide">
            <summary>
It is setup on table side
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotationCenterSideEnum.PrincipalAxisSide">
            <summary>
It is setup on principal axis side
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupStructureEnum">
            <summary>
Represents the setup structure of Rotary controlled axes.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupStructureEnum.SecondRotation">
            <summary>
Second axis of rotation
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupStructureEnum.FirstRotation">
            <summary>
First axis of rotation
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupStructureEnum.NoSetting">
            <summary>
No setting
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupPositionEnum">
            <summary>
Represents the setup position of Rotary controlled axes.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupPositionEnum.TableSide">
            <summary>
It is setup on table side
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupPositionEnum.PrincipalAxisSide">
            <summary>
It is setup on principal axis side
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupPositionEnum.NoSetting">
            <summary>
No setting
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum">
            <summary>
Represents Linear controlled axes.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum.Z_Axis">
            <summary>
Third Axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum.Y_Axis">
            <summary>
Second Axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum.X_Axis">
            <summary>
First Axis
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum">
            <summary>
Represents Rotary controlled axes.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum.Sixth_Axis">
            <summary>
6th Axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum.Fifth_Axis">
            <summary>
5th Axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum.Fourth_Axis">
            <summary>
4th Axis
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.AxisIndexEnum">
            <summary>
Represents controlled axes.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.AxisIndexEnum.Sixth_Axis">
            <summary>
6th Axis. Use CAxis.GetAxisName function to obtain axis name per machine spec.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.AxisIndexEnum.Fifth_Axis">
            <summary>
5th Axis.  It could be assigned to B/C axis. Use CAxis.GetAxisName function to obtain axis name per machine spec.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.AxisIndexEnum.Fourth_Axis">
            <summary>
4th Axis. It could be assigned to A/B/C axis. Use CAxis.GetAxisName function to obtain axis name per machine spec.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.AxisIndexEnum.Z_Axis">
            <summary>
Z Axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.AxisIndexEnum.Y_Axis">
            <summary>
Y Axis
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.AxisIndexEnum.X_Axis">
            <summary>
X Axis
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.FeedrateTypeEnum">
            <summary>
Represents type of feed rate
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.FeedrateTypeEnum.PerRevolution">
            <summary>
Per revolution (Fr)
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.FeedrateTypeEnum.PerMinute">
            <summary>
Per minute (Fm)
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.SpindleStateEnum">
            <summary>
Represents spindle states.  In manual operation mode, spindle state can only be in the first 4 states.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.SpindleStateEnum.ORIENTATION_CW_CCW">
            <summary>
Spindle orientation by CW/CCW rotation
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.SpindleStateEnum.ORIENTATION_CW">
            <summary>
Spindle orientation by CCW rotation.  
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.SpindleStateEnum.ORIENTATION">
            <summary>
Spindle orientation
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.SpindleStateEnum.CCW">
            <summary>
Spindel rotates in counter clockwise direction
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.SpindleStateEnum.CW">
            <summary>
Spindle rotates in clockwise direction.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.SpindleStateEnum.Stop">
            <summary>
Spindle stops.
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ExecutionModeEnum">
            <summary>
Represents machine running mode.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ExecutionModeEnum.Running">
            <summary>
Running
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ExecutionModeEnum.NotRun">
            <summary>
Not run
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.OperationModeEnum">
            <summary>
Represents 1 of the 3 operation modes
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperationModeEnum.Manual">
            <summary>
Manual mode
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperationModeEnum.MDI">
            <summary>
MDI mode
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OperationModeEnum.Auto">
            <summary>
Auto mode
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.PanelModeEnum">
            <summary>
Represents machine navigation panel mode
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.MacMan">
            <summary>
MacMan Mode - Machining Maintenance screen
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.ToolDataSetup">
            <summary>
Too Data set up mode - In this mode the tool offset data, nose radius compensation data, tool shape data, and load monitor
data can be set, changed, or displayed
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.ZeroSetup">
            <summary>
Zero set up mode - In this mode the zero offset data and zero offset shift data which define a program coordinate
system can be set, changed, or checked.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.ParameterSetup">
            <summary>
Parameter set up mode - In this mode the parameter data necessary for numerical control can be set, changed, an displayed.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.ProgramOperation">
            <summary>
Program operation mode - In this mode program and data files can be edited, input/output, displayed, and deleted
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.Manual">
            <summary>
Operation mode - Manual
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.MDI">
            <summary>
Operation mode - MDI
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.Auto">
            <summary>
Operation mode - Auto
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum">
            <summary>
Represents tool life mode of tool in tool life management table.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum.CountMode">
            <summary>
Tool life is under Count management mode
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum.CountSpareMode">
            <summary>
Tool life is under Count Spare management mode
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum.TimeMode">
            <summary>
Tool life is under time management mode
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum.TimeSpareMode">
            <summary>
Tool life is under time spare management mode
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum.NoMode">
            <summary>
Tool life is not under management mode
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum">
            <summary>
Represents MOP Tool data input mode.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum.Absolute">
            <summary>
Absolute mode.  The value should be set in measured value.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum.Relative">
            <summary>
Relative mode. The value should be set in percentaeg of the REFERENCE value.
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.MOPToolSettingEnum">
            <summary>
Represents settings of MOP Tool data.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolSettingEnum.UL">
            <summary>
This is the upper limit level used by the adaptive control function. The setting is made in either
the measure value or percentage to the reference value.	
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolSettingEnum.LL">
            <summary>
This is the lower limit level used by the adaptive control function. The setting is made in either the
measure value or percentage to the reference value.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolSettingEnum.Limit">
            <summary>
This is the threshold level used by the overload monitoring function for determining the overload status
to give the overload alarm.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolSettingEnum.ALV">
            <summary>
This is the upper limit level used by the adaptive control function
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum">
            <summary>
Represents tool group order in tool life management table
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum.SPR">
            <summary>
Spare 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum.ORG">
            <summary>
Tool as commanded in the machining program
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum.None">
            <summary>
No order 
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum">
            <summary>
Represents tool life status of each tool.
<para> Defect level 1: The tool remains used until the opeprator takes action.</para><para> Defect level 2: The tool will change to a spare tool when the next T command is executed.
In this case, an alarm will occur and the ongoing operation will immediately stop if there is no spare tool.</para><para> Defect level 3: An alarm will occur and the ongoing operation will immediately stop even during cutting</para></summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG3_USER">
            <summary>
Tool life is expired. Level 3.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG3_BREAKAGE">
            <summary>
Tool life is expired. Level 3.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG3_TORQUE">
            <summary>
Tool life is expired. Level 3.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG3_ELECTRICAL_OVERLOAD">
            <summary>
Tool life is expired. Level 3.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG3_WEAR">
            <summary>
Tool life is expired. Level 3.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG3_LIFE">
            <summary>
Tool life is expired. Level 2.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG2_USER">
            <summary>
Tool life is expired. Level 2.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG2_BREAKAGE">
            <summary>
Tool life is expired. Level 2.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG2_TORQUE">
            <summary>
Tool life is expired. Level 2.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG2_ELECTRICAL_OVERLOAD">
            <summary>
Tool life is expired. Level 2.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG2_WEAR">
            <summary>
Tool life is expired. Level 2.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG2_LIFE">
            <summary>
Tool life is expired. Level 2.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG1_USER">
            <summary>
Tool life is expired. Level 1.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG1_BREAKAGE">
            <summary>
Tool life is expired. Level 1.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG1_TORQUE">
            <summary>
Tool life is expired. Level 1.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG1_ELECTRICAL_OVERLOAD">
            <summary>
Tool life is expired. Level 1.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG1_WEAR">
            <summary>
Tool life is expired. Level 1.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG1_LIFE">
            <summary>
Tool life is expired. Level 1.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.OK">
            <summary>
Tool life is good.
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ToolKindEnum">
            <summary>
Represents tool kind of each tool in ATC table
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.SideCutter">
            <summary>
Side Cutter Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.Fraise">
            <summary>
Fraise Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.EndMillR">
            <summary>
End Mill Tool with R
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.BallEndMill">
            <summary>
Ball End Mill Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.FlatEndMill">
            <summary>
Flat End Mill Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.HelicalTap">
            <summary>
Helical Tap Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.Tap">
            <summary>
Tap Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.ChamferCutter">
            <summary>
Chamfer Cutter Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.BackBoring">
            <summary>
Back Boring Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.Boring">
            <summary>
Boring Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.Reamer">
            <summary>
Reamer Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.Drill">
            <summary>
Drill Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.SpotDrill">
            <summary>
Spot Drill Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.CenterDrill">
            <summary>
Center Drill Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.ACS_TL">
            <summary>
ACS arbitrary shape tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.DummyTool">
            <summary>
A dummy tool.  A tool that is assigned next to a large diameter tool to prevent colliding with the adjacent tools.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterToolWithLid">
            <summary>
A large diameter tool type that has lid
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterManualAttachTool">
            <summary>
A large diameter manual attach tool type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterUAxisHeavyTool">
            <summary>
A large diameter and heavy U axis tool type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterUAxisTool">
            <summary>
A large diameter U axis tool type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterAttachHeavyTool">
-----------------------------------------------------------------------------
<summary>
A large diameter and heavy attach tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterAttachTool">
-----------------------------------------------------------------------------
<summary>
A large diameter attach tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterPlanarHeavyTool">
-----------------------------------------------------------------------------
<summary>
A large diameter and heavy planar tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterPlanarTool">
-----------------------------------------------------------------------------
<summary>
A large diameter planer tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterHeavyTool">
-----------------------------------------------------------------------------
<summary>
A large diameter and heavy tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterTool">
-----------------------------------------------------------------------------
<summary>
A large diameter tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.ToolWithLid">
-----------------------------------------------------------------------------
<summary>
A tool type that has a lid
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.ManualAttachTool">
-----------------------------------------------------------------------------
<summary>
A manual attach tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.UAxisHeavyTool">
-----------------------------------------------------------------------------
<summary>
An U axis and heavy tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.UAxisTool">
-----------------------------------------------------------------------------
<summary>
An U axis tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.AttachmentHeavyTool">
-----------------------------------------------------------------------------
<summary>
An attachment and heavy tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.AttachmentTool">
-----------------------------------------------------------------------------
<summary>
An attachement tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.PlanarHeavyTool">
-----------------------------------------------------------------------------
<summary>
A planar and heavy tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.PlanarTool">
-----------------------------------------------------------------------------
<summary>
A planar tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.HeavyTool">
-----------------------------------------------------------------------------
<summary>
A heavy tool type
</summary></member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.None">
-----------------------------------------------------------------------------
<summary>
Tool without an attribute
</summary></member>
        <member name="T:Okuma.CMDATAPI.Enumerations.BitsEnum">
            <summary>
Represents 16 bits of a WORD.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_15">
            <summary>
Bit 15 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_14">
            <summary>
Bit 14 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_13">
            <summary>
Bit 13 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_12">
            <summary>
Bit 12 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_11">
            <summary>
Bit 11 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_10">
            <summary>
Bit 10 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_9">
            <summary>
Bit 9 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_8">
            <summary>
Bit 8 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_7">
            <summary>
Bit 7 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_6">
            <summary>
Bit 6 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_5">
            <summary>
Bit 5 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_4">
            <summary>
Bit 4
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_3">
            <summary>
Bit 3 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_2">
            <summary>
Bit 2 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_1">
            <summary>
Bit 1 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_0">
            <summary>
Bit 0 
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.IOTypeEnum">
            <summary>
Represents types of I/O variables
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.IOTypeEnum.Output">
            <summary>
Output I/O variable type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.IOTypeEnum.Input">
            <summary>
Input I/O variable type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.IOTypeEnum.None">
            <summary>
Unknown I/O variable type
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.OnOffStateEnum">
            <summary>
Represents an ON/OFF state
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OnOffStateEnum.ON">
            <summary>
On State
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OnOffStateEnum.OFF">
            <summary>
Off State
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum">
            <summary>
Represents variable soft-limit settings that can be made either in reference to the program
zero (P) and the machine zero (M).
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum.MinusVariableLimitInMachineCoordinate">
            <summary>
Minus (negative axis direction) variable soft-limit in reference to the machine zero (M)
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum.PlusVariableLimitInMachineCoordinate">
            <summary>
Plus (positive axis direction) variable soft-limit in reference to the machine zero (M)
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum.MinusVariableLimitInProgramCoordinate">
            <summary>
Minus (negative axis direction) variable soft-limit in reference to the program zero (P)
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum.PlusVariableLimitInProgramCoordinate">
            <summary>
Plus (positive axis direction) variable soft-limit in reference to the program zero (P)
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.GCodeMacroTypeEnum">
            <summary>
Represents type of G Code macro
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.GCodeMacroTypeEnum.CALL">
            <summary>
CALL Macro type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.GCodeMacroTypeEnum.MODIN">
            <summary>
MODIN Macro type
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum">
            <summary>
Represents different alarm levels of current OSP alarm
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum.ALARM_P">
            <summary>
Alarm  P
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum.ALARM_A">
            <summary>
Alarm  A
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum.ALARM_B">
            <summary>
Alarm  B
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum.ALARM_C">
            <summary>
Alarm  C
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum.ALARM_D">
            <summary>
Alarm  D
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum.None">
            <summary>
No alarm
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ToolTypeEnum">
            <summary>
Represents different types of tools
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.HelicalTap">
            <summary>
Helical Tap Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.BallEnd">
            <summary>
Ball EndMill Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.ChamferingCutter">
            <summary>
Chamfering Cutter Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.FaceMill">
            <summary>
Face Mill Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.EndMill">
            <summary>
End Mill Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.BoringBar">
            <summary>
Boring Bar Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.Reamer">
            <summary>
Reamer Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.Tap">
            <summary>
Tap Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.DrillTool">
            <summary>
Drill Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.CenterDrill">
            <summary>
Centerl Drill Tool
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.None">
            <summary>
None
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.CarrierStatusEnum">
            <summary>
Represents status of Tool ID carrier
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.CarrierStatusEnum.COMP_Write">
            <summary>
Forcibly write data to the data carrier without verifying the tool number.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.CarrierStatusEnum.Yes">
            <summary>
Data carrier is available
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.CarrierStatusEnum.No">
            <summary>
Data carrier is not available
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ControlTypeEnum">
            <summary>
Represents machine control type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P500G">
            <summary>
P500G OSP-P control 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P500M">
            <summary>
P500M OSP-P control 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P500SMP">
            <summary>
P500SM OSP-P control 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P500L">
            <summary>
P500L OSP-P control 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P500SLP">
            <summary>
P500S OSP-P control 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P300G">
            <summary>
P300 Grinder OSP-P control 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P300M">
            <summary>
P300 Machining Center OSP-P control 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P300SMP">
            <summary>
P300 Special Machining Center OSP-P control 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P300L">
            <summary>
P300 Lathe OSP-P control 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P300SLP">
            <summary>
P300 Special Lathe OSP-P control 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P200">
            <summary>
P200 OSP-P control 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P100">
            <summary>
P100 Type II OSP-P control 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.None">
            <summary>
Un-determined control type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.FeatureSetEnum.UserTaskIOVariable">
            <summary>
External I/O Variables
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.FeatureSetEnum.NCCurrentAlarm">
            <summary>
NC Current Alarm
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.FeatureSetEnum.EightDigitsToolID">
            <summary>
8 Digits Tool ID 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.FeatureSetEnum.None">
            <summary>
Not specified
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum">
-----------------------------------------------------------------------------
<summary>
Validate level enumeration. For internal data structure only
</summary><remarks /><history>
	[Lhuynh] 07/02/2013	Created
</history>
----------------------------------------------------------------------------- 
</member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum.Lower">
            <summary>
Lower Level
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum.Higher">
            <summary>
Higher level
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum.All">
            <summary>
All 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum.SameOrLower">
            <summary>
Same or lower level
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum.SameOrHigher">
            <summary>
Same or higher level
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum.Exact">
            <summary>
Exact same level
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ProbeSubProgramStatusEnum">
            <summary>
Represents sub program status of OSPR1 or OSPR2
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ProbeSubProgramStatusEnum.OSPR2">
            <summary>
Probe Subprogram OSPR2 is running
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ProbeSubProgramStatusEnum.OSPR1">
            <summary>
Probe Subprogram OSPR1 is running
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ProbeSubProgramStatusEnum.None">
            <summary>
None
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.NCStatusEnum">
            <summary>
Represents status indicator lamps are displayed at the top of the screen
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.NCStatusEnum.ProgramStop">
            <summary>
This lamp is lit during a program stop (M00) or optional stop (M01) in
the automatic or MDI mode.
It blinks during dwell (G04).
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.NCStatusEnum.Run">
            <summary>
This RUN lamp is lit while the machine is actually operating in the automatic or MDI
mode.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.NCStatusEnum.STM">
            <summary>
This lamp is lit while S (spindle), T (tool), or M (miscellaneous)
operation is being executed.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.NCStatusEnum.SlideHold">
            <summary>
This lamp is on when the [SLIDE HOLD] button is pressed.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.NCStatusEnum.Limit">
            <summary>
This lamp is on when an axis reaches the variable limit position.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.NCStatusEnum.Alarm">
            <summary>
This lamp is on at the occurrence of an alarm.
Note that it does not light when a warning message is displayed due
to erroneous operation.
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ToolCompensationEnum">
            <summary>
Represent compensation number for tool offset and cutter radius offset
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolCompensationEnum.HCDC">
            <summary>
Third compensation - HC/DC
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolCompensationEnum.HBDB">
            <summary>
Second compensation - HB/DB
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolCompensationEnum.HADA">
            <summary>
First compensation - HA/DA
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.SlopeConvertingEnum">
            <summary>
Represent the slope converting
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.SlopeConvertingEnum.Program">
            <summary>
Program Slope Converting
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.SlopeConvertingEnum.Manual">
            <summary>
Manual Slope Converting
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.SlopeConvertingEnum.None">
            <summary>
No slope converting
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.IOAddressSizeEnum">
            <summary>
Represent IO Address size
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.IOAddressSizeEnum.DWord">
            <summary>
Double Word data type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.IOAddressSizeEnum.Word">
            <summary>
Word data type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.IOAddressSizeEnum.Bit">
            <summary>
Bit data type
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.IOAddressSizeEnum.None">
            <summary>
None
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ProgramRunningStateEnum">
            <summary>
Represents program running state
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ProgramRunningStateEnum.Executing">
            <summary>
Program is in running state.  Once the program has been executed it will remain 
in the this state until the program is stopped or reset.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ProgramRunningStateEnum.NotRun">
            <summary>
Program is not in running state.
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ToolListTypeEnum">
            <summary>
Represent different types of tool list
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolListTypeEnum.AttachedTools">
            <summary>
All tools attached in the magazines
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolListTypeEnum.RegisteredTools">
            <summary>
All tools registered in the system
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ToolListTypeEnum.AllTools">
            <summary>
All tools that are registered or attached
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.HourMeterEnum">
            <summary>
Represents different types of hour meter 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.HourMeterEnum.ExternalInputTime">
            <summary>
External Input
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.HourMeterEnum.CuttingTime">
            <summary>
Cutting Time
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.HourMeterEnum.SpindleRevolutionTime">
            <summary>
Spindle Revolution Time
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.HourMeterEnum.NCRunningTime">
            <summary>
NC Running Time
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.HourMeterEnum.PowerOnTime">
            <summary>
Power On Time
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.LoggingLevelEnum">
            <summary>
Represents different levels of logging.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.LoggingLevelEnum.logAll">
            <summary>
Level 4 – all logging events regardless of level.
Setting the level to 3 or greater will force logging of ALL calls to the API to facilitate debugging of your application. 
This function is CPU intensive and should only be used for debugging purposes. 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.LoggingLevelEnum.logGet">
            <summary>
Level 3 – Level 2 + all read functions. 
Setting the level to 3 or greater will force logging of ALL calls to the API to facilitate debugging of your application. 
This function is CPU intensive and should only be used for debugging purposes. 
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.LoggingLevelEnum.logSet">
            <summary>
Level 2 – Level 1 + all write functions to the API (default value for all class instances)
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.LoggingLevelEnum.logException">
            <summary>
Level 1 – All exceptions will be logged by the system. (not settable).
It is highly not recommended to have polling routines that produce exceptions for any purposes. 
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.ATCSubPanelOperationModeEnum">
            <summary>
Represents different operation modes of ATC Sub panel
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ATCSubPanelOperationModeEnum.Write">
            <summary>
Data on ATC sub panel can be read and written by API. Machine operator cannot use ATC sub panel.
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.ATCSubPanelOperationModeEnum.Read">
            <summary>
Data on ATC sub panel can be read by API. Machine operator can use ATC sub panel
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.Enumerations.BlockBufferEnum">
            <summary>
Represents different blocks of data buffer in BLOCK DATA screen
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BlockBufferEnum.ThirdBuffer">
            <summary>
3rd Block buffer
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BlockBufferEnum.SecondBuffer">
            <summary>
2nd Block buffer
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BlockBufferEnum.Buffer">
            <summary>
1st Block buffer
</summary>
        </member>
        <member name="F:Okuma.CMDATAPI.Enumerations.BlockBufferEnum.Current">
            <summary>
Current block buffer
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolMaxSpeed(System.Int32,System.Int32)">
            <summary>
Sets tool max speed given tool number
</summary>
            <example> This sample shows how to call the SetToolMaxSpeed method.
<para>Dim objTools As CTools = new CTools</para><para>Dim intToolNo As Integer</para><para>Dim intMaxSpeed As Integer</para><para>objTools.SetToolMaxSpeed(intToolNo, intMaxSpeed) </para></example>
            <param name="intToolNo">Tool Number</param>
            <param name="intMaxSpeed">Tool's max speed to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>PLC Spec Code 1 [31,6] must be on in order to function correctly.</para>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
            <Figure>
                <para> For OSP-P300S(MP)/M - TOOL DATA EDIT - S_UPPER_LIM
<img src="../media/MC.ToolDataEdit.P300M.jpg" /></para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolName(System.Int32,System.String)">
            <summary>
Sets tool name given tool number
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the SetToolName method.
<para>Dim objTools As CTools = new CTools</para><para>Dim intToolNo As Integer</para><para>Dim strToolName As String</para><para>objTools.SetToolName(intToolNo, strToolName) </para></example>
            <param name="intToolNo">Tool Number</param>
            <param name="strToolName">Name of tool to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
            <Figure>
                <para> For OSP-P300S(MP)/M - TOOL DATA EDIT - TOOL NAME
<img src="../media/MC.ToolDataEdit.P300M.jpg" /></para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetStatus(System.Int32,Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum)">
            <summary>
Sets tool life status at the specified tool number.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the SetStatus method.
<para>Dim objTools As CTools = new CTools</para><para>Dim intToolNo As Integer</para><para>Dim enToolLifeStatus As ToolLifeStatusEnum</para><para>objTools.SetStatus(intToolNo, enToolLifeStatus) </para></example>
            <param name="intToolNo">Tool Number</param>
            <param name="enToolLifeStatus">Tool life status to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Reserve tool change functional specification NC spec [21,0]</term><description>Valid</description></item></list></para>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
            <Figure>
                <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - OK/NG 
<img src="../media/MC.P300.Tooldata.ToolLife.jpg" /></para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.CalToolWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
            <summary>
Determines the tool length geometry wear offset value based on the calculation made for the input data.
</summary>
            <example> This sample shows how to call the CalToolWearOffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    objTools.CalToolWearOffset(intToolNo, enToolCompensation, dblValue) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="enToolCompensation">Tool compensation number</param>
            <param name="dblValue">Input data. Actual position value to be calculated from</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - TOOL-L OFST - WEAR - HA/HB/HC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.CalToolOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
            <summary>
Determines the tool length geometry offset value based on the calculation made for the input data.
</summary>
            <example> This sample shows how to call the CalToolOffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    objTools.CalToolOffset(intToolNo, enToolCompensation, dblValue) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="enToolCompensation">Tool compensation number</param>
            <param name="dblValue">Input data. Actual position value to be calculated from</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - TOOL-L OFST - GEOMETRY - HA/HB/HC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetCutterRWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
            <summary>
Sets the cutter radius compensation wear offset value data at the specified tool number and tool compensation number.
</summary>
            <example> This sample shows how to call the SetCutterRWearOffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    objTools.SetCutterRWearOffset(intToolNo, enToolCompensation, dblValue) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="enToolCompensation">Tool compensation number</param>
            <param name="dblValue">offset value to be set</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - CUTTER R COMP - WEAR - DA/DB/DC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetCutterROffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
            <summary>
Sets the cutter radius compensation offset value data at the specified tool number and tool compensation number.
</summary>
            <example> This sample shows how to call the SetCutterROffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    objTools.SetCutterROffset(intToolNo, enToolCompensation, dblValue) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="enToolCompensation">Tool compensation number</param>
            <param name="dblValue">offset value to be set</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - CUTTER R COMP - GEOMETRY - DA/DB/DC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
            <summary>
Sets the tool length geometry wear offset value data at the specified tool number and tool compensation number.
</summary>
            <example> This sample shows how to call the SetToolWearOffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    objTools.SetToolWearOffset(intToolNo, enToolCompensation, dblValue) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="enToolCompensation">Tool compensation number</param>
            <param name="dblValue">offset value to be set</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - TOOL-L OFST - GEOMETRY - HA/HB/HC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
            <summary>
Sets the tool length geometry offset value data at the specified tool number and tool compensation number.
</summary>
            <example> This sample shows how to call the SetToolOffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    objTools.SetToolOffset(intToolNo, enToolCompensation, dblValue) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="enToolCompensation">Tool compensation number</param>
            <param name="dblValue">offset value to be set</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - TOOL-L OFST - GEOMETRY - HA/HB/HC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddCutterRWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
            <summary>
Sets the cutter radius compensation wear offset value by adding the input value to the existing data at the specified tool number and tool compensation number.
</summary>
            <example> This sample shows how to call the AddCutterRWearOffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    objTools.AddCutterRWearOffset(intToolNo, enToolCompensation, dblValue) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="enToolCompensation">Tool compensation number</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - CUTTER R COMP - WEAR - DA/DB/DC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddCutterROffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
            <summary>
Sets the cutter radius compensation offset value by adding the input value to the existing data at the specified tool number and tool compensation number.
</summary>
            <example> This sample shows how to call the AddCutterROffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    objTools.AddCutterROffset(intToolNo, enToolCompensation, dblValue) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="enToolCompensation">Tool compensation number</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - CUTTER R COMP - GEOMETRY - DA/DB/DC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddToolWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
            <summary>
Sets the tool length geometry wear offset value by adding the input value to the existing data at the specified tool number and tool compensation number.
</summary>
            <example> This sample shows how to call the AddToolWearOffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    objTools.AddToolWearOffset(intToolNo, enToolCompensation, dblValue) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="enToolCompensation">Tool compensation number</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - TOOL-L OFST - WEAR - HA/HB/HC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddToolOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
**************************************************************
<summary>
Sets the tool length geometry offset value by adding the input value to the existing data at the specified tool number and tool compensation number.
</summary><example> This sample shows how to call the AddToolOffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    objTools.AddToolOffset(intToolNo, enToolCompensation, dblValue) </para></example><param name="intToolNo">Tool number</param><param name="enToolCompensation">Tool compensation number</param><param name="dblValue">offset value to be added</param><DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure><para> OSP-P300 - TOOL DATA - TOOL-L OFST - GEOMETRY - HA/HB/HC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para></Figure><remarks><para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para></remarks></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddCutterRCompWearOffset(System.Int32,System.Double)">
            <summary>
Sets the cutter radius compensation wear offset value by adding the input value to the existing data at the specified offset index.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the AddCutterRCompWearOffset method.
<para>Dim objTools As New CTools  </para><para>Dim intToolOffsetNo As Integer </para><para>Dim dblValue As Double </para><para>	    objTools.AddCutterRCompWearOffset(intToolOffsetNo, dblValue) </para></example>
            <param name="intToolOffsetNo">Offset no.</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool wear compensation specification NC Spec [26,7]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - WEAR
<para>Table of Cutter R Compensation Wear Offset</para><img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddCutterRCompOffset(System.Int32,System.Double)">
            <summary>
Sets the cutter radius compensation offset value by adding the input value to the existing data at the specified offset index.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the AddCutterRCompOffset method.
<para>Dim objTools As New CTools  </para><para>Dim intToolOffsetNo As Integer </para><para>Dim dblValue As Double </para><para>	    objTools.AddCutterRCompOffset(intToolOffsetNo, dblValue) </para></example>
            <param name="intToolOffsetNo">Offset no.</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - GEOMETRY
<para>Table of Cutter Radius Geometry Offset</para><img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.CalToolLengthWearOffset(System.Int32,System.Double)">
            <summary>
Determines the tool length wear offset value based on the calculation made for the input data.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the CalToolLengthWearOffset method.
<para>Dim objTools As New CTools  </para><para>Dim intToolOffsetNo As Integer </para><para>Dim dblValue As Double </para><para>	    objTools.CalToolLengthWearOffset(intToolOffsetNo, dblValue) </para></example>
            <param name="intToolOffsetNo">Offset no. </param>
            <param name="dblValue">Input data. Actual position value to be calculated from</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool wear compensation specification NC Spec [26,7]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - WEAR
<para>Table of Tool Length Wear Offset</para><img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.CalToolLengthOffset(System.Int32,System.Double)">
            <summary>
Determines the tool length geometry offset value based on the calculation made for the input data.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the CalToolLengthOffset method.
<para>Dim objTools As New CTools  </para><para>Dim intToolOffsetNo As Integer </para><para>Dim dblValue As Double </para><para>	    objTools.CalToolLengthOffset(intToolOffsetNo, dblValue) </para></example>
            <param name="intToolOffsetNo">Offset no. </param>
            <param name="dblValue">Input data. Actual position value to be calculated from</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - GEOMETRY
<para>Table of Tool Length Geometry Offset</para><img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddToolLengthWearOffset(System.Int32,System.Double)">
            <summary>
Sets the tool length wear offset value by adding the input value to the existing data at the specified offset index.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the AddToolLengthWearOffset method.
<para>		Dim objTools As CTools = New CTools</para><para>	    Dim intToolOffsetNo As Int32 </para><para>	    Dim dblValue As Double </para><para>	    objTools.AddToolLengthWearOffset(intToolOffsetNo, dblValue) </para></example>
            <param name="intToolOffsetNo">Offset no.</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool wear compensation specification NC Spec [26,7]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - WEAR
<para><img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddToolLengthOffset(System.Int32,System.Double)">
            <summary>
Sets the tool length geometry offset value by adding the input value to the existing data at the specified offset index.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the AddToolLengthOffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolOffsetNo As Int32 </para><para>	    Dim dblValue As Double </para><para>	    objTools.AddToolLengthOffset(intToolOffsetNo, dblValue) </para></example>
            <param name="intToolOffsetNo">Offset no.</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - GEOMETRY -  Table of Tool Length Geometry Offset.
<para><img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolLengthWearOffset(System.Int32,System.Double)">
            <summary>
Sets the tool length wear offset value at the specified offset index.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the SetToolLengthWearOffset method.
<para>Dim objTools As New CTools  </para><para>Dim intToolOffsetNo As Integer</para><para>Dim dblValue As Double</para><para>objTools.SetToolLengthWearOffset(intToolOffsetNo, dblValue) </para></example>
            <param name="intToolOffsetNo">Offset no. </param>
            <param name="dblValue">offset value to be set</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool wear compensation specification NC Spec [26,7]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - WEAR -  Table of Tool Length Geometry Offset.
<para><img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolLengthOffset(System.Int32,System.Double)">
set tool length offset effects by data set unit
<summary>
Sets the tool length offset value at the specified offset index.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary><example> This sample shows how to call the SetToolLengthOffset method.
<para>Dim objTools As New CTools  </para><para>Dim intToolOffsetNo As Integer</para><para>Dim dblValue As Double</para><para>objTools.SetToolLengthOffset(intToolOffsetNo, dblValue) </para></example><param name="intToolOffsetNo">Offset no. </param><param name="dblValue">offset value to be set</param><DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - GEOMETRY -  Table of Tool Length Geometry Offset.
<para><img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetCutterRCompWearOffset(System.Int32,System.Double)">
            <summary>
Sets the Cutter Radius Compensation Wear offset value at the specified offset index.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the SetCutterRCompWearOffset method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolOffsetNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools.SetCutterRCompWearOffset(intToolOffsetNo, dblValue) </para></example>
            <param name="intToolOffsetNo">Offset no.</param>
            <param name="dblValue">offset value to be set</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool wear compensation specification NC Spec [26,7]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - WEAR
<para>
 Table of Cutter Radius Compensation Geometry Wear Offset
<img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetCutterRCompOffset(System.Int32,System.Double)">
            <summary>
Sets the Cutter Radius Compensation geometry offset value at the specified offset index.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the SetCutterRCompOffset method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolOffsetNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools.SetCutterRCompOffset(intToolOffsetNo, dblValue) </para></example>
            <param name="intToolOffsetNo">Offset no.</param>
            <param name="dblValue">offset value to be set</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - GEOMETRY
<para>
 Table of Cutter Radius Compensation Geometry Offset
<img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolGroupOrder(System.Int32,Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum)">
            <summary>
                <para>Sets the tool group order given tool number</para>
                <para>For P300 or newer controls, tool must be registered and attached to magazine in order to access to this data</para>
                <para>Tool group number must not be equal 0 in order to have a tool group order.</para>
                <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para>
            </summary>
            <example> This sample shows how to call SetToolGroupOrder method.
<para>		Dim objTools As New CTools  </para><para>		Dim enToolGroupOrder As ToolGroupOrderEnum </para><para>		Dim intToolNo As Int32 </para><para>		objTools.SetToolGroupOrder(intToolNo, enToolGroupOrder)) </para></example>
            <param name="intToolNo">Tool number. For P300 or newer controls, tool must be registered and attached to magazine in order to access to this data</param>
            <param name="enValue">Tool group order to be set. Values of parameter come from the Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum enumeration.  </param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Reserve tool change functional specification NC spec [21,0]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure>
                <para> P200/P100II CONTROLS: ORG - The tool group order.</para>
                <para>
                    <img src="../media/MC.TLM.jpg" />
                </para>
                <para> P300 or newer CONTROLS: ORG/SPR - The tool group order.</para>
                <para>
                    <img src="../media/MC.TLM_P300.jpg" />
                </para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetStatus(System.Int32,System.Boolean)">
            <summary>
Sets tool status at the specified tool number.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the SetStatus method.
<para>Dim objTools As CTools = new CTools</para><para>Dim intToolNo As Integer</para><para>Dim blnValue As Boolean</para><para>objTools.SetStatus(intToolNo, blnValue) </para></example>
            <param name="intToolNo">Tool Number</param>
            <param name="blnOK">Tool status to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Reserve tool change functional specification NC spec [21,0]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> OK/NG - Tool status
<para><img src="../media/MC.TLM.jpg" /></para><para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - OK/NG 
<img src="../media/MC.P300.Tooldata.ToolLife.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetReferenceToolOffset3(System.Int32,System.Int32)">
            <summary>
Sets reference tool length/cutter radius compensation offset number 3 at the specified tool number.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para><para>For no reference offset, it is set to 0.</para></summary>
            <example> This sample shows how to call the SetReferenceToolOffset3 method.
<para>	  Dim objTools As New CTools</para><para>	  Dim intToolNo As Integer</para><para>	  Dim intOffsetNo As Integer</para><para>	  objTools.SetReferenceToolOffset3(intToolNo, intOffsetNo) </para></example>
            <param name="intToolNo">Tool Number</param>
            <param name="intValue">Reference tool length/cutter radius compensation offset number to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>Yes</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M</term><description>No</description></item><item><term>P300S</term><description>No</description></item></list></para>
            </remarks>
            <Figure> COMP NO. 3 - Reference Offset number 3
<para><img src="../media/MC.TLM.COMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetReferenceToolOffset2(System.Int32,System.Int32)">
            <summary>
Sets reference tool length/cutter radius compensation offset number 2 at the specified tool number.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para><para>For no reference offset, it is set to 0.</para></summary>
            <example> This sample shows how to call the SetReferenceToolOffset2 method.
<para>	  Dim objTools As New CTools</para><para>	  Dim intToolNo As Integer</para><para>	  Dim intOffsetNo As Integer</para><para>	  objTools.SetReferenceToolOffset2(intToolNo, intOffsetNo) </para></example>
            <param name="intToolNo">Tool Number</param>
            <param name="intValue">Reference tool length/cutter radius compensation offset number to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>Yes</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M</term><description>No</description></item><item><term>P300S</term><description>No</description></item></list></para>
            </remarks>
            <Figure> COMP NO. 2 - Reference Offset number 2
<para><img src="../media/MC.TLM.COMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolLifeRemaining(System.Int32,System.Int32)">
            <summary>
Sets remaining tool life at the specified tool number.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the SetToolLifeRemaining method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolNo As Integer </para><para>		Dim intValue As Integer </para><para>		objTools.SetToolLifeRemaining(intToolNo, intValue) </para></example>
            <param name="intToolNo">Tool Number</param>
            <param name="intValue">Remaining tool life to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
                <para>
The data unit depends on the current setting of management mode:  
</para>
                <list type="table">
                    <listheader>
                        <term>Management Mode</term>
                        <description>Unit</description>
                    </listheader>
                    <item>
                        <term>Not Mode</term>
                        <description>Not applicable</description>
                    </item>
                    <item>
                        <term>Time (Spare)</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Time</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Count (Spare)</term>
                        <description>Pieces</description>
                    </item>
                    <item>
                        <term>Count</term>
                        <description>Pieces</description>
                    </item>
                </list>
            </DataUnit>
            <remarks>
                <para>
Tool must be in management mode other than NOT MODE. Otherwise, an ApplicationException will be generated.
</para>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool Life Management NC Spec [21,1]</term><description>Valid</description></item></list></para>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>Yes</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
            <Figure> LEFT - The remaining tool life
<para><img src="../media/MC.TLM.jpg" /></para><para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - LEFT 
<img src="../media/MC.P300.Tooldata.ToolLife.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolLife(System.Int32,System.Int32)">
            <summary>
Sets tool life at the specified tool number.
<para>For OSP-P200: In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the SetToolLife method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolNo As Integer </para><para>		Dim intValue As Integer </para><para>		objTools.SetToolLife(intToolNo, intValue) </para></example>
            <param name="intToolNo">Tool Number</param>
            <param name="intValue">tool life to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
                <para>
The data unit depends on the current setting of tool life's management mode:  
</para>
                <list type="table">
                    <listheader>
                        <term>Management Mode</term>
                        <description>Unit</description>
                    </listheader>
                    <item>
                        <term>Not Mode</term>
                        <description>Not applicable</description>
                    </item>
                    <item>
                        <term>Time (Spare)</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Time</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Count (Spare)</term>
                        <description>Pieces</description>
                    </item>
                    <item>
                        <term>Count</term>
                        <description>Pieces</description>
                    </item>
                </list>
            </DataUnit>
            <remarks>
                <para>
It will return 0 if it is not in managed mode.
</para>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool Life Management NC Spec [21,1]</term><description>Valid</description></item></list></para>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>Yes</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
            <Figure> SET - Current setting of Tool's life
<para><img src="../media/MC.TLM.jpg" /></para><para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - SET 
<img src="../media/MC.P300.Tooldata.ToolLife.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetGroupNo(System.Int32,System.Int32)">
            <summary>
Sets tool group number at the specified tool number.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the SetGroupNo method.
<para>		Dim objTools As CTools = new CTools</para><para>		Dim intToolNo As Int32 </para><para>		Dim intToolGroupNo As Int32 </para><para>	   objTools.SetGroupNo(intToolNo, intToolGroupNo) </para></example>
            <param name="intToolNo">Tool Number</param>
            <param name="intToolGroupNo">Group number to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
If no tool group has been assigned for this tool number, then it returns a zero.  A group number can be assigned to multiple tool numbers.
</para>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Reserve tool change functional specification NC spec [21,0]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure>
                <para>GRP NO. - Tool Group number.
<img src="../media/MC.TLM.jpg" /></para>
                <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - G.NO 
<img src="../media/MC.P300.Tooldata.ToolLife.jpg" /></para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetMode(System.Int32,Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum)">
            <summary>
Sets tool life management mode at the specified tool number.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the SetMode method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolNo As Integer </para><para>		Dim enValue As ToolLifeModeEnum </para><para>		objTools.SetMode(intToolNo, enValue) </para></example>
            <param name="intToolNo">Tool Number</param>
            <param name="enValue">Tool Life management mode to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Reserve tool change functional specification NC spec [21,0]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> MNG.MODE - Management mode
<para><img src="../media/MC.TLM.jpg" /></para><para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - MNG.MODE
<img src="../media/MC.P300.Tooldata.ToolLife.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetDataUnit(Okuma.CMDATAPI.Enumerations.DataUnitEnum)">
            <summary>
Sets current data unit for this class instance.
</summary>
            <example> This sample code shows how to call the SetDataUnit() method.
<para> Dim objTools As New CTools </para><para> Dim enDataUnit As DataUnitEnum = DataUnitEnum.Unit_Inch </para><para>	objTools.SetDataUnit(enDataUnit) </para></example>
            <param name="enDataUnit">Data Unit to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
If applicable, this setting is applied to data in this class instance only, not for NC Data Unit.
For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, 
then NC data will be converted to inch and vice versa.
</remarks>
            <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. 
<para><img src="../media/MC.Parameter.DataUnit.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolList(Okuma.CMDATAPI.Enumerations.ToolListTypeEnum)">
            <summary>Get tool list given tool list type for current sub system.
<para> This function is not applicable for machines equipped with TOOL ID option</para></summary>
            <example> This sample shows how to call the GetToolList() method.
<para> Assuming that the tools listed on NC-HMI are:</para><para>		1,2,3,4,5,6,7,8,9,10 </para><para>		1,2,3,4,5 are registered tools </para><para>		6,7,8,9,10 are attached tools </para><para>		The function will return 1,2,3,4,5,6,7,8,9 and 10  if tool list type is for AllTools </para><para>		The function will return 1,2,3,4 and 5  if tool list type is for RegisteredTools </para><para>		The function will return 6,7,8,9 and 10  if tool list type is for AttachedTools </para><para>		Dim enToolListType As ToolListTypeEnum = ToolListTypeEnum.RegisteredTools </para><para>		Dim intValues As Int32() </para><para>	    intValues = objTool.GetToolList(enToolListType)	</para></example>
            <param name="enToolListType">Tool list type</param>
            <returns>An array of distinct tool number in the system based on tool list type</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - TOOL NO.
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolMaxSpeed(System.Int32)">
            <summary>
Gets tool max speed given tool number
</summary>
            <example> This sample shows how to call the GetToolMaxSpeed method.
<para>Dim objTools As CTools = new CTools</para><para>Dim intToolNo As Integer</para><para>Dim intMaxSpeed As Integer</para><para> intMaxSpeed = objTools.GetToolMaxSpeed(intToolNo) </para></example>
            <param name="intToolNo">Tool Number</param>
            <returns>A System.Int32 value represents tool's max speed</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>PLC Spec Code 1 [31,6] must be on in order to function correctly.</para>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
            <Figure>
                <para> For OSP-P300S(MP)/M - TOOL DATA EDIT - S_UPPER_LIM
<img src="../media/MC.ToolDataEdit.P300M.jpg" /></para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolName(System.Int32)">
            <summary>
Gets tool name given tool number
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetToolName method.
<para>Dim objTools As CTools = new CTools</para><para>Dim intToolNo As Integer</para><para>Dim strToolName As String</para><para>strToolName = objTools.GetToolName(intToolNo) </para></example>
            <param name="intToolNo">Tool Number</param>
            <returns>A String value represents name of tool</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
            <Figure>
                <para> For OSP-P300S(MP)/M - TOOL DATA EDIT - TOOL NAME
<img src="../media/MC.ToolDataEdit.P300M.jpg" /></para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolType(System.Int32)">
            <summary>Get tool type given tool number</summary>
            <param name="intToolNo">Tool number</param>
            <returns>
                <para> A String value that represents tool type given tool number.</para>
                <para> List of different types of tool: UNDEF, ACS.TL, CNT-DRL, SPT-DRL, DRILL, REAMER, BORING, BACK-BOR, CHAMFER, TAP, HELI-TAP, END-MILL, BL-EMILL, RD-MILL, FACEMILL, SIDE-CTR</para>
            </returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> For OSP-P300 controls:
<para> TOOL DATA - TOOL GEOMETRY - TYPE
<img src="../media/MC.P300.ToolData.jpg" /></para></Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCutterRWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum)">
            <overloads>This function has 3 overload methods to get tool length geometry offset value.</overloads>
            <summary>
Gets the cutter radius compensation wear offset data at the specified tool number and tool compensation number
</summary>
            <example> This sample shows how to call the GetCutterRWearOffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    dblValue = objTools.GetCutterRWearOffset(intToolNo, enToolCompensation) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="enToolCompensation">Tool compensation number</param>
            <returns>A System.Double value that represents the cutter radius compensation wear offset data at the specified tool number and tool compensation number.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - CUTTER R COMP - WEAR - DA/DB/DC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCutterROffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum)">
            <summary>
Gets the cutter radius compensation offset data at the specified tool number and tool compensation number
</summary>
            <example> This sample shows how to call the GetCutterROffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    dblValue = objTools.GetCutterROffset(intToolNo, enToolCompensation) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="enToolCompensation">Tool compensation number</param>
            <returns>A System.Double value that represents the cutter radius compensation offset data at the specified tool number and tool compensation number.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - CUTTER R COMP - GEOMETRY - DA/DB/DC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum)">
            <summary>
Gets the tool length geometry wear offset data at the specified tool number and tool compensation number
</summary>
            <example> This sample shows how to call the GetToolWearOffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    dblValue = objTools.GetToolWearOffset(intToolNo, enToolCompensation) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="enToolCompensation">Tool compensation number</param>
            <returns>A System.Double value that represents the tool length geometry wear offset data at the specified tool number and tool compensation number.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para> OSP-P300 - TOOL DATA - TOOL-L OFST - WEAR - HA/HB/HC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCutterRCompWearOffset(System.Int32)">
            <overloads>This function has multiple overload methods to get cutter radius compensation wear offset value.</overloads>
            <summary>
Gets the Cutter Radius Compensation Wear offset data at the specified offset index.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetCutterRCompWearOffset method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolOffsetNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools.GetCutterRCompWearOffset(intToolOffsetNo) </para></example>
            <param name="intToolOffsetNo">Cutter Radius Compensation Wear offset index.  The 1-based index at which the Cutter Radius Compensation Wear offset information is obtained</param>
            <returns>A System.Double value that represents the Cutter Radius Compensation Wear offset data at the specified offset index.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool wear compensation specification NC Spec [26,7]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - WEAR
<para>
Table of Cutter Radius Compensation Geometry Wear Offset
<img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCutterRCompWearOffset(System.Int32,System.Int32)">
            <summary>
Get Cutter Radius Compensation Wear offset values at the specified offset indexes.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetCutterRCompWearOffset method.
The function will return an array of offset values from the starting offset index to the ending offset index.
<para>Dim objTools As New CTools  </para><para>Dim intFromOffsetIndex As Integer </para><para>Dim intToOffsetIndex As Integer </para><para>Dim dblResults() As Double </para><para>	    dblResults = objTools.GetCutterRCompWearOffset(intFromOffsetIndex, intToOffsetIndex) </para></example>
            <param name="intFromOffsetIndex">Starting offset index.  The 1-based index at which the Cutter Radius Compensation Wear offset information is obtained</param>
            <param name="intToOffsetIndex">Ending offset index.  The 1-based index at which the Cutter Radius Compensation Wear offset information is obtained</param>
            <returns>An array of System.Double represents the cutter radius compensation Wear offset values at the specified offset indexes.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool wear compensation specification NC Spec [26,7]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - WEAR
<para>
Table of Cutter Radius Compensation Geometry Wear Offset.
<img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCutterRCompOffset(System.Int32)">
            <overloads>This function has multiple overload methods to get cutter radius compensation offset value.</overloads>
            <summary>
Gets the Cutter Radius Compensation offset data at the specified offset index.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetCutterRCompOffset method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolOffsetNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools.GetCutterRCompOffset(intToolOffsetNo) </para></example>
            <param name="intToolOffsetNo">Cutter Radius Compensation offset index.  The 1-based index at which the Cutter Radius Compensation offset information is obtained</param>
            <returns>A System.Double value that represents the Cutter Radius Compensation offset data at the specified offset index.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - GEOMETRY
<para>
Table of Cutter Radius Compensation Geometry Offset.
<img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCutterRCompOffset(System.Int32,System.Int32)">
            <summary>
Get Cutter Radius Compensation offset value at the specified offset indexes.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetCutterRCompOffset method.
The function will return an array of offset values from the starting offset index to the ending offset index.
<para>Dim objTools As New CTools  </para><para>Dim intFromOffsetIndex As Integer </para><para>Dim intToOffsetIndex As Integer </para><para>Dim dblResults() As Double </para><para>	    dblResults = objTools.GetCutterRCompOffset(intFromOffsetIndex, intToOffsetIndex) </para></example>
            <param name="intFromOffsetIndex">Starting offset index.  The 1-based index at which the Cutter Radius Compensation offset information is obtained</param>
            <param name="intToOffsetIndex">Ending offset index.  The 1-based index at which the Cutter Radius Compensation offset information is obtained</param>
            <returns>An array of System.Double represents the cutter radius compensation offset values at the specified offset indexes.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - GEOMETRY
<para>
Table of Cutter Radius Compensation Geometry Offset
<img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLengthWearOffset(System.Int32)">
            <overloads>This function has multiple overload methods to get tool length wear offset value.</overloads>
            <summary>
Gets the tool length wear offset data at the specified offset index.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetToolLengthWearOffset method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolOffsetNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools.GetToolLengthWearOffset(intToolOffsetNo) </para></example>
            <param name="intToolOffsetNo">Tool length wear offset index.  The 1-based index at which the tool length wear offset information is obtained</param>
            <returns>A System.Double value that represents the tool length wear offset data at the specified offset index.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool wear compensation specification NC Spec [26,7]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - WEAR -  Table of Tool Length Geometry Offset.
<para><img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLengthWearOffset(System.Int32,System.Int32)">
            <summary>
Get the tool length wear offset values at the specified offset indexes.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetToolLengthWearOffset method.
<para>Dim objTools As New CTools  </para><para>Dim intFromOffsetIndex As Integer </para><para>Dim intToOffsetIndex As Integer </para><para>Dim dblResults() As Double </para><para>	    dblResults = objTools.GetToolLengthWearOffset(intFromOffsetIndex, intToOffsetIndex) </para></example>
            <param name="intFromOffsetIndex">Starting offset index.  The 1-based index at which the tool length wear offset information is obtained</param>
            <param name="intToOffsetIndex">Ending offset index.  The 1-based index at which the tool length wear offset information is obtained</param>
            <returns>An array of System.Double represents the tool length wear offset values at the specified offset indexes.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool wear compensation specification NC Spec [26,7]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - WEAR
<para>
 Table of Tool Length Geometry Offset
<img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLengthOffset(System.Int32)">
            <overloads>This function has multiple overload methods to get tool length geometry offset value.</overloads>
            <summary>
Gets the tool length geometry offset data at the specified offset index
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetToolLengthOffset method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolOffsetNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools.GetToolLengthOffset(intToolOffsetNo) </para></example>&gt;
<param name="intToolOffsetNo">Tool length offset index.  The 1-based index at which the tool length offset information is obtained</param><returns>A System.Double value that represents the tool length geometry offset data at the specified offset index.</returns><DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - GEOMETRY
<para>
Table of Tool Length Geometry Offset
<img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLengthOffset(System.Int32,System.Int32)">
            <summary>
Get the tool length geometry offset values at the specified offset indexes.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetToolLengthOffset method.
<para>Dim objTools As New CTools  </para><para>Dim intFromOffsetIndex As Integer </para><para>Dim intToOffsetIndex As Integer </para><para>Dim dblResults() As Double </para><para>	    dblResults = objTools.GetToolLengthOffset(intFromOffsetIndex, intToOffsetIndex) </para></example>
            <param name="intFromOffsetIndex">Starting offset index.  The 1-based index at which the tool length offset information is obtained</param>
            <param name="intToOffsetIndex">Ending offset index.  The 1-based index at which the tool length offset information is obtained</param>
            <returns>An array of System.Double represents the tool length geometry offset values at the specified offset indexes.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - GEOMETRY
<para>
 Table of Tool Length Geometry Offset
<img src="../media/MC.TOOLDATA.TOOLWEARCOMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolGroupOrder(System.Int32)">
            <summary>
                <para>Gets the tool group order.</para>
                <para>For P300 or newer controls, tool must be registered and attached to magazine in order to access to this data</para>
                <para>Tool group number must not be equal 0 in order to have a tool group order.</para>
                <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para>
            </summary>
            <example> This sample shows how to call GetToolGroupOrder method.
<para>		Dim objTools As New CTools  </para><para>		Dim enToolGroupOrder As ToolGroupOrderEnum </para><para>		Dim intToolNo As Integer </para><para>		enToolGroupOrder = objTools.GetToolGroupOrder(intToolNo) </para></example>
            <param name="intToolNo">Tool number. For P300 or newer controls, tool must be registered and attached to magazine in order to access to this data</param>
            <returns>An Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum enumeration value that represents the tool group order.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Reserve tool change functional specification NC spec [21,0]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure>
                <para> P200/P100II CONTROLS: ORG - The tool group order.</para>
                <para>
                    <img src="../media/MC.TLM.jpg" />
                </para>
                <para> P300 or newer CONTROLS: ORG/SPR - The tool group order.</para>
                <para>
                    <img src="../media/MC.TLM_P300.jpg" />
                </para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolKind(System.Int32)">
            <summary>
Gets tool kind at the specified tool number
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para><para>Note: On P300 HMI, abbreviation order is not fixed. (e.g. Large Diameter Heavy Tool could display as either 'LM' or 'ML')</para></summary>
            <example> This sample shows how to call the GetToolKind method.
<para>		Dim objTools As New CTools  </para><para>	    Dim intToolNo As Integer </para><para>	    Dim strValue As String </para><para>	    strValue  = objTools.GetToolKind(intToolNo) </para></example>
            <param name="intToolNo">Tool number</param>
            <returns>A System.String value represents the tool kind at the specified tool number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
List of available tool kind:
</para>
                <list type="table">
                    <listheader>
                        <term>Tool Kind</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>(Blank)</term>
                        <description>Tool without any attribute</description>
                    </item>
                    <item>
                        <term>M</term>
                        <description>Heavy Tool</description>
                    </item>
                    <item>
                        <term>P</term>
                        <description>Planer Tool</description>
                    </item>
                    <item>
                        <term>PM</term>
                        <description>A heavy planer tool</description>
                    </item>
                    <item>
                        <term>A</term>
                        <description>Attachment Tool</description>
                    </item>
                    <item>
                        <term>AM</term>
                        <description>A heavy attachment tool</description>
                    </item>
                    <item>
                        <term>U</term>
                        <description>An axial tool</description>
                    </item>
                    <item>
                        <term>UM</term>
                        <description>A heavy axial tool</description>
                    </item>
                    <item>
                        <term>N</term>
                        <description>Manual attachement tool</description>
                    </item>
                    <item>
                        <term>B</term>
                        <description>A tool with a lid</description>
                    </item>
                    <item>
                        <term>L</term>
                        <description>Large diameter tool</description>
                    </item>
                    <item>
                        <term>LM (ML on OSP-P300)</term>
                        <description>Large diameter and heavy tool</description>
                    </item>
                    <item>
                        <term>PL</term>
                        <description>A large diameter planer tool</description>
                    </item>
                    <item>
                        <term>PLM</term>
                        <description>A heavy and large diameter planer tool</description>
                    </item>
                    <item>
                        <term>AL</term>
                        <description>A large diameter attachement tool</description>
                    </item>
                    <item>
                        <term>ALM</term>
                        <description>A heavy and large diameter attachement tool</description>
                    </item>
                    <item>
                        <term>UL</term>
                        <description>A large diameter axial tool</description>
                    </item>
                    <item>
                        <term>ULM</term>
                        <description>A heavy and large diameter axial tool</description>
                    </item>
                    <item>
                        <term>NL</term>
                        <description>Large diameter of manual attachement tool</description>
                    </item>
                    <item>
                        <term>BL</term>
                        <description>A large diameter tool with a lid</description>
                    </item>
                    <item>
                        <term>D</term>
                        <description>Dummy tool</description>
                    </item>
                    <item>
                        <term>C</term>
                        <description>Thru-Spindle Coolant Tool</description>
                    </item>
                    <item>
                        <term>T</term>
                        <description>Turning Tool</description>
                    </item>
                    <item>
                        <term>S</term>
                        <description>Light Tool</description>
                    </item>
                    <item>
                        <term>E</term>
                        <description>Long Tool</description>
                    </item>
                    <item>
                        <term>F</term>
                        <description>Super large diameter Tool</description>
                    </item>
                    <item>
                        <term>H</term>
                        <description>Small-diameter Tool</description>
                    </item>
                    <item>
                        <term>R</term>
                        <description>Standard boring Tool</description>
                    </item>
                    <item>
                        <term>J</term>
                        <description>Medium-diameter Tool</description>
                    </item>
                    <item>
                        <term>K</term>
                        <description>Medium-diameter boring Tool</description>
                    </item>
                    <item>
                        <term>V</term>
                        <description>Large-diameter single-side boring Tool</description>
                    </item>
                    <item>
                        <term>W</term>
                        <description>Large-diameter double-side boring Tool</description>
                    </item>
                    <item>
                        <term>X</term>
                        <description>Super Large-diameter single-side boring Tool</description>
                    </item>
                </list>
            </remarks>
            <Figure> POT NO./TOOL NO. - ATC Tool Pot Table
<para><img src="../media/atc.jpg" /></para><para> For OSP-P300S(MP)/M - TOOL DATA - MAGAZINE INFO. - ATT.
<img src="../media/MC.P300.Tooldata.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLife(System.Int32)">
            <summary>
Gets setting (SET) of tool life for this tool number.
<para>For OSP-P200: In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetToolLife method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolNo As Integer </para><para>		intValue = objTools.GetToolLife(intToolNo) </para></example>
            <param name="intToolNo">Tool number</param>
            <returns>A System.Int32 value that represents the setting (SET) of tool life for this tool number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
                <para>
The data unit depends on the current setting of tool life's management mode:  
</para>
                <list type="table">
                    <listheader>
                        <term>Management Mode</term>
                        <description>Unit</description>
                    </listheader>
                    <item>
                        <term>Not Mode</term>
                        <description>Not applicable</description>
                    </item>
                    <item>
                        <term>Time (Spare)</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Time</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Count (Spare)</term>
                        <description>Pieces</description>
                    </item>
                    <item>
                        <term>Count</term>
                        <description>Pieces</description>
                    </item>
                </list>
            </DataUnit>
            <remarks>
                <para>
It will return 0 if it is not in managed mode.
</para>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool Life Management NC Spec [21,1]</term><description>Valid</description></item></list></para>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>Yes</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
            <Figure> SET - Current setting of Tool's life
<para><img src="../media/MC.TLM.jpg" /></para><para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - SET 
<img src="../media/MC.P300.Tooldata.ToolLife.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLifeRemainingTimeSecond(System.Int32)">
            <summary>
Gets the remaining tool's life in second data area for this tool number.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetToolLifeRemainingTimeSecond method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolNo As Integer </para><para>		intValue = objTools.GetToolLifeRemainingTimeSecond(intToolNo) </para></example>
            <param name="intToolNo">Tool number</param>
            <returns>A System.Int32 value that represents the remaining tool's life in second data area for this tool number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
The unit is always in seconds for tool life mode in Time or Time Spare.
</DataUnit>
            <remarks>
                <para>
If tool is not in Time/Time (Spare) managed mode, then it returns a zero.
</para>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool Life Management NC Spec [21,1]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> LEFT - 12345:0 - In this case, the remaining tool life is 12345 minutes and 0 second.
<para><img src="../media/MC.TLM.jpg" /></para><para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - LEFT : 0
<img src="../media/MC.P300.Tooldata.ToolLife.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLifeRemaining(System.Int32)">
            <summary>
Gets the remaining tool's life for this tool number.  The remaining tool life value is decreased as the machine is cutting part.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetToolLifeRemaining method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolNo As Integer </para><para>		intValue = objTools.GetToolLifeRemaining(intToolNo) </para></example>
            <param name="intToolNo">Tool number</param>
            <returns>A System.Int32 value that represents the remaining tool's life for this tool number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
                <para>
The data unit depends on the current setting of management mode:  
</para>
                <list type="table">
                    <listheader>
                        <term>Management Mode</term>
                        <description>Unit</description>
                    </listheader>
                    <item>
                        <term>Not Mode</term>
                        <description>Not applicable</description>
                    </item>
                    <item>
                        <term>Time (Spare)</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Time</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Count (Spare)</term>
                        <description>Pieces</description>
                    </item>
                    <item>
                        <term>Count</term>
                        <description>Pieces</description>
                    </item>
                </list>
            </DataUnit>
            <remarks>
                <para>
It will return zero if it is not in managed mode.
</para>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Tool Life Management NC Spec [21,1]</term><description>Valid</description></item></list></para>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>Yes</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
            <Figure> LEFT - The remaining tool life
<para><img src="../media/MC.TLM.jpg" /></para><para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - LEFT 
<img src="../media/MC.P300.Tooldata.ToolLife.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetStatus(System.Int32)">
            <summary>
Gets the tool life status at the specified tool number.  It does not rely on the current setting of tool life managent mode.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetStatus method.
<para>		Dim objTools As CTool = new CTools </para><para>		Dim intToolNo As Integer </para><para>		Dim enToolLifeStatus As ToolLifeStatusEnum </para><para>	    enToolLifeStatus = objTools.GetStatus(intToolNo) </para></example>
            <param name="intToolNo">Tool number</param>
            <returns>An Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum enumeration value that represents the tool life status at the specified tool number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Reserve tool change functional specification NC spec [21,0]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> OK/NG - Tool life status
<para><img src="../media/MC.TLM.jpg" /></para><para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - OK/NG 
<img src="../media/MC.P300.Tooldata.ToolLife.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetReferenceToolOffset3(System.Int32)">
            <summary>
Gets the reference tool length/cutter radius compensation offset number 3 for this tool number
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetReferenceToolOffset3 method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools.GetReferenceToolOffset3(intToolNo) </para></example>
            <param name="intToolNo">Tool number</param>
            <returns>A System.Int32 value that represents the reference tool length/cutter radius compensation offset number 3 for this tool number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
If no reference tool offset is assigned for this tool number, it returns a zero.
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>Yes</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M</term><description>No</description></item><item><term>P300S</term><description>No</description></item></list></para>
            </remarks>
            <Figure> COMP NO.3 - The reference tool offset number 3.
<para><img src="../media/MC.TLM.COMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetReferenceToolOffset2(System.Int32)">
            <summary>
Gets the reference tool length/cutter radius compensation offset number 2 for the specified tool number.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetReferenceToolOffset2 method.
<para>		Dim objTools As New CTools  </para><para>		Dim intToolNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools.GetReferenceToolOffset2(intToolNo) </para></example>
            <param name="intToolNo">Tool number</param>
            <returns>A System.Int32 value that represents the reference tool length/cutter radius compensation offset number 2 for the specified tool number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
If no reference tool offset is assigned for this tool number, it returns a zero.
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>Yes</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M</term><description>No</description></item><item><term>P300S</term><description>No</description></item></list></para>
            </remarks>
            <Figure> COMP NO.2 - The reference offset number 2.
<para><img src="../media/MC.TLM.COMP.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetMode(System.Int32)">
            <summary>
Gets the current setting of tool life management mode at the specified tool number.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetMode method.
<para>		Dim objTools As New CTools  </para><para>	    Dim intToolNo As Integer</para><para>	    Dim enValue As ToolLifeModeEnum</para><para>	    enValue = objTools.GetMode(intToolNo) </para></example>
            <param name="intToolNo">Tool number</param>
            <returns>An Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum enumeration value that represenst the current setting of tool life management mode at the specified tool number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Reserve tool change functional specification NC spec [21,0]</term><description>Valid</description></item></list></para>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>Yes</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
            <Figure> MNG.MODE - Management mode
<para><img src="../media/MC.TLM.jpg" /></para><para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - MNG.MODE
<img src="../media/MC.P300.Tooldata.ToolLife.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetPotNo(System.Int32)">
            <summary>
Gets the pot number assigned at the specified tool number.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetPotNo method.
<para>		Dim objTools As New CTools  </para><para>	    Dim intToolNo As Integer </para><para>	    intValue = objTools.GetPotNo(intToolNo) </para></example>
            <param name="intToolNo">Tool number</param>
            <returns> A System.Int32 value that represents the pot number assigned at the specified tool number.
<list type="table"><listheader><term> Case </term><term> Int32 returned </term></listheader><item><description> Tool is attatched to the pot number</description><description> POT NO. </description></item><item><description> Tool is not attached to any pot </description><description> 0 </description></item><item><description> Tool is not registered </description><description> ApplicationException is thrown</description></item><item><description> intToolNo is out of range </description><description> NotSupportedException is thrown </description></item></list></returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
An NA displaying in POT NO. column (see Figure below) means tool is not registered to any pot.
</remarks>
            <Figure> POT NO. - Tool Pot number.
<para><img src="../media/MC.TLM.jpg" /></para></Figure>
            <Figure> For OSP-P300 controls:
<para> TOOL DATA - MAGAZINE INFO.
<img src="../media/MC.P300.ToolData.ATC.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetGroupNo(System.Int32)">
            <summary>
Gets the group number assigned for this tool number
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetGroupNo method.
<para>		Dim objTools As CTools = New CTools</para><para>		Dim intToolNo As Int32 </para><para>		Dim intGroupNo As Int32 </para><para>	   intGroupNo = objTools.GetGroupNo(intToolNo) </para></example>
            <param name="intToolNo">Tool number</param>
            <returns>A System.Int32 value that represents the group number assigned for this tool number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
If no tool group has been assigned for this tool number, then it returns a zero.  A group number can be assigned to multiple tool numbers.
</para>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Reserve tool change functional specification NC spec [21,0]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure>
                <para>GRP NO. - Tool Group number.
<img src="../media/MC.TLM.jpg" /></para>
                <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - G.NO 
<img src="../media/MC.P300.Tooldata.ToolLife.jpg" /></para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetMaxTools">
            <summary>
 Gets number of tools configured for this system.
<para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para></summary>
            <example> This sample shows how to call the GetMaxTools method.
<para>Dim objTools As New CTools  </para><para>Dim intValue As Int32 </para><para> intValue = objTools.GetMaxTools </para></example>
            <returns>A System.Int32 value that represents the number of tools configured for this system.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>*/
</member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCurrentToolLengthOffsetNumber">
            <summary>
                <para>Gets the current tool offset number in use.</para>
For OSP-P300 controls, if current tool offset is HA/HB/HC the return value
will be 10001/10002/10003, respectively.
</summary>
            <example> This sample shows how to call the GetCurrentToolLengthOffsetNumber method.
<para>Dim objTools As New CTools  </para><para>Dim intValue As Integer </para><para> intValue = objTools.GetCurrentToolLengthOffsetNumber() </para></example>
            <returns>A System.Int32 value that represents the current tool offset number in use.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> H - Current Tool Offset number in use
<para><img src="../media/ActualPosition-p1.jpg" /></para></Figure>
            <Figure> For OSP-P300 controls:
<para> H - Current Tool Length Offset number in use</para><img src="../media/MC.P300.MDI.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCurrentCutterRCompOffsetNumber">
            <summary>
                <para>Gets the current Cutter Radius Compensation number in use.</para>
For OSP-P300 controls, if current tool offset is DA/DB/DC the return value
will be 10001/10002/10003, respectively.
</summary>
            <example> This sample shows how to call the GetCurrentCutterRCompOffsetNumber method.
<para>Dim objTools As New CTools  </para><para>Dim intValue As Integer </para><para> intValue = objTools.GetCurrentCutterRCompOffsetNumber() </para></example>
            <returns>A System.Int32 value that represents the current Cutter Radius Compensation number in use.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> D - Current Cutter Radius Offset number in use
<para><img src="../media/ActualPosition-p1.jpg" /></para></Figure>
            <Figure>
                <para> D - Current Cutter Radius Offset number in use</para>
                <img src="../media/MC.P300.MDI.jpg" />
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCurrentToolNumber">
            <summary>
Gets current active tool number mounted in the spindle.
<para>For 8 Digits Tool ID spec. with Random ATC type: it returns the value of Tc as tool number instead of TF value as displayed in ATC operation NC-HMI screen</para><para>For 8 Digits Tool ID spec. with Fixed ATC type: it returns the value of Tc as pot number instead of TF value as displayed in ATC operation NC-HMI screen</para></summary>
            <example> This sample shows how to call the GetCurrentToolNumber method.
<para>Dim objTools As New CTools  </para><para>Dim intValue As Int32 </para><para>	intValue = objTools.GetCurrentToolNumber() </para></example>
            <returns>A System.Int32 value that represents the current active tool number mounted in the spindle.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> T  - Current tool number
<para><img src="../media/MC.ActualPosition.P4.jpg" /></para><para> For OSP-P300S(MP)/M - ACT T.No.
<img src="../media/MC.P300.ToolData.ATC.jpg" /></para></Figure>
            <remarks>
This current tool number is the same tool number obtaining in the CATC.GetActualTool without tool attributes.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.IsLargeTool(System.Int32)">
            <summary>
Check for large tool type
</summary>
            <example> This sample shows how to call the IsLargeTool method.
</example>
            <param name="intToolNo"> Tool Number.</param>
            <returns>A System.Boolean Value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.IsHeavyTool(System.Int32)">
            <summary>
Check for heavy tool type
</summary>
            <example> This sample shows how to call the IsHeavyTool method.
</example>
            <param name="intToolNo"> Tool Number.</param>
            <returns>A System.Boolean Value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum)">
OPS-P300 functions
<summary>
Gets the tool length geometry offset data at the specified tool number and tool compensation number
</summary><example> This sample shows how to call the GetToolOffset method.
<para>		Dim objTools As CTools = new CTools</para><para>	    Dim intToolNo As Int32 </para><para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para><para>	    Dim dblValue As Double </para><para>	    dblValue = objTools.GetToolOffset(intToolNo, enToolCompensation) </para></example><param name="intToolNo">Tool number</param><param name="enToolCompensation">Tool compensation number</param><returns>A System.Double value that represents the tool length geometry offset data at the specified tool number and tool compensation number.</returns><DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure><para> OSP-P300 - TOOL DATA - TOOL-L OFST - GEOMETRY - HA/HB/HC
<img src="../media/MC.P300.TOOLDATA.jpg" /></para></Figure><remarks><para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para></remarks></member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CTools">
            <summary>
Class provides different offsets and tool life information.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CIO.SetProtectedUserTaskOutputVariable(System.Int32,Okuma.CMDATAPI.Enumerations.OnOffStateEnum)">
            <summary>Protect User Task Output I/O variable from writing in NC given variable index.
If a User Task Output I/O variable has been set for protection it will prevent NC from writing into this ouptut variable.
For example: VDOUT[1] = 1 will generate a NC alarm if output variable 1 is protected.
</summary>
            <example> This example shows how to call SetProtectedUserTaskOutputVariable method
<para>  Dim objCIO As New CIO </para><para>  Dim intIndex As Integer	</para><para>  Dim enValue as OnOffStateEnum = OnOffStateEnum.ON </para><para>  objIO.SetProtectedUserTaskOutputVariable(intIndex, enValue)	</para></example>
            <param name="intIndex">User Task output I/O variable index. Valid variable indexes are ranging from 1-16.</param>
            <param name="enValue">It is in protected mode if setting value is ON, otherwise it is un-protected. Values of parameter come from Okuma.CMDATAPI.Enumerations.OnOffStateEnum enumeration.</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> I/O Monitor application
<para><img src="../media/MC.IO.Monitor.UserTaskIO.jpg" /></para></Figure>
            <remarks>
                <para>
********************* This function can only be supported in OSP-P200 machines. ************************
</para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CIO.SetUserTaskOutputVariable(System.Int32,Okuma.CMDATAPI.Enumerations.OnOffStateEnum)">
            <summary>Sets User Task Output I/O variable given variable index.
</summary>
            <example> This example shows how to call SetUserTaskOutputVariable method
<para>  Dim objCIO As New CIO </para><para>  Dim intIndex As Integer	</para><para>  Dim enValue as OnOffStateEnum = OnOffStateEnum.ON </para><para>  objIO.SetUserTaskOutputVariable(intIndex, enValue)	</para></example>
            <param name="intIndex">User Task I/O variable index. Valid variable indexes are ranging from 1-16.</param>
            <param name="enValue">User Task output value to be set.  Values of parameter come from Okuma.CMDATAPI.Enumerations.OnOffStateEnum enumeration.</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> I/O Monitor application
<para><img src="../media/MC.IO.Monitor.UserTaskIO.jpg" /></para></Figure>
            <remarks>
                <para>
********************* This function can only be supported in OSP-P200 machines or new controls. ************************
</para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetIO(System.String)">
            <summary>
Gets I/O address value given I/O label. 
</summary>
            <example> This example shows how to call GetLabel method
<code escaped="true" language="vbnet">
 Dim vtIOAddress As IOAddress 
 Dim strIOLabel As String = ""
 Dim strIOBitIndex As String = ""
 Dim strIOBitNo As String = ""
 Dim strIOBit As String = ""
 Dim strIOWordIndex As String = ""
 Dim strIOWord As String = ""
 Dim strIOLongWordIndex As String = ""
 Dim strIOLongWord As String = ""
 vtIOAddress = m_objIO.GetIO(strIOLabel) 
 cboIOVariableTypes.SelectedIndex = (vtIOAddress.enIOType) 
 Select Case vtIOAddress.enSize 
	Case IOAddressSizeEnum.Bit 
			strIOBitIndex = vtIOAddress.Address 
			strIOBitNo = vtIOAddress.Bit 
			strIOBit = vtIOAddress.Value 
    Case IOAddressSizeEnum.Word 
         strIOWordIndex = vtIOAddress.Address 
         strIOWord = vtIOAddress.Value 
	Case IOAddressSizeEnum.DWord 
          strIOLongWordIndex = vtIOAddress.Address 
          strIOLongWord = vtIOAddress.Value 
     Case Else 
          Throw New ApplicationException("Error I/O Label") 
End Select 
</code></example>
            <param name="strLabel">An I/O address label for Bit/Word/Long Word.  It is case-sensitive and cannot be blank label.</param>
            <returns>An I/O address data value associated with the label if it is found. Otherwise, address/bit location will be reset to -1, and 0 respectively.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> I/O Monitor application
<para><img src="../media/MC.IO.Monitor.Bit.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetLabel(Okuma.CMDATAPI.DataAPI.CIOAddress)">
            <summary>
Gets label associated with the I/O address location, I/O size, and I/O type. 
</summary>
            <example> This example shows how to call GetLabel method
<para> Dim objAddress As CIOAddress = new CIOAddress</para><para> Dim strValue As String </para><para> objAddress.Address = 11 </para><para> objAddress.Bit = 15 </para><para> objAddress.enSize = IOAddressSizeEnum.Bit </para><para> objAddress.enIOType = IOTypeEnum.Input </para><para> strValue = m_objIO.GetLabel(objAddress) </para></example>
            <param name="objIOAddress">I/O address location, I/O address size, and I/O type </param>
            <returns>A System.String value that represents the label if it can be found based on the given information.  It can be empty if no label assigned to an I/O address location</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> I/O Monitor application
<para><img src="../media/MC.IO.Monitor.Bit.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetProtectedUserTaskOutputVariable(System.Int32)">
            <summary>Gets protected User Task I/O output variable given variable index.
</summary>
            <example> This example shows how to call GetProtectedUserTaskOuptutVariable method
<para>  Dim objCIO As New CIO </para><para>  Dim enValue As OnOffStateEnum	</para><para>  Dim intIndex As Integer	</para><para>  enValue = objIO.GetProtectedUserTaskOuptutVariable(intIndex)	</para></example>
            <param name="intIndex">User Task I/O variable index. Valid variable indexes are ranging from 1-16.</param>
            <returns>An Okuma.CMDATAPI.Enumerations.OnOffStateEnum enumeration value.  It is in protected mode if it is ON otherwise not protected</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> I/O Monitor application
<para><img src="../media/MC.IO.Monitor.UserTaskIO.jpg" /></para></Figure>
            <remarks>
                <para>
********************* This function can only be supported in OSP-P200 machines or newer controls. ************************
</para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetUserTaskIOVariable(Okuma.CMDATAPI.Enumerations.IOTypeEnum,System.Int32)">
            <summary>Gets User Task I/O variable given I/O type and variable index.
</summary>
            <example> This example shows how to call GetUserTaskIOVariable method
<para>  Dim objCIO As New CIO </para><para>  Dim enIO As IOTypeEnum	</para><para>  Dim enValue As OnOffStateEnum	</para><para>  Dim intIndex As Integer	</para><para>  enValue = objIO.GetUserTaskIOVariable(enIO, intIndex)	</para></example>
            <param name="enIO">I/O variable type.  Values of parameter come from Okuma.CMDATAPI.Enumerations.IOTypeEnum enumeration.</param>
            <param name="intIndex">User Task I/O variable index. Valid variable indexes are ranging from 1-16.</param>
            <returns>A Okuma.CMDATAPI.Enumerations.OnOffStateEnum enumeration value represents the User Task I/O variable given I/O type and variable index.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> I/O Monitor application
<para><img src="../media/MC.IO.Monitor.UserTaskIO.jpg" /></para></Figure>
            <remarks>
                <para>
********************* This function can only be supported in OSP-P200 machines or newer controls. ************************
</para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetLongWordIO(Okuma.CMDATAPI.Enumerations.IOTypeEnum,System.Int32)">
[enter]<summary>Gets I/O LONG WORD at the specified address index.
</summary><example> This example shows how to call GetLongWordIO 
<para>  Dim objCIO As New CIO </para><para>  Dim enIO As IOTypeEnum	</para><para>  Dim intValue As Int64	</para><para>  Dim intAddressIndex As Integer	</para><para>  intValue = objIO.GetLongWordIO( enIO,  intAddressIndex)	</para></example><param name="enIO">I/O type.  Values of parameter come from Okuma.CMDATAPI.Enumerations.IOTypeEnum enumeration.</param><param name="intAddressIndex">Logical I/O address index</param><returns>A System.Int64 value represents decimal value represents I/O LONG WORD at the specified address index.</returns><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> I/O Monitor application
<para><img src="../media/MC.IO.Monitor.LongWord.jpg" /></para></Figure><remarks>
Data value displayed on OSP IO Monitor application can have negative values in DEC column.
However, HEX column will display actual value.
For example: If Long Word data has a HEX value of FFFFFFFF then it will be displayed as -1 in DEC column.
This function will return 4294967295 for the equivalent value of FFFFFFFF in HEX .
</remarks></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetWordIO(Okuma.CMDATAPI.Enumerations.IOTypeEnum,System.Int32)">
[enter]<summary>Gets I/O WORD at the specified address index.
</summary><example> This example shows how to call GetWordIO method
<para>  Dim objCIO As New CIO </para><para>  Dim enIO As IOTypeEnum	</para><para>  Dim intValue As Integer	</para><para>  Dim intAddressIndex As Integer	</para><para>  intValue = objIO.GetWordIO( enIO,  intAddressIndex)	</para></example><param name="enIO">I/O type.  Values of parameter come from Okuma.CMDATAPI.Enumerations.IOTypeEnum enumeration.</param><param name="intAddressIndex">Logical I/O address index</param><returns>A System.Int32 value represents the I/O WORD at the specified address index.</returns><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> I/O Monitor application
<para><img src="../media/MC.IO.Monitor.Word.jpg" /></para></Figure><remarks>
Data value displayed on OSP IO Monitor application can have negative values in DEC column.
However, HEX column will display actual value.
For example: If Word data of index 17 bit 15 is ON then it will be displayed as -1 in DEC column, and FFFF in HEX column.
This function will return 65535.
</remarks></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetBitIO(Okuma.CMDATAPI.Enumerations.IOTypeEnum,System.Int32,Okuma.CMDATAPI.Enumerations.BitsEnum)">
[enter]<summary>Gets I/O bit at the specified address index.
</summary><example> This example shows how to call GetBitIO method
<para>  Dim objCIO As New CIO </para><para>  Dim enIO As IOTypeEnum	</para><para>  Dim enBits As BitsEnum	</para><para>  Dim enValue As OnOffStateEnum	</para><para>  Dim intAddressIndex As Integer	</para><para>  enValue = objIO.GetBitIO( enIO,  intAddressIndex,  enBits)	</para></example><param name="enIO">I/O type.  Values of parameter come from Okuma.CMDATAPI.Enumerations.IOTypeEnum enumeration.</param><param name="intAddressIndex">Logical I/O address index</param><param name="enBits">Bit number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.BitsEnum enumeration.</param><returns>An Okuma.CMDATAPI.Enumerations.OnOffStateEnum enumeration value represents the I/O bit at the specified address index.</returns><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> I/O Monitor application
<para><img src="../media/MC.IO.Monitor.Bit.jpg" /></para></Figure></member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CIO">
            <summary>
Class provides information about PLC I/O Bit, Word, and Long Word.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CPowers.GetEnergyUsageStartDateTime">
            <summary>
Gets the start Date and Time of intergal Energy Usage
</summary>
            <example> This sample shows how to call the GetEnergyUsageStartDateTime() method.
<code source="../ThincMC/CDataApi_Samples.vb" region="CPowers.EnergyUsage Samples" language="vbnet" removeRegionMarkers="false" /></example>
            <returns>A System.String value that represents the start Date and Time in the format: yyyy/mm/dd HH::mm::ss. Example: 2019/12/31 12:22:59</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC B specification [12, 6] ECO</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> AUTO OPERATION - ACT POSIT - POWER ON/OFF - Integration Start Time
<para><img src="../media/P300M-PowerMonitor.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CPowers.GetAxisEnergyUsageInfo">
            <summary>
Gets Axis Energy Usage information for the current machine configuration
</summary>
            <example> This sample shows how to call the GetAxisEnergyUsageInfo() method.
<code source="../ThincMC/CDataApi_Samples.vb" region="CPowers.EnergyUsage Samples" language="vbnet" removeRegionMarkers="false" /></example>
            <returns>An array of Okuma.CMDATAPI.Structures.EnergyUsageInfo value represents the available axes for the current configuration of machine.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC B specification [12, 6] ECO</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> AUTO OPERATION - ACT POSIT - POWER ON/OFF
<para><img src="../media/P300M-PowerMonitor.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CPowers.GetTotalEnergyUsage(Okuma.CMDATAPI.Enumerations.TotalEnergyUsageEnum,Okuma.CMDATAPI.Enumerations.EnergyUsageTypeEnum)">
            <summary>
Gets total energy usage for the specified component and energy usage type
</summary>
            <example> This sample shows how to call the GetTotalEnergyUsage() method.
<code source="../ThincMC/CDataApi_Samples.vb" region="CPowers.EnergyUsage Samples" language="vbnet" removeRegionMarkers="false" /></example>
            <param name="enTotalEnergyUsage">an index of total energy usage for the specified component</param>
            <param name="enEnergyUsageType">type of energy usage. Integral Power or Intantaneous Power.</param>
            <returns>A System.Double value represents the total energy usage for the specified component and energy usage type.
<para>When energy is not available the system will return a negagive value or -1.</para></returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
                <para>Integral Power: KWh</para>
                <para>Instantaneous Power:kW</para>
            </DataUnit>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC B specification [12, 6] ECO</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> AUTO OPERATION - ACT POSIT - POWER ON/OFF
<para><img src="../media/P300M-PowerMonitor.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CPowers.GetAxisEnergyUsage(Okuma.CMDATAPI.Enumerations.EnergyUsageAxisIndexEnum,Okuma.CMDATAPI.Enumerations.EnergyUsageTypeEnum)">
            <summary>
Gets energy usage for the given axis and energy usage type
</summary>
            <example> This sample shows how to call the GetAxisEnergyUsage() method.
<code source="../ThincMC/CDataApi_Samples.vb" region="CPowers.EnergyUsage Samples" language="vbnet" removeRegionMarkers="false" /></example>
            <param name="enEnergyUsageAxisIndex">an axis index of energy usage</param>
            <param name="enEnergyUsageType">type of energy usage. Integral Power or Intantaneous Power.</param>
            <returns>A System.Double value represents the energy usage given axis and energy usage type.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
                <para>Integral Power: KWh</para>
                <para>Instantaneous Power:kW</para>
            </DataUnit>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC B specification [12, 6] ECO</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> AUTO OPERATION - ACT POSIT - POWER ON/OFF
<para><img src="../media/P300M-PowerMonitor.jpg" /></para></Figure>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CPowers">
            <summary>
Class provides power data for different machine components
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetRunningState">
            <summary>
Gets spindle running state in either operation mode.  Spindle orientation is not considered as running state.
</summary>
            <example> This sample shows how to call the GetRunningState method.
<para>Dim objSpindle As New CSpindle </para><para>Try </para><para>		blnValue = objSpindle.GetRunningState </para><para>Catch ae As ApplicationException </para><para>		doError("CSpindle", ae.Message) </para><para>Catch ex As Exception </para><para>		doError("CSpindle", ex.Message) </para><para>End Try </para></example>
            <returns>A System.Booelan value.  True if it is running otherwise it is false</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>AUTO OPERATION - ACTUAL POSITION.
<para><img src="../media/MC.ActualPosition.P4.jpg" /></para></Figure>
            <remarks>
                <para>
********************* This function cannot be supported in OSP-P100 II machines. ************************
</para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetMaxSpindlerateOverride">
            <summary>
Gets the maximum allowable spindle rate override
</summary>
            <example> This sample shows how to call the GetMaxSpindlerateOverride method.
<para>Dim objSpindle As New CSpindle </para><para>Dim intValue As Integer </para><para> intValue = objSpindle.GetMaxSpindlerateOverride </para></example>
            <returns>A System.Int32 value that represents the maximum allowable spindle rate override.</returns>
            <DataUnit>
Percentage
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetSpindlerateOverride">
            <summary>
Gets the spindle rate override.  When there is no spindle rate command, the spindle rate override is 100.
</summary>
            <example> This sample shows how to call the GetSpindlerateOverride method.
<para>Dim objSpindle As New CSpindle </para><para>Dim intValue As Integer </para><para> intValue = objSpindle.GetSpindlerateOverride </para></example>
            <returns>A System.Int32 value that represents the spindle rate override.</returns>
            <DataUnit>
Percentage
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>Standard Navigation Panel
<para>G01 is spindle rate override for main spindle.</para><para><img src="../media/MC.MachinePanel.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetCommandSpindlerate">
            <summary>
Gets the command spindle rate in the part program.
</summary>
            <example> This sample shows how to call the GetCommandSpindlerate method.
<para>Dim objSpindle As New CSpindle </para><para>Dim intValue As Integer</para><para> intValue = objSpindle.GetCommandSpindlerate </para></example>
            <returns>A System.Int32 value that represents the command spindle rate in the part program. </returns>
            <DataUnit>
RPM
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>AUTO OPERATION - BLOCK DATA - So is Commnannd Spindle rate.
<para><img src="../media/MC.BLOCKDATA.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetOilMistCondition">
            <summary>
Get the state of Oil Mist.
</summary>
            <example> This sample shows how to call the GetOilMistCondition method.
<para>Dim objSpindle As New CSpindle </para><para>Dim enValue As OnOffEnum </para><para> enValue = objSpindle.GetOilMistCondition() </para></example>
            <returns>An Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration that represents the state of Oil Mist condition.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetActualSpindlerate">
            <summary>
Gets the actual spindle rate.
</summary>
            <example> This sample shows how to call the GetActualSpindlerate method.
<para>Dim objSpindle As New CSpindle </para><para>Dim intValue As Integer </para><para> intValue = objSpindle.GetActualSpindlerate </para></example>
            <returns>A System.Int32 value that represents the actual spindle rate</returns>
            <DataUnit>
RPM
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>AUTO OPERATION - BLOCK DATA - Sr is Actual Spindle rate.
<para><img src="../media/MC.BLOCKDATA.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetSpindleState">
            <summary>
Gets the current state of spindle.
</summary>
            <example> This sample shows how to call the GetSpindleState method.
<para>Dim objSpindle As New CSpindle </para><para>Dim enValue As SpindleStateEnum </para><para> enValue = objSpindle.GetSpindleState </para></example>
            <returns>An Okuma.CMDATAPI.Enumerations.SpindleStateEnum value that represents the current state of spindle.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>AUTO OPERATION - ACTUAL POSITION - SPDLST - CW - Main spindle is in CW rotation.
<para><img src="../media/MC.ActualPosition.P4.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetSpindleLoad">
            <summary>
Gets the spindle load.
</summary>
            <example> This sample shows how to call the GetSpindleLoad method.
<para>Dim objSpindle As New CSpindle </para><para>Dim intValue As Integer </para><para> intValue = objSpindle.GetSpindleLoad </para></example>
            <returns>A System.Int32 value that represents the spindle load.</returns>
            <DataUnit>
Percentage
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>AUTO OPERATION - LOAD MONITOR - S value from 0 to 300% is spindle load.
<para><img src="../media/MC.Spindleload.jpg" /></para></Figure>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CSpindle">
            <summary>
Class provides information about spindle.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.AddHourMeterSet(Okuma.CMDATAPI.Enumerations.HourMeterEnum,System.Int32)">
            <summary>
Sets hour meter set by adding the input value to the existing data for current sub system.
</summary>
            <example> This example shows how to call AddHourMeterSet() method .
<para>	Dim objMachine As New CMachine  </para><para>	Dim intValue as Int32 </para><para>	Dim enValue as HourMeterEnum </para><para>	objMachine.AddHourMeterSet(enValue, intValue) </para></example>
            <param name="enValue">Hour meter type</param>
            <param name="intValue">Value to be added</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
Second
</DataUnit>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC operation monitor specification NC spec [19,2]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> NC OPR MONITOR (2/2) - COUNT/SET
<para><img src="../media/NC-OPR-MONITOR-PAGE2.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.SetHourMeterSet(Okuma.CMDATAPI.Enumerations.HourMeterEnum,System.Int32)">
            <summary>
Sets hour meter set for the specified type and current subsystem 
</summary>
            <example> This example shows how to call SetHourMeterSet() method .
<para>	Dim objMachine As New CMachine  </para><para>	Dim intValue as Int32 </para><para>	Dim enValue as HourMeterEnum </para><para>	objMachine.SetHourMeterSet(enValue, intValue) </para></example>
            <param name="enValue">Hour meter type</param>
            <param name="intValue">Value to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
Second
</DataUnit>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC operation monitor specification NC spec [19,2]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> NC OPR MONITOR (2/2) - COUNT/SET
<para><img src="../media/NC-OPR-MONITOR-PAGE2.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.AddHourMeterCount(Okuma.CMDATAPI.Enumerations.HourMeterEnum,System.Int32)">
            <summary>
Sets hour meter count by adding the input value to the existing data
</summary>
            <example> This example shows how to call AddHourMeterCount() method .
<para>	Dim objMachine As New CMachine  </para><para>	Dim intValue as Int32 </para><para>	Dim enValue as HourMeterEnum </para><para>	objMachine.AddHourMeterCount(enValue, intValue) </para></example>
            <param name="enValue">Hour meter type</param>
            <param name="intValue">Value to be added</param>
            <DataUnit>
Second
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC operation monitor specification NC spec [19,2]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> NC OPR MONITOR (2/2) - COUNT/SET
<para><img src="../media/NC-OPR-MONITOR-PAGE2.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.SetHourMeterCount(Okuma.CMDATAPI.Enumerations.HourMeterEnum,System.Int32)">
            <summary>
Sets hour meter count for the specified type
</summary>
            <example> This example shows how to call SetHourMeterCount() method .
<para>	Dim intValue as Int32 </para><para>	Dim enValue as HourMeterEnum </para><para>	objMachine.SetHourMeterCount(enValue, intValue) </para></example>
            <param name="enValue">Hour meter type</param>
            <param name="intValue">Value to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
Second
</DataUnit>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC operation monitor specification NC spec [19,2]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> NC OPR MONITOR (2/2) - COUNT/SET
<para><img src="../media/NC-OPR-MONITOR-PAGE2.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.CalZeroOffset(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
            <summary>
Determined machine zero offset data at the specified axis index so that the input value is taken as the actual position data 
</summary>
            <example> This sample code shows how to use the CalZeroOffset() method.
<para>	Dim objMachine As New CMachine  </para><para>	Dim enAxisIndex As AxisIndexEnum</para><para>	Dim dblValue As Double</para><para>	    objMachine.CalZeroOffset(enAxisIndex, dblValue) </para></example>
            <param name="enAxisIndex">Axis index</param>
            <param name="dblValue">Actual Position data to be calculated from</param>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <Figure> PARAMETER - SYSTEM PARAMETER - ZERO OFFSET (MACHINE)
<para><img src="../media/MC.Parameter.SystemParameter.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.AddZeroOffset(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
            <summary>
Set machine zero offset data by adding the input value to the existing data at the specified axis index.
</summary>
            <example> This sample code shows how to use the AddZeroOffset() method.
<para>	Dim objMachine As New CMachine  </para><para>	Dim enAxisIndex As AxisIndexEnum</para><para>	Dim dblValue As Double</para><para>	    objMachine.AddZeroOffset(enAxisIndex, dblValue) </para></example>
            <param name="enAxisIndex">Axis index</param>
            <param name="dblValue">Value to be added to the current machine zero offset value</param>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <Figure> PARAMETER - SYSTEM PARAMETER - ZERO OFFSET (MACHINE)
<para><img src="../media/MC.Parameter.SystemParameter.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.SetZeroOffset(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
            <summary>
Set machine zero offset at the specified axis index
</summary>
            <example> This sample code shows how to use the SetZeroOffset() method.
<para>	Dim objMachine As New CMachine  </para><para>	Dim enAxisIndex As AxisIndexEnum</para><para>	Dim dblValue As Double</para><para>	objMachine.SetZeroOffset(enAxisIndex, dblValue) </para></example>
            <param name="enAxisIndex">Axis index</param>
            <param name="dblValue">Setting value</param>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <Figure> PARAMETER - SYSTEM PARAMETER - ZERO OFFSET (MACHINE)
<para><img src="../media/MC.Parameter.SystemParameter.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.AddPowerOnTime(System.Int32)">
            <summary>
Set the time since machine power is on by adding the input value to the existing data.
</summary>
            <example> This sample code shows how to use the AddPowerOnTime() method.
<para>	Dim objMachine As New CMachine  </para><para>	Dim intValue As Integer</para><para>	objMachine.AddPowerOnTime(intValue) </para></example>
            <param name="intValue">time value to be added</param>
            <DataUnit>
Unit is second
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <Figure> NC OPR MONITOR (2/2) - Power ON Time Count
<para><img src="../media/NC-OPR-MONITOR-PAGE2.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.SetPowerOnTime(System.Int32)">
            <summary>
Sets power on time count value
</summary>
            <example> This sample code shows how to use the SetPowerOnTime() method.
<para>	Dim objMachine As New CMachine </para><para>	Dim intValue As Integer</para><para>	objMachine.SetPowerOnTime(intValue) </para></example>
            <param name="intValue">time value to be set</param>
            <DataUnit>
Unit is in second
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <Figure> NC OPR MONITOR (2/2) - Power ON Time Count
<para><img src="../media/NC-OPR-MONITOR-PAGE2.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.SetDataUnit(Okuma.CMDATAPI.Enumerations.DataUnitEnum)">
            <summary>
Sets current data unit for this class instance.
</summary>
            <example> This sample code shows how to call the SetDataUnit() method.
<para> Dim objMachine As New CMachine </para><para> Dim enDataUnit As DataUnitEnum = DataUnitEnum.Unit_Inch </para><para>	objMachine.SetDataUnit(enDataUnit) </para></example>
            <param name="enDataUnit">Data Unit to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
If applicable, this setting is applied to data in this class instance only, not for NC Data Unit.
For linear axis position, data unit can be either mm or inch.  
For circular (rotary) axis position, data unit is in degree only.
For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, 
then NC position will be converted to inch and vice versa.
</remarks>
            <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. 
<para><img src="../media/ParametersScreen.DataUnit.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetHourMeterSet(Okuma.CMDATAPI.Enumerations.HourMeterEnum)">
            <summary>
Gets hour meter set for the specified type
</summary>
            <example> This example shows how to call GetHourMeterSet() method .
<para>	Dim objMachine As New CMachine  </para><para>	Dim intValue As Integer</para><para>	Dim enValue as HourMeterEnum </para><para>	intValue = objMachine.GetHourMeterSet(HourMeterEnum enValue) </para></example>
            <param name="enValue">Hour meter type</param>
            <returns>A System.Int32 value represents the hour meter set for the specified type.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
Second
</DataUnit>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC operation monitor specification NC spec [19,2]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> NC OPR MONITOR (2/2) - COUNT/SET
<para><img src="../media/NC-OPR-MONITOR-PAGE2.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetHourMeterCount(Okuma.CMDATAPI.Enumerations.HourMeterEnum)">
            <summary>
Gets hour meter count for the specified type
</summary>
            <example> This example shows how to call GetHourMeterCount() method .
<para>	Dim objMachine As New CMachine  </para><para>	Dim intValue As Integer</para><para>	Dim enValue as HourMeterEnum </para><para>	intValue = objMachine.GetHourMeterCount(HourMeterEnum enValue) </para></example>
            <param name="enValue">Hour meter type</param>
            <returns>A System.Int32 value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
Second
</DataUnit>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC operation monitor specification NC spec [19,2]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> NC OPR MONITOR (2/2) - COUNT/SET
<para><img src="../media/NC-OPR-MONITOR-PAGE2.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetNCStatus(Okuma.CMDATAPI.Enumerations.NCStatusEnum)">
            <summary>
Gets current state of the specified NC status for current subsystem 
</summary>
            <example> This example shows how to call GetNCStatus method .
<para>	Dim objMachine As New CMachine  </para><para>	Dim enNCStatus as NCStatusEnum </para><para>	Dim enValue as OnOffStateEnum </para><para>	enValue = objMachine.GetNCStatus(enNCStatus)	</para></example>
            <param name="enNCStatus">NC status to be obtained</param>
            <returns>An Okuma.CMDATAPI.Enumerations.OnOffStateEnum object represents the current state of the specified NC status for current subsystem.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetCurrentAlarmMessage">
            <summary>
Gets current OSP alarm message.
</summary>
            <example> This example shows how to call GetCurrentAlarmMessage method .
<para>	Dim strValue As String </para><para>	strValue = objMachine.GetCurrentAlarmMessage()	</para></example>
            <returns>A System.String.  If there is no alarm in the system,an empty string will be returned.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para>
                    <img src="../media/MC.CurrentAlarmMessage.jpg" />
                </para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetNCReset">
            <summary>
Gets NC reset state.
<para> Note: Once NC reset button is pressed the signal is ON and stays in this state for about 500ms. </para></summary>
            <example> This sample code shows how to use the GetNCReset() method.
<para>Dim objMachine As New CMachine</para><para>Dim enValue As OnOffStateEnum </para><para>enValue = objMachine.GetNCReset() </para></example>
            <returns>An Okuma.CDATAPI.Enumerations.OnOffStateEnum enum value.  It is ON if NC Reset button is pressed. Otherwise, it is OFF.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when input parameters are not supported for the current system</exception>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetCurrentAlarm">
            <summary>
Gets current OSP alarm.
</summary>
            <example> This example shows how to call GetCurrentAlarm method .
<para>	Dim objMachine As New CMachine </para><para>	Dim objCurrentAlarm as CCurrentAlarm </para><para>	objCurrentAlarm = objMachine.GetCurrentAlarm()	</para></example>
            <returns>An Okuma.CMDATAPI.DataAPI.CCurrentAlarm object.  If there is no alarm in the system, alarm properties will be set to 0 and empty string.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
********************* This function cannot be supported in OSP-P100 II machines. ************************
</para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetZeroOffset(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets machine zero offset at the specified axis index
</summary>
            <example> This sample code shows how to use the GetZeroOffset() method.
<para>	Dim objMachine As New CMachine  </para><para>	Dim enAxisIndex As AxisIndexEnum</para><para>	Dim dblValue As Double</para><para>	dblValue = objMachine.GetZeroOffset(enAxisIndex) </para></example>
            <param name="enAxisIndex">Axis index</param>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <returns>A System.Double value represents the machine zero offset at the specified axis index.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <Figure> PARAMETER - SYSTEM PARAMETER - ZERO OFFSET (MACHINE)
<para><img src="../media/MC.Parameter.SystemParameter.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetOperationMode">
            <summary>
Gets current machine operation mode.
</summary>
            <example> This sample code shows how to use the GetOperationMode() method.
<para>Dim objMachine As New CMachine </para><para>Dim enValue As OperationModeEnum </para><para>enValue = objMachine.GetOperationMode() </para></example>
            <returns>An Okuma.CMDATAPI.Enumerations.OperationModeEnum enumeration value represents the current machine operation mode.</returns>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetPowerOnTime">
            <summary>
Gets the time since machine power is on.
</summary>
            <example> This sample code shows how to use the GetPowerOnTime() method.
<para>	Dim objMachine As New CMachine </para><para>	Dim intValue As Integer</para><para>  intValue = objMachine.GetPowerOnTime </para></example>
            <returns>A System.Int32 value that represents time since machine is powered on</returns>
            <DataUnit>
Unit is in second
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when input parameters are not supported for the current system</exception>
            <Figure> NC OPR MONITOR (2/2) - Power ON Time Count
<para><img src="../media/NC-OPR-MONITOR-PAGE2.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetOperationUnitSystemDisplay">
            <summary>
Gets the current setting of machine data unit
</summary>
            <example> This sample code shows how to use the GetOperationUnitSystemDisplay() method.
<para>Dim objMachine As New CMachine </para><para>	Dim intValue As Integer</para><para>  intValue = objMachine.GetOperationUnitSystemDisplay </para></example>
            <returns>
A System.Int32 value represents  the current setting of machine data unit
<para><list type="table"><listheader><term>Preset value</term><description>Operation unit system</description></listheader><item><term>0</term><description>1mm</description></item><item><term>1</term><description>0.01mm</description></item><item><term>2</term><description>0.001mm</description></item><item><term>3</term><description>0.0001mm</description></item><item><term>4</term><description>1inch</description></item><item><term>5</term><description>0.0001inch</description></item><item><term>6</term><description>0.00001inch</description></item></list></para></returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - NC OPTIONAL PARAMETER - INPUT UNIT SYSTEM - DATA SET UNIT/LENGTH UNIT SYSTEM - Current setting of data unit on NC: mm/inch
<para><img src="../media/Parameter.DataUnit.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetExecutionMode">
            <summary>
Gets machine execution mode. It is considered running if it is currently executing a block of code either in Auto or MDI mode.
</summary>
            <example> This sample code shows how to use the GetExecutionMode() method.
<para>Dim objMachine As New CMachine  </para><para>Dim objMachine As ExecutionModeEnum </para><para>enValue = System.Enum.GetNames(GetType(ExecutionModeEnum)).GetValue(objMachine.GetExecutionMode) </para></example>
            <returns>An Okuma.CMDATAPI.Enumerations.ExecutionModeEnum enumeration value represents the machine execution mode.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when input parameters are not supported for the current system</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetPanelMode">
            <summary>
Gets current machine panel mode.
</summary>
            <example> This sample code shows how to use the GetPanelMode() method.
<para>	Dim objMachine As New CMachine </para><para>	Dim enValue As PanelModeEnum </para><para>	enValue = objMachine.GetPanelMode() </para></example>
            <returns>An Okuma.CMDATAPI.Enumerations.PanelModeEnum enumeration value represents the panel mode for current sub system.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when input parameters are not supported for the current system</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.Close">
[enter]<summary> Close the communication with NC</summary><remarks> Any subsequent call for NC data will fail after calling this method.</remarks><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.Init">
            <summary>
Intialize the library to communicate with machine sharing data. The method only need to call once per process.
</summary>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <exception cref="T:Okuma.CMDATAPI.DataAPI.CAPISpecException">Thrown when API Specification is not enabled on machine</exception>
            <remarks>
                <para> ***************************************************************************************************************************************************************************</para>
                <para> ***************************************************************************************************************************************************************************</para>
                <para> It recommends that this method is called in main thread of application.</para>
                <para> Subsequent methods can be made from threads other than main thread.</para>
                <para> It does not recommend any application to call this method repeatly to detect NC is running or not.  </para>
                <para> An application must use the Statup Service to help detecting NC running condition and startup</para>
                <para> ***************************************************************************************************************************************************************************</para>
                <para> ***************************************************************************************************************************************************************************</para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.#ctor(System.String)">
            <summary>
Create an instance of CMachine class. 
In addition to library name, the provided logging name will be used for logging all function calls 
</summary>
            <param name="strLoggingName">Logging name to be used in Logging Service. Note: Only the first provided logging name is stored</param>
            <remarks>
Only the first instance of this class created with a logging name will be used otherwise, the default logging name will be used.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.#ctor">
            <summary>
Create an instance of CMachine class. 
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CMachine">
[enter] <summary>
This class is the main class that provides access points to machine data.  
<para>The Init method must be called before accessing to any other machine data.</para></summary></member>
        <member name="D:dBIT">
* mdata_api_def.h */
</member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CCoolant.GetChipFlushCondition">
            <summary>
Gets the machine chip flush condition
</summary>
            <example> This sample code shows how to use the GetChipFlushCondition() method.
<para> Dim objCoolant As New CCoolant </para><para> Dim enValue As OnOffEnum </para><para>    enValue = objCoolant.GetChipFlushCondition() </para></example>
            <returns>An Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration value that represents the condition of chip flush system.  An ON value means that chip flush is running, otherwise it returns an OFF value</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CCoolant">
            <summary>
Class provides machine coolant information.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CUserManagement.CheckUserErrorCode(Okuma.CMDATAPI.Enumerations.UserApiErrorCodeEnum)">
            <summary>
Check the returned error code from LogIn/LogOut function
</summary>
            <example> This sample shows how to use the LogIn/LogOut and Home Screen() method.
<code source="../ThincMC/CDataApi_Samples.vb" region="CUserManagement - Log In/Out Samples" language="vbnet" removeRegionMarkers="false" /></example>
            <param name="enErrorCode">an error code returned by calling either LogIn/LogOut function</param>
            <exception cref="T:System.ApplicationException">Thrown when User API function cannot be performed</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CUserManagement.LogIn(System.String,System.String)">
            <summary>
Perform the Log In operation given User ID and password.
Note: This operation requires that the machine must be in correct screen and modes to be valid.
<para>Operation Mode: Auto Mode</para><para>Panel Mode: Run Mode</para><para>NC HMI: Home Screen</para></summary>
            <example> This sample shows how to use the LogIn/LogOut and Home Screen() method.
<code source="../ThincMC/CDataApi_Samples.vb" region="CUserManagement - Log In/Out Samples" language="vbnet" removeRegionMarkers="false" /></example>
            <returns>An Enumerations.UserApiErrorCodeEnum represents error codes.</returns>
            <param name="strUserID">User ID</param>
            <param name="strPassword">User password</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function on OSP-P300A:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>OSP Suite NC B spec [14,0] SUITE</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure>
                <para>	OSP SUITE HOME SCREEN - LOG IN
<img src="../media/HomeScreen.LogInAdmin.jpg" /></para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CUserManagement.LogOut">
            <summary>
Perform the Log Out operation for the current user.
Note: This operation requires that the machine must be in correct screen and modes to be valid.
<para>Operation Mode: Auto Mode and in Actual Position page</para><para>Panel Mode: Run Mode</para><para>NC HMI: Home Screen</para></summary>
            <example> This sample shows how to use the LogIn/LogOut and Home Screen() method.
<code source="../ThincMC/CDataApi_Samples.vb" region="CUserManagement - Log In/Out Samples" language="vbnet" removeRegionMarkers="false" /></example>
            <returns>An Enumerations.UserApiErrorCodeEnum represents error codes.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function on OSP-P300A:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>OSP Suite NC B spec [14,0] SUITE</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure>
                <para>	OSP SUITE HOME SCREEN - LOG OUT
<img src="../media/HomeScreen.jpg" /></para>
            </Figure>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CUserManagement">
            <summary>
Class provides User Management information.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetPLCSpecCode3(System.Int32,System.Int32)">
            <summary>
Check if PLC code 3 is enabled or not given spec. code 3 index and spec. code bit number.
</summary>
            <example> This sample shows how to call the GetPLCSpecCode3 method.
<para>Dim objSpec As CSpec = new CSpec </para><para>Dim intSpecCodeIndex As Int32 </para><para>Dim intBit As Int32 </para><para>Dim blnValue As Boolean</para><para> blnValue = objSpec.GetPLCSpecCode3(intSpecCodeIndex, intBit) </para></example>
            <param name="intPLCSpecCodeIndex">PLC spec. code index ranging from 1 to 32</param>
            <param name="intBit">Bit Index</param>
            <returns>A System.Boolean value that represents the state of PLC spec code.  True if option is enabled, otherwise false.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetPLCSpecCode2(System.Int32,System.Int32)">
            <summary>
Check if PLC code 2 is enabled or not given spec. code 2 index and spec. code bit number.
Please see <a href="../ExternalDocuments/MC.PLCSpecCode2Table.html">PLC Spec. Code 2 Table</a> for more information.
</summary>
            <example> This sample shows how to call the GetPLCSpecCode2 method.
<para>Dim objSpec As New CSpec </para><para>Dim intPLCSpecCodeIndex As Int32 </para><para>Dim intBit As Int32 </para><para>Dim blnValue As Boolean </para><para> blnValue = objSpec.GetPLCSpecCode2(intPLCSpecCodeIndex, intBit) </para></example>
            <param name="intPLCSpecCodeIndex">PLC spec. code index ranging from A1 to A32</param>
            <param name="intBit">Bit Index</param>
            <returns>A System.Boolean value that represents the state of PLC spec code.  True if spec code is enabled, otherwise false.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> AUTO OPERATION -PLC SPEC CODE 2
<para><img src="../media/MC.PLCSpecCodeTable_2.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetPLCSpecCode(System.Int32,System.Int32)">
            <summary>
Check if PLC code is enabled or not given spec. code index and spec. code bit number.
Please see <a href="../ExternalDocuments/MC.PLCSpecCodeTable.html">PLC Spec. Code Table</a> for more information.
</summary>
            <example> This sample shows how to call the GetPLCSpecCode method.
<para>Dim objSpec As New CSpec </para><para>Dim intPLCSpecCodeIndex As Int32 </para><para>Dim intBit As Int32 </para><para>Dim blnValue As Boolean </para><para> blnValue = objSpec.GetPLCSpecCode(intPLCSpecCodeIndex, intBit) </para></example>
            <param name="intPLCSpecCodeIndex">PLC spec. code index</param>
            <param name="intBit">Bit Index</param>
            <returns>A System.Boolean value the state of PLC spec code.  True if spec code is enabled, otherwise false.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> AUTO OPERATION -PLC SPEC CODE
<para><img src="../media/MC.PLCSpecCodeTable.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetBSpecCode(System.Int32,System.Int32)">
            <summary>
Check if B spec. code is enabled or not given B spec. code index and B spec. code bit number.
Please see <a href="../ExternalDocuments/MC.BSpecCodeTable.html">B Spec. Code Table</a> for more information.
</summary>
            <example> This sample shows how to call the GetBSpecCode method.
<para>Dim objSpec As New CSpec </para><para>Dim intSpecCodeIndex As Int32 </para><para>Dim intBit As Int32 </para><para>Dim blnValue As Boolean</para><para>	blnValue = objSpec.GetBSpecCode(intSpecCodeIndex, intBit) </para></example>
            <param name="intBSpecCodeIndex">B spec. code index</param>
            <param name="intBit">B spec. code bit index</param>
            <returns>A System.Boolean value.  True if the spec. code is enabled, otherwise false.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetSpecCode(System.Int32,System.Int32)">
            <summary>
Check if spec. code is enabled or not given spec. code index and spec. code bit number.
Please see <a href="../ExternalDocuments/MC.SpecCodeTable.html">Spec. Code Table</a> for more information.
</summary>
            <example> This sample shows how to call the GetSpecCode method.
<para>Dim objSpec As New CSpec </para><para>Dim intSpecCodeIndex As Int32 </para><para>Dim intBit As Int32 </para><para>Dim blnValue As Boolean </para><para> blnValue = objSpec.GetSpecCode(intSpecCodeIndex, intBit) </para></example>
            <param name="intSpecCodeIndex">spec. code index</param>
            <param name="intBit">spec. code bit index</param>
            <returns>A System.Boolean value that represents the state of spec code.  True if spec code is enabled, otherwise false.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> AUTO OPERATION - SPEC CODE
<para><img src="../media/MC.SpecCodeTable.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetMachineSerialNumber">
            <summary>Gets the serial number of this machine
</summary>
            <example> This sample shows how to call the GetMachineSerialNumber method.
<para>Dim objSpec As New CSpec </para><para>Dim strValue As String </para><para> strValue = objSpec.GetMachineSerialNumber </para></example>
            <returns>A System.String value that represents the serial of this machine.  If current system does not support machine serial number, an emtpy string is returned.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetMachineName">
            <summary>
Gets the name of this machine.
</summary>
            <example> This sample shows how to call the GetMachineName method.
<para>Dim objSpec As New CSpec </para><para>Dim strValue As String </para><para> strValue = objSpec.GetMachineName() </para></example>
            <returns>A System.String value that represents the name of this machine.  If current system does not support machine name, an emtpy string is returned.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetOptionSpecCode(Okuma.CMDATAPI.Enumerations.OptionSpecEnum)">
            <summary>
Check if option spec. code is enabled or not given option spec code
</summary>
            <example> This sample shows how to call the GetOptionSpecCode method.
<para>Dim objSpec As New CSpec </para><para>Dim curSpecEnum As OptionSpecEnum </para><para>Dim blnValue As Boolean </para><para> blnValue = objSpec.GetOptionSpecCode(curSpecEnum) </para></example>
            <param name="enValue">Available option spec. code to check</param>
            <returns>A System.Boolean value that represents the state of option spec code.  True if option is enabled, otherwise false.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetControlType">
            <summary>
Get control type of machine
</summary>
            <example> This sample shows how to call the GetControlType method.
<para>Dim objSpec As New CSpec </para><para>Dim enValue As ControlTypeEnum </para><para>	enValue = objSpec.GetControlType() </para></example>
            <returns>A ControlTypeEnum value that represents the type of control of this machine. </returns>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingHistory.GetPreviousOperatingHistory(System.Int32,System.Int32,Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum)">
            <summary>
Gets previous day operating history at the specified report data, and report indexes
</summary>
            <example> This example shows how to call GetPreviousOperatingHistory method
<para> Dim objOperatingHistory As New COperatingHistory</para><para> Dim intValues As Integer()</para><para> Dim intFromIndex  As Integer = 1  </para><para> Dim intToIndex As Integer </para><para> Dim enReportData As OperatingReportDataEnum </para><para> intToIndex = objOperatingHistory.GetMaxCount() </para><para> intValue = objOperatingHistory.GetPreviousOperatingHistory(intFromIndex, intToIndex, enReportPeriod) </para></example>
            <param name="intFromIndex">Starting operating history index.  The 1-based index at which the alarm information is obtained</param>
            <param name="intToIndex">Ending operating history index.  The 1-based index at which the alarm information is obtained</param>
            <param name="enReportData">Operating history data to be retreived</param>
            <returns>A zero-based array of System.Int32 values that represents the previous day operating history at the specified report data, and report indexes.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
                <para>
If a request for a total of 144 operating history, then each value in the array is equivalent to the time period as shown in the table below.  
A value of 1 indicates that the state of this requested report data is ON; otherwise it is OFF.
</para>
                <list type="table">
                    <listheader>
                        <term>Index</term>
                        <description>Time slot (hh:mm) </description>
                    </listheader>
                    <item>
                        <term>0</term>
                        <description>00:00</description>
                    </item>
                    <item>
                        <term>1</term>
                        <description>00:10</description>
                    </item>
                    <item>
                        <term>2</term>
                        <description>00:20</description>
                    </item>
                    <item>
                        <term>...</term>
                        <description>...</description>
                    </item>
                    <item>
                        <term>...</term>
                        <description>...</description>
                    </item>
                    <item>
                        <term>142</term>
                        <description>23:40</description>
                    </item>
                    <item>
                        <term>143</term>
                        <description>23:50</description>
                    </item>
                </list>
            </remarks>
            <Figure> OPERATING REP: DAILY(PREV):2006/10/25 
<para><img src="../media/MacMan-OperatingHistory.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingHistory.GetTodayOperatingHistory(System.Int32,System.Int32,Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum)">
            <summary>
Gets today operating history for the specified report data at the specified indexes.
</summary>
            <example> This sample shows how to call the GetTodayOperatingHistory method.
<para> Dim objOperatingHistory As New COperatingHistory</para><para> Dim intValues As Integer()</para><para> Dim intFromIndex  As Integer = 1  </para><para> Dim intToIndex As Integer </para><para> Dim enReportData As OperatingReportDataEnum </para><para> intToIndex = objOperatingHistory.GetMaxCount() </para><para> intValue = objOperatingHistory.GetTodayOperatingHistory(intFromIndex, intToIndex, enReportPeriod) </para></example>
            <param name="intFromIndex">Starting operating history index.  The 1-based index at which the alarm information is obtained</param>
            <param name="intToIndex">Ending operating history index.  The 1-based index at which the alarm information is obtained</param>
            <param name="enReportData">Operating history data to be retreived</param>
            <returns>A zero-based array of System.Int32 values that represents the today operating history at the specified report data, and report indexes.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
If a request for a total of 144 operating history, then each value in the array is equivalent to the time period as shown in the table below.  
A value of 1 indicates that the state of this requested report data is ON; otherwise it is OFF.
<list type="table"><listheader><term>Index</term><description>Time slot (hh:mm) </description></listheader><item><term>0</term><description>00:00</description></item><item><term>1</term><description>00:10</description></item><item><term>2</term><description>00:20</description></item><item><term>...</term><description>...</description></item><item><term>...</term><description>...</description></item><item><term>142</term><description>23:40</description></item><item><term>143</term><description>23:50</description></item></list></remarks>
            <Figure> OPERATING HIS - DAILY(TODAY):2006/10/25 
<para><img src="../media/MacMan-OperatingHistory.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingHistory.GetMaxCount">
            <summary>
Gets maximum number of Operating history that can be stored by the system.
</summary>
            <example> This sample shows how to call the GetMaxCount method.
<para> Dim objOperatingHistory As New COperatingHistory</para><para> Dim intValues As System.Int32() </para><para> Dim intFromIndex As Integer = 1</para><para> Dim intToIndex As Integer </para><para> Dim enReportData As OperatingReportDataEnum </para><para> intToIndex = objOperatingHistory.GetMaxCount() </para><para> intValue = objOperatingHistory.GetPreviousOperatingHistory(intFromIndex, intToIndex, enReportPeriod) </para></example>
            <returns>A System.Int32 value that represents the maximum number of Operating history</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingHistory.ValidateIndex(System.Int32,System.String,System.Int32)">
            <summary>
N/A
</summary>
            <example> This sample shows how to call the ExceptionHandler method.
</example>
            <param name="intValue"> Integer Value.</param>
            <param name="strErrorSource"> Error Source String.</param>
            <param name="intErrorCode"> Error Code Number.</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.COperatingHistory">
            <summary>
Class provides operating history information stored by NC.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.CancelSubProgram(System.String)">
            <summary>
Cancel sub program name.  
</summary>
            <example> This sample shows how to call the CancelSubProgram method.
<para>Dim objProgram As new  CProgram </para><para>Dim strSubProgramName As String </para><para> objProgram.CancelSubProgram(strSubProgramName)</para></example>
            <param name="strSubProgramName">Sub Program name to be cancel.  All program name will be converted to upper case.  Sub program name must be one of the following: OSPR1", "OSPR2", "OCUT1" or, and "OCUT2" .</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
                <para>
********************* This function cannot be supported in OSP-P100 II machines. ************************
</para>
            </remarks>
            <Figure> AUTO OPERATION - A.MIN - Current active part program file name being loaded into NC.
<para><img src="../media/MC.ActualPosition.P1.jpg" /></para></Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>SPRINT LIBRARY 2 NC 2 SPEC CODE [7,3]</term><description>Valid</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.SetProgramMCodeMacro(System.Int32,System.String)">
            <summary>
Sets program name for M Code macro number.
</summary>
            <example> This sample shows how to call the SetProgramMCodeMacro method.
<para>   Dim objProgram As New CProgram </para><para>   Dim intMCodeMacro As Integer </para><para>   Dim strProgramName As String </para><para>		objProgram.SetProgramMCodeMacro(intMCodeMacro, strProgramName) </para></example>
            <param name="intMCodeMacro">M Code Macro number</param>
            <param name="strProgramName">Program name to be set.  All program name will be converted to upper case.  An empty string will reset part program name to **.</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
                <para>A program file name can have multiple program name.  Each program name starts with an O such as O1234.</para>
                <para>List of available G/M Codes depends on Extended Macro Option (GMEX) and the active setting of Optional Parameter (BIT, WORD, LONG WORD) bit 3 and 4 of Bit index 73.</para>
                <para>Note: Change of Optional Parameter bit 3 and 4 of Bit index 73 will not take into effect until reboot the machine.</para>
            </remarks>
            <Figure>
                <para>List of available G/M Code Macro - Standard (G/M Code Macro Option (GMEX) is not enabled).  See Figure 1</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110</term>
                        <term>G111-G120</term>
                        <term>M201-M210</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 1</para>
                    <img src="../media/MC.Parameter.GMCodeMacro.jpg" />
                </para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 2</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110, G501-G540</term>
                        <term>G111-G120, G541-G580</term>
                        <term>M201-M220</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 2 -  G/M Code Macro - G/M Code Macro Option is enabled and Optional Parameter 73 bit 3 and 4 are OFF</para>
                    <img src="../media/MC.Parameter.GMCodeMacro-WithOption3OFF4OFF.jpg" />
                </para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 3</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110, G501-G580</term>
                        <term>G111-G120</term>
                        <term>M201-M220</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 3 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 3 is ON, and  Optional Parameter 73 bit 4 is OFF</para>
                    <img src="../media/MC.Parameter.GMCodeMacro-WithOption3on4off.jpg" />
                </para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is not enabled).  See Figure 4</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110</term>
                        <term>G111-G120, G501-G580</term>
                        <term>M201-M220</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 4 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 4 is ON and bit 3 is either ON or OFF</para>
                    <img src="../media/MC.Parameter.GMCodeMacro-WithOption3off4ON.jpg" />
                </para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.SetProgramGCodeMacro(System.Int32,System.String)">
            <summary>
Sets program name for G Code macro number in MODIN or CALL
</summary>
            <example> This sample shows how to call the SetProgramGCodeMacro method.
<para>   Dim objProgram As New CProgram </para><para>   Dim intGCodeMacro As Integer </para><para>   Dim strProgramName As String </para><para>		objProgram.SetProgramGCodeMacro(intGCodeMacro, strProgramName) </para></example>
            <param name="intGCodeMacro">G Code Macro number</param>
            <param name="strProgramName">Program name to be set.  All program name will be converted to upper case.  An empty string will reset part program name to **.</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
                <para>A program file name can have multiple program name.  Each program name starts with an O such as O1234.</para>
                <para>List of available G/M Codes depends on Extended Macro Option (GMEX) and the active setting of Optional Parameter (BIT, WORD, LONG WORD) bit 3 and 4 of Bit index 73.</para>
                <para>Note: Change of Optional Parameter bit 3 and 4 of Bit index 73 will not take into effect until reboot the machine.</para>
            </remarks>
            <Figure>
                <para>List of available G/M Code Macro - Standard (G/M Code Macro Option (GMEX) is not enabled).  See Figure 1</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110</term>
                        <term>G111-G120</term>
                        <term>M201-M210</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 1</para>
                    <img src="../media/MC.Parameter.GMCodeMacro.jpg" />
                </para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 2</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110, G501-G540</term>
                        <term>G111-G120, G541-G580</term>
                        <term>M201-M220</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 2 -  G/M Code Macro - G/M Code Macro Option is enabled and Optional Parameter 73 bit 3 and 4 are OFF</para>
                    <img src="../media/MC.Parameter.GMCodeMacro-WithOption3OFF4OFF.jpg" />
                </para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 3</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110, G501-G580</term>
                        <term>G111-G120</term>
                        <term>M201-M220</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 3 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 3 is ON, and  Optional Parameter 73 bit 4 is OFF</para>
                    <img src="../media/MC.Parameter.GMCodeMacro-WithOption3on4off.jpg" />
                </para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is not enabled).  See Figure 4</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110</term>
                        <term>G111-G120, G501-G580</term>
                        <term>M201-M220</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 4 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 4 is ON and bit 3 is either ON or OFF</para>
                    <img src="../media/MC.Parameter.GMCodeMacro-WithOption3off4ON.jpg" />
                </para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetProgramRunningState">
            <summary>
Gets running state of program currently loaded on NC
</summary>
            <example> This example shows how to calls GetProgramRunningState() method
<para>Dim objProgram As New CProgram </para><para>Dim enRunningState As ProgramRunningStateEnum</para><para>enRunningState = objProgram.GetProgramRunningState()	</para></example>
            <returns>A ProgramRunningStateEnum value that represents the running state of program currently loaded on NC</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetCurrentActiveProgramFilePath">
            <summary>
Gets active  program file path.  It will return full path of currently selected main part program.  In case of no active part program
it will return the default MD1 folder path which is D:\MD1
</summary>
            <example> This sample shows how to call the GetActiveProgramFilePath method.
<para>Dim objProgram As New CProgram </para><para>Dim strValue As String </para><para>    strValue = objProgram.GetCurrentActiveProgramFilePath </para></example>
            <returns>A System.String value</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>SPRINT LIBRARY 2 NC 2 SPEC CODE [7,3]</term><description>Valid</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetActiveScheduleProgramFileName">
            <summary>
Gets active schedule program file name.
</summary>
            <example> This sample shows how to call the GetActiveScheduleProgramFileName method.
<para>Dim objProgram As New CProgram </para><para>Dim activeProgramFname As String </para><para>    activeProgramFname = objProgram.GetActiveScheduleProgramFileName </para></example>
            <returns>A System.String value that represents active schedule program file name.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> AUTO OPERATION - TEST.SDF - Current active schedule program file name being loaded into NC.
<para><img src="../media/MC.ScheduleProgramFileName.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.ScheduleProgramCycleComplete">
            <summary>
Check whether or not the schedule program has finished.
</summary>
            <example> This example shows how to calls ScheduleProgramCycleComplete method
<para>Dim objProgram As New CProgram</para><para>Dim blnValue As Boolean</para><para>blnValue = objProgram.ScheduleProgramCycleComplete()	</para></example>
            <returns>A System.Boolean value that represents the completion of schedule program being executed.  True if shcedule program finishes its cycle by executing the END block, otherwise false</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>The function returns false when NC is reset or program is just started.</para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.CycleComplete">
            <summary>
Check whether or not M02/M30 has been executed in the part program being run.
</summary>
            <example> This example shows how to calls CycleComplete method
<para>Dim objProgram As New CProgram</para><para>Dim blnCycleComplete As Boolean</para><para>blnCycleComplete = objProgram.CycleComplete()	</para></example>
            <returns>A System.Boolean value that represents the completion of part program being executed.  True if part program finishes its cycle by executing M02/M30 in the part program, otherwise false</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>The function returns false when NC is reset or program is just started.</para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetCurrentActiveProgramFileName">
            <summary>
Gets current active program file name.  It could only be program with MIN, SUB, and SSB extension.
<para>Program having extension other than MIN, SUB, and SSB will be displayed as 'D:\MD1' folder</para></summary>
            <example> This sample shows how to call the GetCurrentActiveProgramFileName method.
<para>Dim objProgram As new  CProgram </para><para>Dim activeProgramFname As String </para><para>    activeProgramFname = objProgram.GetCurrentActiveProgramFileName </para></example>
            <returns>A System.String value</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>SPRINT LIBRARY 2 NC 2 SPEC CODE [7,3]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> AUTO OPERATION - A.MIN - Current active part program file name being loaded into NC.
<para><img src="../media/MC.ActualPosition.P1.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetCurrentActiveProgramName">
            <summary>
Gets the active program name currently executed by NC.  It coud be main or sub program name.
<para>
A program file name can have multiple program name.  Each program name starts with an O such as O1234
</para></summary>
            <example> This sample shows how to call the ExceptionHandler method.
<para>   Dim objProgram As New CProgram </para><para>   Dim activeProgramName As String </para><para>      activeProgramName = objProgram.GetCurrentActiveProgramName </para></example>
            <returns>A System.String value</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para>
            </remarks>
            <Figure> AUTO OPERATION - O1234 - Active program name is O1234
<para><img src="../media/MC.ActualPosition.P1.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetProgramMCodeMacro(System.Int32)">
            <summary>
Gets program name assigned to a M Code macro.
</summary>
            <example> This sample shows how to call the GetProgramMCodeMacro method.
<para>   Dim objProgram As New CProgram </para><para>   Dim intMCodeMacro As Integer </para><para>   Dim strProgramName As String </para><para>      strProgramName = objProgram.GetProgramMCodeMacro(intMCodeMacro) </para></example>
            <param name="intMCodeMacro">M Code Macro number</param>
            <returns>A System.String value</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
                <para>A program file name can have multiple program name.  Each program name starts with an O such as O1234.</para>
                <para>List of available G/M Codes depends on Extended Macro Option (GMEX) and the active setting of Optional Parameter (BIT, WORD, LONG WORD) bit 3 and 4 of Bit index 73.</para>
                <para>Note: Change of Optional Parameter bit 3 and 4 of Bit index 73 will not take into effect until reboot the machine.</para>
            </remarks>
            <Figure>
                <para>List of available G/M Code Macro - Standard (G/M Code Macro Option (GMEX) is not enabled).  See Figure 1</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110</term>
                        <term>G111-G120</term>
                        <term>M201-M210</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 1</para>
                    <img src="../media/MC.Parameter.GMCodeMacro.jpg" />
                </para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 2</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110, G501-G540</term>
                        <term>G111-G120, G541-G580</term>
                        <term>M201-M220</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 2 -  G/M Code Macro - G/M Code Macro Option is enabled and Optional Parameter 73 bit 3 and 4 are OFF</para>
                    <img src="../media/MC.Parameter.GMCodeMacro-WithOption3OFF4OFF.jpg" />
                </para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 3</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110, G501-G580</term>
                        <term>G111-G120</term>
                        <term>M201-M220</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 3 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 3 is ON, and  Optional Parameter 73 bit 4 is OFF</para>
                    <img src="../media/MC.Parameter.GMCodeMacro-WithOption3on4off.jpg" />
                </para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is not enabled).  See Figure 4</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110</term>
                        <term>G111-G120, G501-G580</term>
                        <term>M201-M220</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 4 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 4 is ON and bit 3 is either ON or OFF</para>
                    <img src="../media/MC.Parameter.GMCodeMacro-WithOption3off4ON.jpg" />
                </para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetProgramGCodeMacro(System.Int32)">
            <summary>
Gets program name assigned to a G Code macro for G Code Macro type MODIN or CALL.
</summary>
            <example> This sample shows how to call the GetProgramGCodeMacro method.
<para>   Dim objProgram As New CProgram </para><para>   Dim intGCodeMacro As Integer </para><para>   Dim strProgramName As String </para><para>      strProgramName = objProgram.GetProgramGCodeMacro(intGCodeMacro) </para></example>
            <param name="intGCodeMacro">G Code Macro number</param>
            <returns>A System.String value</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
                <para>A program file name can have multiple program name.  Each program name starts with an O such as O1234.</para>
                <para>List of available G/M Codes depends on Extended Macro Option (GMEX) and the active setting of Optional Parameter (BIT, WORD, LONG WORD) bit 3 and 4 of Bit index 73.</para>
                <para>Note: Change of Optional Parameter bit 3 and 4 of Bit index 73 will not take into effect until reboot the machine.</para>
            </remarks>
            <Figure>
                <para>List of available G/M Code Macro - Standard (G/M Code Macro Option (GMEX) is not enabled).  See Figure 1</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110</term>
                        <term>G111-G120</term>
                        <term>M201-M210</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 1</para>
                    <img src="../media/MC.Parameter.GMCodeMacro.jpg" />
                </para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 2</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110, G501-G540</term>
                        <term>G111-G120, G541-G580</term>
                        <term>M201-M220</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 2 -  G/M Code Macro - G/M Code Macro Option is enabled and Optional Parameter 73 bit 3 and 4 are OFF</para>
                    <img src="../media/MC.Parameter.GMCodeMacro-WithOption3OFF4OFF.jpg" />
                </para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 3</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110, G501-G580</term>
                        <term>G111-G120</term>
                        <term>M201-M220</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 3 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 3 is ON, and  Optional Parameter 73 bit 4 is OFF</para>
                    <img src="../media/MC.Parameter.GMCodeMacro-WithOption3on4off.jpg" />
                </para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>_________________________________________________________________________________________________________________________________________________</para>
                <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 4</para>
                <list type="table">
                    <listheader>
                        <term>G CODE MODIN</term>
                        <term>G CODE CALL</term>
                        <term>M CODE CALL</term>
                    </listheader>
                    <item>
                        <term>G101-G110</term>
                        <term>G111-G120, G501-G580</term>
                        <term>M201-M220</term>
                    </item>
                </list>
                <para>
                    <para> Figgure 4 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 4 is ON and bit 3 is either ON or OFF</para>
                    <img src="../media/MC.Parameter.GMCodeMacro-WithOption3off4ON.jpg" />
                </para>
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetRunningProgram(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
Gets running part program.
The return data is based on the input value of rows and columns.  
If an actual row in the part program contains more characters (each character is a column) 
than the specified input columns, the row will automatically break into multiple lines.  
If an actual row contains fewer characters than the specified input columns, 
spaces will be added to it.
The read point and execute point values are relative value to the current screen of the running part program.
</summary>
            <example> This sample shows how to call the GetRunningProgram method.
<para>Dim objProgram As New CProgram </para><para>Dim strProgram As String </para><para>Dim strValues As String() </para><para>Dim intRow As Integer </para><para>Dim intColumn As Integer </para><para>Dim pintReadPoint As Integer </para><para>Dim pintExecutePoint As Integer </para><para>Dim strLine As String </para><para>Dim strValue As String </para><para>		strValues = objProgram.GetRunningProgram(intRow, intColumn, pintReadPoint, pintExecutePoint) </para><para>		For Each strLine In strValues </para><para>	    	strProgram += strLine &amp; vbCrLf </para><para>	    Next </para></example>
            <param name="intRow">Number of rows to display</param>
            <param name="intColumn">Number of columns/characters per line</param>
            <param name="pintReadPoint">A return value that represents the current read point in the part program</param>
            <param name="pintExecutePoint">A return value that represents the current execute point in the part program</param>
            <returns>An array of System.String represents the current running part program.</returns>
            <Figure> AUTO OPERATION - ACTUAL POSITION - CURRENT MAIN/SUB PROGRAM (EXEC) - A section of part programm is running. 
<para><para> '&gt;&gt;' is the read point, and an upper arrow is the execute point.</para><img src="../media/MC.PROGRAM.RUNNING.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
The number of row * column should not exceed 2048.  Number of column should not be greater than 79.  
Row must be greater than or equal to 0.
Column must be greater than or equal to 1.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetDefaultProgramPath">
[enter <summary>
Gets the default folder location where part program is stored.
</summary><example> This sample shows how to call the GetDefaultProgramPath method.
<para>Dim objProgram As New CProgram </para><para>Dim defaultProgramPath As String </para><para>	  defaultProgramPath = objProgram.GetDefaultProgramPath </para></example><returns>A System.String value that represents a full path of part program location</returns><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception><figure /></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetExecuteBlock(Okuma.CMDATAPI.Enumerations.ExecuteBlockTypeEnum)">
            <summary>
Gets the execute block in the part program for the given execute block type.
</summary>
            <example> This sample shows how to call the GetExecuteBlock method.
<para>Dim objProgram As New CProgram </para><para>Dim enExecuteBlockType As ExecuteBlockTypeEnum </para><para>Dim strValue As String </para><para> strValue = objProgram.GetExecuteBlock(enExecuteBlockType) </para></example>
            <param name="enValue">An execute block type</param>
            <returns>A System.String value that represents the execute block</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> AUTO OPERATION - EXECUTE BLOCK and NEXT LINE 
<para><para>N1000G0X0Z0Y0B100 - It is a block being executed by NC.</para><para>N120 T1 - It is a block being executed next by NC.</para><img src="../media/MC.ActualPosition.P1.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetCurrentBlockNumber">
            <summary>
Gets current active block number in the system.
</summary>
            <example> This sample shows how to call the GetCurrentBlockNumber method.
<para> Dim objProgram As New CProgram </para><para> Dim currentBlockNumber As Int32 </para><para> currentBlockNumber = objProgram.GetCurrentBlockNumber </para></example>
            <returns>A System.Int32 value that represents current active block number in the system.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> AUTO OPERATION - ACTUAL POSITION 1mm(PROGRAM) O1234 N1000 135
<para><para>Current block number is 135.</para><img src="../media/MC.ActualPosition.P1.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetActiveProgramName">
            <summary>
Gets the active main program name.
</summary>
            <example> This sample shows how to call the GetActiveProgramName method.
<para>   Dim objProgram As New CProgram </para><para>   Dim strValue As String </para><para>   strValue = objProgram.GetActiveProgramName </para></example>
            <returns>A System.String value that represents the active main program name.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
A program file name can have multiple program name.  Each program name starts with an O such as O1234
</remarks>
            <Figure> AUTO OPERATION - O1234 - Active program name is O1234
<para><img src="../media/MC.ActualPosition.P1.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetActiveProgramFileName">
            <summary>
Gets the active main part program file name.
</summary>
            <example> This sample shows how to call the GetActiveProgramFileName method.
<para>Dim objProgram As New CProgram </para><para>Dim activeProgramFname As String </para><para>    activeProgramFname = objProgram.GetActiveProgramFileName </para></example>
            <returns>A System.String value that represents active part program file name.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> AUTO OPERATION - A.MIN - Current active part program file name being loaded into NC.
<para><img src="../media/MC.ActualPosition.P1.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetMCodes">
            <summary>
Get the active M Codes.
</summary>
            <example> This sample shows how to call the GetMCodes method.
<para>Dim objProgram As New CProgram </para><para>Dim mCodes As String </para><para>     mCodes = objProgram.GetMCodes </para></example>
            <returns>A System.String value that represents all active M codes in the system</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> BLOCK DATA - CURRENT - List of all M codes being executed in NC.
<para><img src="../media/BlockData.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetGCodes">
            <summary>
Get the active G Codes.
</summary>
            <example> This sample shows how to call the GetGCodes method.
<para> Dim objProgram As New CProgram </para><para> Dim gCodes As String </para><para> gCodes = objProgram.GetGCodes </para></example>
            <returns>A System.String value that represents all active G codes in the system</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> BLOCK DATA - CURRENT - List of all G codes being executed in NC.
<para><img src="../media/BlockData.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetExecutedSequenceNumber">
            <summary>
Gets the current execute sequence number
</summary>
            <example> This sample shows how to call the GetExecutedSequenceNumber method.
<para>Dim objProgram As New CProgram </para><para>Dim strValue As String </para><para>	strValue = objProgram.GetExecutedSequenceNumber() </para></example>
            <returns>A System.String value that represents that sequence number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> AUTO OPERATION - ACTUAL POSITION - CURRENT MAIN/SUB PROGRAM (EXEC) - A.MIN - 01234 - N1000 - The current executed sequence number is N1000
<para><img src="../media/MC.Program.Running.jpg" /></para></Figure>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CProgram">
            <summary>
Class provides information about part program.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProbe.GetProbeSubProgramStatus">
[Enter]<summary>
Gets sub program status of either OSPR1 or OSPR2
</summary><example> This sample code shows how to use the GetProbeSubProgramStatus() method.
<para>Dim objProbe As New CProbe  </para><para>Dim enProbeSubProgramStatusEnum as ProbeSubProgramStatusEnum  </para><para>enProbeSubProgramStatusEnum = objProbe.GetProbeSubProgramStatus()</para></example><returns>An Okuma.CMDATAPI.Enumerations.ProbeSubProgramStatusEnum enumeration value</returns><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when input parameters are not supported for the current system</exception><remarks><para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para><para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>SPRINT LIBRARY 2 NC 2 SPEC CODE [7,3]</term><description>Valid</description></item></list></para></remarks></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProbe.GetProbeSensorPosition(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets touch probe position in encoder coordinate at the specified axis index.
</summary>
            <example> This sample code shows how to call the GetProbeSensorPosition() method.
<para> Dim objProbe As new CProbe </para><para> Dim curAxisEnum As AxisIndexEnum </para><para> Dim dblValue As Double </para><para> curAxisEnum=System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.axisCombo.SelectedValue) </para><para> dblValue = CDbl(objProbe.GetProbeSensorPosition(curAxisEnum) </para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>A System.Double that represents position in encoder coordinate.</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>RSAPA 
<para><img src="../media/AxisData_Encoder_coord.RCON.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CProbe.GetTouchProbeSignal">
            <summary>
Gets touch probe signal status
</summary>
            <example> This sample code shows how to use the GetTouchProbeSignal() method.
<para>	Dim objProbe As New CProbe </para><para>	Dim enValue As OnOffStateEnum </para><para>	enValue = objProbe.GetTouchProbeSignal().ToString </para></example>
            <returns>An Okuma.CMDATAPI.Enumerations.OnOffStateEnum enumeration value.
It is ON when it is contacted otherwise it is OFF state.
</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when input parameters are not supported for the current system</exception>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CProbe">
            <summary>
Class provides information about Touch Probe.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.AddWorkpieceCounterSet(Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum,System.Int32)">
            <summary>
Sets the workpiece counter SET by adding the input value to the existing data at the specified counter index.
</summary>
            <example> This sample shows how to call the AddWorkpieceCounterSet method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim enValue As WorkpieceCounterEnum </para><para>Dim intValue As Integer </para><para>      objWorkPiece.AddWorkpieceCounterSet(enValue, intValue) </para></example>
            <param name="enValue">Workpiece counter.  Values of parameter come from Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum enumeration.</param>
            <param name="intValue">Number of workpiece to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC Work shop counter spec code [18,2]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> NC OPR MONITOR (1/2) SET - Workpiece counter table
<para><img src="../media/MC.Workcounter.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.SetWorkpieceCounterSet(Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum,System.Int32)">
            <summary>
Sets the workpiece counter SET at the specified counter index.
</summary>
            <example> This sample shows how to call the SetWorkpieceCounterSet method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim enValue As WorkpieceCounterEnum </para><para>Dim intValue As Integer </para><para>objWorkPiece.SetWorkpieceCounterSet(enValue, intValue) </para></example>
            <param name="enValue">Workpiece counter.  Values of parameter come from Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum enumeration.</param>
            <param name="intValue">Number of workpiece to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC Work shop counter spec code [18,2]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> NC OPR MONITOR (1/2) SET - Workpiece counter table
<para><img src="../media/MC.Workcounter.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.AddWorkpieceCounter(Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum,System.Int32)">
            <summary>
Sets the workpiece counter by adding the input value to the existing data at the specified counter index.
</summary>
            <example> This sample shows how to call the AddWorkpieceCounter method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim enValue As WorkpieceCounterEnum </para><para>Dim intValue As Integer </para><para>objWorkPiece.AddWorkpieceCounter(enValue, intValue) </para></example>
            <param name="enValue">Workpiece counter.  Values of parameter come from Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum enumeration.</param>
            <param name="intValue">Number of workpieces to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC Work shop counter spec code [18,2]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> NC OPR MONITOR (1/2) COUNT - Workpiece counter table
<para><img src="../media/MC.Workcounter.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.SetWorkpieceCounter(Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum,System.Int32)">
            <summary>
Sets the workpiece counter at the specified counter index.
</summary>
            <example> This sample shows how to call the SetWorkpieceCounter method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim enValue As WorkpieceCounterEnum </para><para>Dim intValue As Integer </para><para>      objWorkPiece.SetWorkpieceCounter(enValue, intValue) </para></example>
            <param name="enValue">Workpiece counter.  Values of parameter come from Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum enumeration.</param>
            <param name="intValue">Number of workpiece to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC Work shop counter spec code [18,2]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> NC OPR MONITOR (1/2) COUNT - Workpiece counter table
<para><img src="../media/MC.Workcounter.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.CalZeroOffset(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
            <summary>
Determines the zero offset data at the specified offset index, and axis index so that the input value is taken as the actual position data 
</summary>
            <example> This sample shows how to call the CalZeroOffset method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim intWorkpieceOffsetIndex As Integer </para><para>Dim enAxisIndex As AxisIndexEnum </para><para>Dim dblValue As Double </para><para>      objWorkPiece.CalZeroOffset(intWorkpieceOffsetIndex, enAxisIndex, dblValue) </para></example>
            <param name="intWorkpieceOffsetIndex">Zero offset index</param>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <param name="dblValue">Actual Position data to be calculated from</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <Figure> PROGRAM ZERO - Table of Zero Offset in program coordinate
<para><img src="../media/MC.ZeroOffset.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.AddZeroOffset(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
            <summary>
Set the zero offset data by adding the input value to the existing data at the specified offset index, and axis index.
</summary>
            <example> This sample shows how to call the AddZeroOffset method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim intWorkpieceOffsetIndex As Integer </para><para>Dim enAxisIndex As AxisIndexEnum </para><para>Dim dblValue As Double </para><para>      objWorkPiece.AddZeroOffset(intWorkpieceOffsetIndex, enAxisIndex, dblValue) </para></example>
            <param name="intWorkpieceOffsetIndex">Zero offset index</param>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <param name="dblValue">Zero offset value to be added</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <Figure> PROGRAM ZERO - Table of Zero Offset in program coordinate
<para><img src="../media/MC.ZeroOffset.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.SetZeroOffset(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
            <summary>
Sets the zero offset data at the specified offset index, and axis index.
</summary>
            <example> This sample shows how to call the SetZeroOffset method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim AxisIndexEnum As Integer </para><para>Dim enValue As WorkpieceCounterEnum </para><para>Dim dblValue As Double </para><para>objWorkPiece.SetZeroOffset(intWorkpieceOffsetIndex, enAxisIndex, dblValue) </para></example>
            <param name="intWorkpieceOffsetIndex">Zero offset index</param>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <param name="dblValue">Zero offset value to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <Figure> PROGRAM ZERO - Table of Zero Offset in program coordinate
<para><img src="../media/MC.ZeroOffset.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.SetDataUnit(Okuma.CMDATAPI.Enumerations.DataUnitEnum)">
            <summary>
Sets current data unit for this class instance.
</summary>
            <example> This sample code shows how to call the SetDataUnit() method.
<para> Dim objWorkpiece As New CWorkpiece </para><para> Dim enDataUnit As DataUnitEnum = DataUnitEnum.Unit_Inch </para><para>	objWorkpiece.SetDataUnit(enDataUnit) </para></example>
            <param name="enDataUnit">Data Unit to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
If applicable, this setting is applied to data in this class instance only, not for NC Data Unit.
For linear axis position, data unit can be either mm or inch.  
For circular (rotary) axis position, data unit is in degree only.
For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, 
then NC data will be converted to inch and vice versa.
</remarks>
            <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. 
<para><img src="../media/ParametersScreen.DataUnit.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.GetWorkpieceCounterSet(Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum)">
            <summary>
Gets the workpiece counter SET at the specified counter index
</summary>
            <example> This sample shows how to call the GetWorkpieceCounterSet method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim enValue As WorkpieceCounterEnum </para><para>Dim intValue As Integer </para><para>intValue = objWorkPiece.GetWorkpieceCounterSet(enValue) </para></example>
            <param name="enValue">Workpiece counter.  Values of parameter come from Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum enumeration.</param>
            <returns>A System.Int32 value represents the workpiece counter SET at the specified counter index.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC Work shop counter spec code [18,2]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> NC OPR MONITOR (1/2) SET - Workpiece counter table
<para><img src="../media/MC.Workcounter.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.GetCurrentZeroOffsetNumber">
            <summary>
Gets the current zero offset number in use.
</summary>
            <example> This sample shows how to call the GetCurrentZeroOffsetNumber method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim intValue As Integer </para><para>intValue = objWorkPiece.GetCurrentZeroOffsetNumber() </para></example>
            <returns>A System.Int32 value represents the current zero offset number in use.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> Co - Current zero offset number in use by the system in program coordinate.
<para><img src="../media/MC.ZeroOffset.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.GetWorkpieceCounter(Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum)">
            <summary>
Gets the workpiece counter COUNT at the specified counter index
</summary>
            <example> This sample shows how to call the GetWorkpieceCounter method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim enValue As WorkpieceCounterEnum </para><para>Dim intValue As Integer </para><para>intValue = objWorkPiece.GetWorkpieceCounter(enValue) </para></example>
            <param name="enValue">Workpiece counter.  Values of parameter come from Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum enumeration.</param>
            <returns>A System.Int32 value represents the workpiece counter COUNT at the specified counter index.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>NC Work shop counter spec code [18,2]</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure> NC OPR MONITOR (1/2) COUNT - Workpiece counter table
<para><img src="../media/MC.Workcounter.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.GetZeroOffset(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets zero offset in the program coordinate at the specified axis index, and offset index
</summary>
            <example> This sample shows how to call the GetZeroOffset method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim intWorkpieceOffsetIndex As Integer </para><para>Dim enAxisIndex As AxisIndexEnum </para><para>Dim intValue As Integer </para><para>intValue = objWorkPiece.GetZeroOffset(intWorkpieceOffsetIndex, enAxisIndex) </para></example>
            <param name="intWorkpieceOffsetIndex">Offset index.  The 1-based index at which the information is obtained</param>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>A System.Double value represents the zero offset in the program coordinate at the specified axis index, and offset index.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <Figure> PROGRAM ZERO - Table of zero offset in program coordinate
<para><img src="../media/MC.ZeroOffset.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.GetZeroOffsets(System.Int32,System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets zero offset values at the specified axis index, and offset indexes
</summary>
            <example> This sample shows how to call the GetZeroOffsets method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim intFromIndex As Integer </para><para>Dim intToIndex As Integer </para><para>Dim enAxisIndex As AxisIndexEnum </para><para>Dim dblValues() As Double </para><para>dblValues = objWorkPiece.GetZeroOffsets(intFromIndex, intToIndex, enAxisIndex) </para></example>
            <param name="intFromIndex">Starting offset index.  The 1-based index at which the information is obtained</param>
            <param name="intToIndex">Ending offset index.  The 1-based index at which the information is obtained</param>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>An array of System.Double represents the zero offset values at the specified axis index, and offset indexes.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <Figure> PROGRAM ZERO - Table of zero offset in program coordinate
<para><img src="../media/MC.ZeroOffset.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.GetMaxZeroOffset">
            <summary>
Gets the maximum number of zero offset configured for this system.
</summary>
            <example> This sample shows how to call the GetMaxZeroOffset method.
<para>Dim objWorkPiece As New CWorkpiece </para><para>Dim intValue As Integer </para><para>intValue = objWorkPiece.GetMaxZeroOffset() </para></example>
            <returns>A System.Int32 value represents the maximum number of zero offset configured for this system.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CWorkpiece">
            <summary>
Class provides work piece information.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetPeriodOperatingReportDate">
            <summary>
Gets the Period operating report date
</summary>
            <example> This sample shows how to call the GetPeriodOperatingReportDate method.
<para> Dim objOperatingReport As New MacMan.COperatingReport </para><para> Dim strValue As String </para><para> strValue = objOperatingReport.GetPeriodOperatingReportDate() </para></example>
            <returns>A System.String value that represents the Period operating report date in this format yyyy/mm/dd format</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> OPERATING REP: PERIOD 
<para><img src="../media/MacMan.OperatingReport.Previous.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetPreviousOperatingReportDate">
            <summary>
Gets the previous day operating report date
</summary>
            <example> This sample shows how to call the GetPreviousOperatingReportDate method.
<para> Dim objOperatingReport As New MacMan.COperatingReport </para><para> Dim strValue As String </para><para> strValue = objOperatingReport.GetPreviousOperatingReportDate() </para></example>
            <returns>A System.String value that represents the previous day operating report date in this format: yyyy/mm/dd</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> OPERATING REP: DAILY(PREV) 
<para><img src="../media/MacMan.OperatingReport.Previous.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetTodayOperatingReportDate">
            <summary>
Gets Today operating report date
</summary>
            <example> This sample shows how to call the GetTodayOperatingReportDate method.
<para> Dim objOperatingReport As New MacMan.COperatingReport </para><para> Dim strValue As String </para><para> strValue = objOperatingReport.GetTodayOperatingReportDate() </para></example>
            <returns>A System.String value that represents the date in yyyy/mm/dd format.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> OPERATING REP: DAILY(TODAY) 
<para><img src="../media/MacMan.OperatingReport.Today.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetPeriodOperatingReport(Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum)">
            <summary>
Gets the Period operating report for the specified report data
</summary>
            <example> This sample shows how to call the GetPeriodOperatingReport method.
<para> Dim objOperatingReport As New MacMan.COperatingReport </para><para> Dim enValue As OperatingReportDataEnum </para><para> Dim intValue As Int64 </para><para> intValue = objOperatingReport.GetPeriodOperatingReport(enValue) </para></example>
            <param name="enReportData">Report data to be retreived.  Values for this parameter come from the Okuma.CMDATAPI.OperatingReportDataEnum enumeration.</param>
            <returns>A System.Int64 value represents the Period operating report for the specified report data.</returns>
            <DataUnit>Seconds</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> OPERATING REP: PERIOD
<para><img src="../media/MacMan.OperatingReport.Period.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetPreviousOperatingReport(Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum)">
            <summary>
Gets the previoud day operating report at the specified report data
</summary>
            <example> This sample shows how to call the GetPreviousOperatingReport method.
<para> Dim objOperatingReport As New MacMan.COperatingReport </para><para> Dim enValue As OperatingReportDataEnum </para><para> Dim intValue As Int64 </para><para> intValue = objOperatingReport.GetPreviousOperatingReport(enValue) </para></example>
            <param name="enReportData">Report data to be retreived.  Values for this parameter come from the Okuma.CMDATAPI.OperatingReportDataEnum enumeration.</param>
            <returns>A System.Int64 value represents the previoud day operating report at the specified report data.</returns>
            <DataUnit>Seconds</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> OPERATING REP: DAILY(PREV)
<para><img src="../media/MacMan.OperatingReport.Previous.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetTodayOperatingReport(Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum)">
            <summary>
Gets the Today operating report at the specified report data
</summary>
            <example> This sample shows how to call the GetTodayOperatingReport method.
<para> Dim objOperatingReport As New MacMan.COperatingReport </para><para> Dim enValue As OperatingReportDataEnum </para><para> Dim intValue As Int64 </para><para> intValue = objOperatingReport.GetTodayOperatingReport(enValue) </para></example>
            <param name="enReportData">Report data to be retreived.  Values for this parameter come from the Okuma.CMDATAPI.OperatingReportDataEnum enumeration.</param>
            <returns>A System.Int64 value represents the Today operating report at the specified report data in this format: yyyy/mm/dd.</returns>
            <DataUnit>Seconds</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> OPERATING REP: DAILY(TODAY)
<para><img src="../media/MacMan.OperatingReport.Today.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetNonOperatingCondition">
[enter]  <summary>
Gets the Non-operating condition of the machine.
</summary><example> This sample shows how to call the GetNonOperatingCondition method.
<para> Dim objOperatingReport As New MacMan.COperatingReport </para><para> Dim enValue As NonOperatingConditionEnum </para><para> enValue = objOperatingReport.GetNonOperatingCondition </para></example><returns>An Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum enumeration value represents the period operating report at the specified report data.</returns><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception><Figure> OPERATING REP:DAILY(TODAY) - NOT OPERATING - NO OPERATOR -  When the machine is not operating, it is in one the non-operating condition
such as in-proc setup, no operator, part waiting, maintenance, other.
<para><img src="../media/MacMan-OperatingReport.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetOperatingStatus">
            <summary>
Gets the machine operating status
</summary>
            <example> This sample shows how to call the GetOperatingStatus method.
<para> Dim objOperatingReport As New MacMan.COperatingReport </para><para> Dim enValue As OperatingStatusEnum </para><para> enValue = objOperatingReport.GetOperatingStatus </para></example>
            <returns>A Okuma.CMDATAPI.Enumerations.OperatingStatusEnum enumeration value represents the machine operating status. </returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> START - OPERATING - Machine is operating if Operating has a yellow color in its background.  Otherwise, it is not operating.
<para><img src="../media/MacMan-OperatingReport.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetMaxCount">
            <summary>
Gets the maximum number of Operating report that can be stored by the system
</summary>
            <example> This sample shows how to call the GetMaxCount method.
<para> Dim objOperatingReport As New MacMan.COperatingReport </para><para> Dim intMaxCount As Integer </para><para> intMaxCount = objOperatingReport.GetMaxCount </para></example>
            <returns>A System.Int32 value that represents the maximum number of Operating report that can be stored by the system.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <figure />
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport">
            <summary>
Class provides operating report information stored by NC.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.CalNCOptionalParameterLongWord(System.Int32,System.Int32)">
[enter]<summary>Determine the NC Optional Parameter LONG WORD value based on the calculation made on the input value and actual position at the specified long word index.
Please see <a href="../ExternalDocuments/MC.OPE-B1001.html">Optional Parameter (Long Word)</a> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information.
</summary><example> This example shows how to call CalNCOptionalParameterLongWord function.
 <para> Dim objOptionalParameter As New COptionalParameter as Integer	</para><para> Dim intValue as Integer	</para><para> Dim intLongWordIndex as Integer	</para><para> objOptionalParameter.CalNCOptionalParameterLongWord(intLongWordIndex, intValue)	</para></example><param name="intLongWordIndex">LONG WORD index</param><param name="intValue">LONG WORD value to be calculated</param><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD
<para><img src="../media/MC.Parameter.NCOptionalBitWordLongWord.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.AddNCOptionalParameterLongWord(System.Int32,System.Int32)">
[enter]<summary>Sets NC Optional Parameter LONG WORD by adding the input value to the existing data at the specified index.
Please see <a href="../ExternalDocuments/MC.OPE-B1001.html">Optional Parameter (Long Word)</a> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information.
</summary><example> This example shows how to use AddNCOptionalParameterLongWord function.
<para> Dim objOptionalParameter As New COptionalParameter as Integer	</para><para>   Dim intValue as Integer	</para><para> Dim intLongWordIndex as Integer	</para><para> objOptionalParameter.AddNCOptionalParameterLongWord(intLongWordIndex, intValue)	</para></example><param name="intLongWordIndex">LONG WORD index</param><param name="intValue">LONG WORD value to be added</param><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> PARAMETER - OPTIONAL BIT, WORD, LONG WORD
<para><img src="../media/MC.Parameter.NCOptionalBitWordLongWord.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.SetNCOptionalParameterLongWord(System.Int32,System.Int32)">
[enter]<summary>Set NC Optional parameter LONG WORD value at long word index.
Please see <a href="../ExternalDocuments/MC.OPE-B1001.html">Optional Parameter (Long Word)</a> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information.
</summary><example> This example shows how to Set NC Optional parameter LONG WORD value at long word index.
<para> Dim objOptionalParameter As New COptionalParameter as Integer	</para><para> Dim intValue As Integer	</para><para> Dim intLongWordIndex As Integer	</para><para> objOptionalParameter.SetNCOptionalParameterLongWord(intLongWordIndex, intValue)	</para></example><param name="intLongWordIndex">LONG WORD index</param><param name="intValue">LONG WORD value to set at LONG WORD INDEX</param><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD
<para><img src="../media/MC.Parameter.NCOptionalBitWordLongWord.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.AddNCOptionalParameterWord(System.Int32,System.Int32)">
[enter]<summary>Sets NC Optional Parameter WORD by adding the input value to the existing data at the specified index.
Please see <a href="../ExternalDocuments/MC.OPE-B1002.html">Optional Parameter (Word)</a> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information.
</summary><example> This example shows how to call AddNCOptionalParameterWord function.
<para> Dim objOptionalParameter As New COptionalParameter as Integer	</para><para> Dim intValue as Integer	</para><para> Dim intWordIndex as Integer	</para><para> objOptionalParameter.AddNCOptionalParameterWord(intWordIndex, intValue)</para></example><param name="intWordIndex">WORD index</param><param name="intValue">WORD value to be added</param><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD
<para><img src="../media/MC.Parameter.NCOptionalBitWordLongWord.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.SetNCOptionalParameterWord(System.Int32,System.Int32)">
[enter]<summary>Set NC Optional parameter WORD value at word index.
Please see <a href="../ExternalDocuments/MC.OPE-B1002.html">Optional Parameter (Word)</a> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information.
</summary><example> This example shows how to call SetNCOptionalParameterWord 
<para> Dim objOptionalParameter As New COptionalParameter as Integer	</para><para> Dim intValue As Integer	</para><para> Dim intWordIndex As Integer	</para><para> objOptionalParameter.SetNCOptionalParameterWord(intWordIndex, intValue)	</para></example><param name="intWordIndex">WORD index</param><param name="intValue">WORD value to set at WORD INDEX</param><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD
<para><img src="../media/MC.Parameter.NCOptionalBitWordLongWord.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.SetNCOptionalParameterBit(System.Int32,System.Int32,Okuma.CMDATAPI.Enumerations.OnOffStateEnum)">
[enter]<summary>Set NC Optional parameter bit value at bit index.
Please see <a href="../ExternalDocuments/MC.OPE-B1003.html">Optional Parameter (Bit)</a> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information.
</summary><example> This example shows how to call SetNCOptionalParameterBit function.
<para> Dim objOptionalParameter As New COptionalParameter as Integer	</para><para> Dim intBitIndex As Integer	</para><para> Dim intBitNo As Integer	</para><para> Dim enValue As OnOffStateEnum	</para><para> objOptionalParameter.SetNCOptionalParameterBit(intBitIndex, intBitNo, enValue)	</para></example><param name="intBitIndex">Bit index</param><param name="intBitNo">Bit number ranging from 0 to 7</param><param name="enValue">Bit value</param><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD
<para><img src="../media/MC.Parameter.NCOptionalBitWordLongWord.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.GetNCOptionalParameterLongWord(System.Int32)">
[enter]<summary>Gets NC Optional parameter LONG WORD value at long word index.
Please see <a href="../ExternalDocuments/MC.OPE-B1001.html">Optional Parameter (Long Word)</a> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information.
</summary><example> This example shows how to call GetNCOptionalParameterLongWord function.
<para> Dim objOptionalParameter As New COptionalParameter as Integer	 </para><para> Dim intValue as Integer	 </para><para> Dim intLongWordIndex as Integer	 </para><para> intValue = objOptionalParameter.GetNCOptionalParameterLongWord(intLongWordIndex)	 </para></example><param name="intLongWordIndex">LONG WORD index</param><returns>A System.Int32 value represents the NC Optional parameter LONG WORD value at long word index.</returns><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD
<para><img src="../media/MC.Parameter.NCOptionalBitWordLongWord.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.GetNCOptionalParameterWord(System.Int32)">
[enter]<summary>Gets NC Optional parameter WORD value at word index.
Please see <a href="../ExternalDocuments/MC.OPE-B1002.html">Optional Parameter (Word)</a> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information.
</summary><example> This example shows how to call GetNCOptionalParameterWord function.
<para> Dim objOptionalParameter As New COptionalParameter as Integer	</para><para> Dim intValue as Integer		</para><para> Dim intWordIndex as Integer		</para><para> intValue = objOptionalParameter.GetNCOptionalParameterWord(intWordIndex)		</para></example><param name="intWordIndex">WORD index</param><returns>A System.Int32 value represents the NC Optional parameter WORD value at word index.</returns><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD
<para><img src="../media/MC.Parameter.NCOptionalBitWordLongWord.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.GetNCOptionalParameterBit(System.Int32,System.Int32)">
[enter]<summary>Gets NC Optional parameter bit value at bit index
Please see <a href="../ExternalDocuments/MC.OPE-B1003.html">Optional Parameter (Bit)</a> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information.
</summary><example> This example shows how to GetNCOptionalParameterBit()
<para> Dim objOptionalParameter As New COptionalParameter </para><para> Dim intBitNo As Integer	 </para><para> Dim intBitIndex As Integer	 </para><para> Dim enValue As OnOffStateEnum	 </para><para> enValue = objOptionalParameter.GetNCOptionalParameterBit(intBitIndex, intBitNo )	 </para></example><param name="intBitIndex">Bit index</param><param name="intBitNo">Bit number ranging from 0 to 7</param><returns>An OnOffStateEnum value represents NC Optional parameter bit value at bit index.</returns><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD
<para><img src="../media/MC.Parameter.NCOptionalBitWordLongWord.jpg" /></para></Figure></member>
        <member name="T:Okuma.CMDATAPI.DataAPI.COptionalParameter">
            <summary>
Class provides operation to Optional Parameter Long, Word, and Bit on NC.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetAlarms(System.Int32,System.Int32)">
            <summary>
Gets alarm history information at the specified alarm indexes
</summary>
            <example>This example shows how to call GetAlarms method:
<para> Dim m_objAlarmHistory As New CAlarmHistory</para><para> Dim arAlarms As ArrayList </para><para> Dim intFromIndex As Integer </para><para> Dim intToIndex As Integer </para><para> Dim objAlarmHistory As New MacMan.CAlarmHistory </para><para> arAlarms = objAlarmHistory.GetAlarms(intFromIndex, intToIndex) </para></example>
            <param name="intFromIndex">Starting index.  The 1-based index at which the information is obtained</param>
            <param name="intToIndex">Ending index.  The 1-based index at which the information is obtained</param>
            <returns>An array list of CAlarm object that represents the Alarm history data if there is one available.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> ALARM HISTORY - List of all alarms in history in the descending order of date
<para><img src="../media/MacMan-AlarmHistory.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetAlarm(System.Int32)">
            <summary>
Gets alarm history information at the specified alarm index 
</summary>
            <example> This sample shows how to call the GetAlarm() method.
<para> Dim strAlarmCode As String </para><para> Dim strAlarmDate As String </para><para> Dim strAlarmMessage As String </para><para> Dim strAlarmNumber As String </para><para> Dim strAlarmTime As String </para><para> Dim intAlarmIndex As Integer </para><para> Dim intCount As Integer </para><para> Dim intMaxCount As Integer </para><para> Dim objAlarmHistory As New MacMan.CAlarmHistory </para><para> Dim objAlarm As MacMan.CAlarm </para><para> objAlarm = objAlarmHistory.GetAlarm(intAlarmIndex) </para><para> strAlarmCode = objAlarm.Code </para><para> strAlarmDate = objAlarm.Date </para><para> strAlarmMessage = objAlarm.Message </para><para> strAlarmNumber = objAlarm.Number </para><para> strAlarmTime = objAlarm.Time </para><para> intCount = objAlarmHistory.GetCount </para><para> intMaxCount = objAlarmHistory.GetMaxCount </para></example>
            <param name="intAlarmIndex">Starting index.  The 1-based index at which the information is obtained</param>
            <returns>An Okuma.CMDATAPI.DataAPI.MacMan.CAlarm object represents the Alarm history data if there is one available.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> ALARM HISTORY - List of all alarms in history in the descending order of date
<para><img src="../media/MacMan-AlarmHistory.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetCount">
            <summary>
Gets the number of records contained in the Alarm History
</summary>
            <example> This sample shows how to call the GetCount() method.
<para> Dim strAlarmCode As String </para><para> Dim strAlarmDate As String </para><para> Dim strAlarmMessage As String </para><para> Dim strAlarmNumber As String </para><para> Dim strAlarmTime As String </para><para> Dim intAlarmIndex As Integer </para><para> Dim intCount As Integer </para><para> Dim intMaxCount As Integer </para><para> Dim objAlarmHistory As New MacMan.CAlarmHistory </para><para> Dim objAlarm As MacMan.CAlarm </para><para> objAlarm = objAlarmHistory.GetAlarm(intAlarmIndex) </para><para> strAlarmCode = objAlarm.Code </para><para> strAlarmDate = objAlarm.Date </para><para> strAlarmMessage = objAlarm.Message </para><para> strAlarmNumber = objAlarm.Number </para><para> strAlarmTime = objAlarm.Time </para><para> intCount = objAlarmHistory.GetCount </para><para> intMaxCount = objAlarmHistory.GetMaxCount </para></example>
            <returns>A System.Int32 value that represents the number of records contained in the Alarm History</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetMaxCount">
            <summary>
Gets the maximum number of Alarm History that can be stored by the system.
</summary>
            <example> This sample shows how to call the GetMaxCount() method.
<para> Dim strAlarmCode As String </para><para> Dim strAlarmDate As String </para><para> Dim strAlarmMessage As String </para><para> Dim strAlarmNumber As String </para><para> Dim strAlarmTime As String </para><para> Dim intAlarmIndex As Integer </para><para> Dim intCount As Integer </para><para> Dim intMaxCount As Integer </para><para> Dim objAlarmHistory As New MacMan.CAlarmHistory </para><para> Dim objAlarm As MacMan.CAlarm </para><para> objAlarm = objAlarmHistory.GetAlarm(intAlarmIndex) </para><para> strAlarmCode = objAlarm.Code </para><para> strAlarmDate = objAlarm.Date </para><para> strAlarmMessage = objAlarm.Message </para><para> strAlarmNumber = objAlarm.Number </para><para> strAlarmTime = objAlarm.Time </para><para> intCount = objAlarmHistory.GetCount </para><para> intMaxCount = objAlarmHistory.GetMaxCount </para></example>
            <returns>A System.Int32 value that represents the maximum number of Alarm History that can be stored by the system for current sub system.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetAlarmObject(System.Int32,System.Int32)">
            <summary>NA</summary>
            <example>This sample shows how to call the GetAlarmObject() method.
</example>
            <param name="intAlarmIndex">Alarm history index to be retrieved</param>
            <param name="intErrorCode">Alarm history error code to be retrieved</param>
            <returns>A System.Int32 value</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetAlarmMessage(System.Int32,System.Int32)">
            <summary>N/A</summary>
            <example> This sample shows how to call the GetAlarmMessage() method.
</example>
            <param name="intAlarmIndex">Alarm history index to be retrieved</param>
            <param name="intErrorCode">Alarm history error code to be retrieved</param>
            <returns>A System.String value</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetAlarmTime(System.Int32,System.Int32)">
            <summary>N/A</summary>
            <example>This sample shows how to call the GetAlarmTime() method.
</example>
            <param name="intAlarmIndex">Alarm history index to be retrieved</param>
            <param name="intErrorCode">Alarm history error code to be retrieved</param>
            <returns>A System.String value</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetAlarmDate(System.Int32,System.Int32)">
            <summary>N/A</summary>
            <example> This sample shows how to call the get_AlarmDate() method.
</example>
            <param name="intAlarmIndex">Alarm history index to be retrieved</param>
            <param name="intErrorCode">Alarm history error code to be retrieved</param>
            <returns>A System.String value that represent alarm date</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.ValidateIndex(System.Int32,System.String,System.Int32)">
            <summary>NA</summary>
            <example> This sample shows how to call the ValidateIndex() method.
</example>
            <param name="intValue">Index value.  The index at which the validate has been checked.</param>
            <param name="strErrorSource">Error string from source.</param>
            <param name="intErrorCode">Error code number</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <figure />
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory">
            <summary>
Class provides alarm history information stored by NC.
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm.Object">
            <summary>
the alarm object
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm.Message">
            <summary>
Gets the alarm message for this CAlarm instance.  Sets the alarm message for this CAlarm instance only.
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm.Number">
            <summary>
the alarm number
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm.Time">
            <summary>
the alarm time. 
A System.String containing the alarm time in this format "hh:mm:s"
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm.Code">
            <summary>
the alarm code
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm.Date">
            <summary>
the alarm date.
A System.String containing the alarm date in this format "yyyy/mm/dd".
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm">
            <summary>
Class represents particular alarm history information from NC.
It is read-only information. NC Alarm information cannot be changed by this class.
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.CIOAddress.Value">
            <summary>
I/O value. For IOAddressSizeEnum.Bit, it has a value of 1 if Bit is ON, otherwise it has a value of zero or Bit is OFF.
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.CIOAddress.IOType">
            <summary>I/O type</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.CIOAddress.Size">
            <summary>I/O data size - Bit/Word/Long Word</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.CIOAddress.Bit">
            <summary>Logical I/O address bit location</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.CIOAddress.Address">
            <summary>Logical I/O address index location</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CIOAddress">
            <summary>
Class represents I/O address data
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetAmountUnsualSignalChange(System.Int32,System.Double)">
            <summary>
Sets the amount of unsual signal change in the MOP tool data setup table for a given MOP Tool Load Data number.
</summary>
            <example> This sample shows how to call the SetAmountUnsualSignalChange() method.
<para>Dim objMopTool As New CMopTool </para><para>		Dim intLoadDataNo As Integer </para><para>		Dim dblValue As Double </para><para>		objMopTool.SetAmountUnsualSignalChange(intLoadDataNo, dblValue) </para></example>
            <param name="intLoadDataNo">a MOP Tool Load data number.  It is ranging from 1 to 16.</param>
            <param name="dblValue">Value to be set.  Setting range: 0.001 to 99999.999</param>
            <DataUnit>Percent</DataUnit>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - PARAMETER SETTING LOAD M PARAMETER - ABNORMAL-SIG. RATE
<para><img src="../media/MC.MOP.PARAMETER.LOAD-M.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetToolDataInputMode(Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
            <summary>
Sets the Tool Data Input mode
</summary>
            <example> This sample shows how to call the SetToolDataInputMode() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim enValue As MOPToolInputModeEnum </para><para>		objMopTool.SetToolDataInputMode(enValue) </para></example>
            <param name="enValue">Value to be set for tool data input mode.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum enumeration.</param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - PARAMETER SETTING MODE SELECT PARAMETER - TOOL DATA INPUT - ABSOLUTE/RELATIVE
<para><img src="../media/MC.MOP.PARAMETER.MODESELECT.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This determines whether the threshold levels (AL.V,LIMIT,LL,UL), set in the tool data, are input as a relative value (percentage)
in reference to the reference value or as an absolute value.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetAutoChange(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.OnOffEnum)">
            <summary>
Sets the Auto Change monitoring function status.
</summary>
            <example> This sample shows how to call the SetAutoChange() method.
<para>Dim objMopTool As New CMopTool </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enValue As OnOffEnum </para><para>		objMopTool.SetAutoChange(enAxisIndex, intToolDataNo, enValue) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool data number</param>
            <param name="enValue">Value to be set</param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AUTO-SET CHANGE
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <remarks>
This determines whether or not the parameters defined in Reference, AL.V, Limit, UL, LL, Max. Override, Min. Override, Air-Cut Override, Overload Moninotr, Adaptive Control, and Air-Cut Reduction function  should be changed
in the automatic setting mode.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetReferenceValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,System.Double)">
            <summary>
Sets the Reference (REF) value for the given MOP-Tool data number, and axis index.
</summary>
            <example> This sample shows how to call the SetReferenceValue() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim intValue As Integer</para><para>		Dim enValue As OnOffEnum</para><para>		objMopTool.SetReferenceValue(enAxisIndex, intToolDataNo, enValue) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool data number</param>
            <param name="dblValue">
Reference value to be set.  Setting range: 0.001 to 99999.999. 
</param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - REF. - Reference value
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the system.</exception>
            <remarks>
This is the reference value when the tool data is set using a relative value. When the tool data
is automatically set, the maximum load during automatic setting period is set as the REF.
<para>
Notes: Setting of REF, AL.V, Limit, UL, and LL are all related to each other.  
Changing the value of one of these settings might cause an invalid setting in other settings.
</para></remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetCuttingTime(System.Int32,System.Int32)">
            <summary>
Sets the Cutting Time value for a given MOP-Tool data
</summary>
            <example> This sample shows how to call the SetCuttingTime() method.
<para>		Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim intValue As Integer </para><para>		objMopTool.SetCuttingTime(intToolDataNo, intValue) </para></example>
            <param name="intToolDataNo">MOP Tool data number</param>
            <param name="intValue">
Cutting Time value to be set
<para>Setting range: 0 - 3599999 seconds</para></param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
Unit is in second.
</DataUnit>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING ENTRY TOOL LIST - CUTTING TIME
<para> Cutting time for MOP Tool data number 1 (Tool number 40-0) is 1 second.
<img src="../media/MopTool.ToolDataSettinglist.jpg" /></para></Figure>
            <remarks>
CUTTING TIME indicates the total time in which measured value has been higher than the AIR-CUT LEVEL value.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetAirCutOverride(System.Int32,System.Int32)">
            <summary>
Sets the air-cut override value for a given MOP-Tool data
</summary>
            <example> This sample shows how to call the SetAirCutOverride() method.
<para>Dim objMopTool As New CMopTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim intValue As Integer </para><para>		objMopTool.SetAirCutOverride(intToolDataNo, intValue) </para></example>
            <param name="intToolDataNo">MOP Tool data number</param>
            <param name="intValue">
Air-Cut override value to be set
<para>Setting range: 1 to 200%</para></param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AIR-CUT OVERRIDE
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This determines the air-cut override value of the air-cut time reduction function.
<para>
The setting of Max, Min, and air-cut override items are common data for all load data. Therefore, changing the setting
for them at any page, the change is reflected to all pages.			
</para></remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetMinOverride(System.Int32,System.Int32)">
            <summary>
Sets the minimum override value for a given MOP-Tool data
</summary>
            <example> This sample shows how to call the SetMinOverride() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim intValue As Integer</para><para>		objMopTool.SetMinOverride(intToolDataNo, intValue) </para></example>
            <param name="intToolDataNo">MOP Tool data number</param>
            <param name="intValue">
Min. override value to be set
<para>Setting range: 1 to 200%</para></param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - MIN. OVERRIDE
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This determines the lower limit level of the override in the adaptive control.
<para>
The setting of Max, Min, and air-cut override items are common data for all load data. Therefore, changing the setting
for them at any page, the change is reflected to all pages.			
</para></remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetMaxOverride(System.Int32,System.Int32)">
            <summary>
Sets the maximum override value for a given MOP-Tool data
</summary>
            <example> This sample shows how to call the SetMaxOverride() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim intValue As Integer</para><para>		objMopTool.SetMaxOverride(intToolDataNo, intValue) </para></example>
            <param name="intToolDataNo">MOP Tool data number</param>
            <param name="intValue">
Max override value to be set
<para>Setting range: Minimum override value to 200%</para></param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - MAX. OVERRIDE
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This determines the lower limit level of the override in the adaptive control.
<para>
The setting of Max, Min, and air-cut override items are common data for all load data. Therefore, changing the setting
for them at any page, the change is reflected to all pages.			
</para></remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetAirCutReduction(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.OnOffEnum)">
            <summary>
Sets air-cut reduction status for a given MOP tool number, and an axis number.
</summary>
            <example> This sample shows how to call the SetAirCutReduction() method.
<para>Dim objMopTool As New CMopTool </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enValue As OnOffEnum </para><para>		objMopTool.SetAirCutReduction(enAxisIndex, intToolDataNo, enValue) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool Data number</param>
            <param name="enValue">Air-cut reduction status to be set.  Values of parameter come from Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration.</param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AIR-CUT- REDUCT
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <remarks>
This determines ON/OFF of the air-cut time reduction function. If OFF is set, air-cut time reduction
function is not executed independent of the setting for air-cut time reduction function by load data.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetAdaptiveControl(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.OnOffEnum)">
            <summary>
Sets adaptive control monitoring function status.
</summary>
            <example> This sample shows how to call the SetAdaptiveControl() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim enValue As OnOffEnum </para><para>		objMopTool.SetAdaptiveControl(enAxisIndex, intToolDataNo, enValue) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool Data number</param>
            <param name="enValue">adaptive control status to be set</param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - ADAPTIVE CONTROL - ON/OFF
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <remarks>
This determines ON/OFF of the adaptive control monitoring function. If "OFF" is set, the adaptive
control function is not executed.
Note: The adaptive control uses one type of load signal for each tool data. Therefore, if the
adaptive control setting is changed from OFF to ON, the load signal having been ON is
automatically switched.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetOverloadMonitor(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.OnOffEnum)">
            <summary>
Sets the overload monitor function status.
</summary>
            <example> This sample shows how to call the SetOverloadMonitor() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim intValue As Integer</para><para>		Dim enValue As OnOffEnum</para><para>		objMopTool.SetOverloadMonitor(enAxisIndex, intToolDataNo, enValue) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool Data number</param>
            <param name="enValue">overload status to be set</param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - OVERLOAD MONITOR - ON/OFF
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This determines ON/OFF of the overload monitoring function. If "OFF" is set, the overload
monitoring function is not executed. 
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetLLValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,System.Double,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
            <summary>
Sets the Lower Limit (LL) value for the given MOP Tool Data number, axis index, and tool data input mode.
</summary>
            <example> This sample shows how to call the SetLLValue() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim enValue As MOPToolInputModeEnum </para><para>		Dim dblValue As Double</para><para>		objMopTool.SetLLValue(enAxisIndex, intToolDataNo, dblValue, enValue) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool Data number</param>
            <param name="dblValue">
LL value to be set. 
<para>Setting range:</para><para>1% to Upper limit of adaptive control (relative value [%]</para><para>0.001 to Upper limit of adaptive control (measured value)</para></param>
            <param name="enValue">Mode at which UL value sets to</param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - LL - Lower level limit
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This is the lower limit level used by the adaptive control function. The setting is made in either the
measure value or percentage to the reference value.
The adaptive control function controls the feed override values so that the load signal always lies
between the upper and lower limits.
<para>
Notes: Setting of REF, AL.V, Limit, UL, and LL are all related to each other.  
Changing the value of one of these settings might cause an invalid setting in other settings.
</para></remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetULValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,System.Double,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
            <summary>
Sets the Upper Limit (UL) value for the given MOP Tool Data number, axis index, and tool data input mode.
</summary>
            <example> This sample shows how to call the SetULValue() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim enValue As MOPToolInputModeEnum </para><para>		Dim dblValue As Double</para><para>		objMopTool.SetULValue(enAxisIndex, intToolDataNo, dblValue, enValue) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool Data number</param>
            <param name="dblValue">UL value to be set.
<para>Setting range:</para><para>Lower limit of adaptive control to 200% (relative value [%])</para><para>Lower limit of adaptive control to 99999.999 (measured value)</para></param>
            <param name="enValue">Mode at which UL value sets to</param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - UL - Upper limit
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This is the upper limit level used by the adaptive control function. The setting is made in either
the measure value or percentage to the reference value.
The adaptive control function controls the feed override values so that the load signal always
lies between the upper and lower limits.
<para>
Notes: Setting of REF, AL.V, Limit, UL, and LL are all related to each other.  
Changing the value of one of these settings might cause an invalid setting in other settings.
</para></remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetLimitValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,System.Double,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
            <summary>
Sets the Limit value for the given MOP Tool Data number, axis index, and tool data input mode.
</summary>
            <example> This sample shows how to call the SetLimitValue() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim enValue As MOPToolInputModeEnum </para><para>		Dim dblValue As Double</para><para>		objMopTool.SetLimitValue(enAxisIndex, intToolDataNo, dblValue, enValue) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool Data number</param>
            <param name="dblValue">Limit value to be set.
Setting range: 1 to 200% (relative value [%])
0.001 to 99999.999 (measured value)
</param>
            <param name="enValue">Mode at which Limit value sets to</param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - LIMIT
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This is the threshold level used by the overload monitoring function for determining the overload status
to give the overload alarm. The setting is made in either the measured value or percentage to the
reference value.
<para>
Notes: Setting of REF, AL.V, Limit, UL, and LL are all related to each other.  
Changing the value of one of these settings might cause an invalid setting in other settings.
</para></remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetALVValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,System.Double,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
            <summary>
Sets the AL.V value for the given MOP Tool Data number, axis index, and tool data input mode.
</summary>
            <example> This sample shows how to call the SetALVValue() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim enValue As MOPToolInputModeEnum </para><para>		Dim dblValue As Double </para><para>		objMopTool.SetALVValue(enAxisIndex, intToolDataNo, dblValue, enValue) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool Data number</param>
            <param name="dblValue">
AL.V value to be set. 
Setting range: 1 to 200% (relative value [%])
0.001 to 99999.999 (measured value)
</param>
            <param name="enValue">
Mode at which AL.V value sets to
</param>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AL.V 
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This is the threshold level used by the overload monitoring function for determining the tool
wear status to give the tool wear alarm. The setting is made in either the measured value or
percentage to the reference value.
<para>
Notes: Setting of REF, Limit, AL.V, UL, and LL are all related to each other.  
Changing the value of one of these settings might cause an invalid setting in other settings.
</para></remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetAmountUnsualSignalChange(System.Int32)">
            <summary>
Gets the amount of unsual signal change in the MOP tool data setup table for a given MOP Tool Load Data number.
</summary>
            <example>
                <para>Dim objMopTool As New CMOPTool </para>
                <para>		Dim intLoadDataNo As Integer </para>
                <para>		Dim dblValue As Double </para>
                <para>		dblValue = objMopTool.GetAmountUnsualSignalChange(intLoadDataNo) </para>
            </example>
            <param name="intLoadDataNo">Load data number.  It is ranging from 1 to 16.</param>
            <returns>A System.Double value</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - PARAMETER SETTING LOAD M PARAMETER - ABNORMAL-SIG. RATE
<para><img src="../media/MC.MOP.PARAMETER.LOAD-M.jpg" /></para></Figure>
            <DataUnit>Percent</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetReferenceValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
            <summary>
Get the absolue value of Reference data for the selected axis index and MOP tool data number.
</summary>
            <example> This sample shows how to call the GetReferenceValue() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim dblValue As Double </para><para>		dblValue = objMopTool.GetReferenceValue(enAxisIndex, intToolDataNo) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">MOP Tool data number</param>
            <returns>An System.Double value that represents the Reference (REF) value.</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - REF. - Reference value
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the system.</exception>
            <remarks>
This is the reference value when the tool data is set using a relative value. When the tool data
is automatically set, the maximum load during automatic setting period is set as the REF.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetToolDataInputMode">
            <summary>
Gets the current setting of MOP Tool Data input mode: Relative or Absolute mode
</summary>
            <example> This sample shows how to call the GetToolDataInputMode() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enValue As MOPToolInputModeEnum </para><para>		enValue = objMopTool.GetToolDataInputMode() </para></example>
            <returns>An Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum enumeration</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - PARAMETER SETTING MODE SELECT PARAMETER - TOOL DATA INPUT - ABSOLUTE/RELATIVE
<para><img src="../media/MC.MOP.PARAMETER.MODESELECT.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This determines whether the threshold levels (AL.V,LIMIT,LL,UL), set in the tool data, are input as a relative value (percentage)
in reference to the reference value or as an absolute value.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetSignalDifferentAtAlarm(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
            <summary>
Gets the amount of change at the time of unusual signal alarm for the specified axis index, and MOP Tool data number.
</summary>
            <example> This sample shows how to call the GetSignalDifferentAtAlarm() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim dblValue As Double </para><para>		dblValue = objMopTool.GetSignalDifferentAtAlarm(enAxisIndex, intToolDataNo) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool Data number</param>
            <returns>A System.Double values that reppresents alarm data</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - 2/  Amount of change at the time of unusual signal alarm
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetCuttingLoadAtAlarm(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
            <summary>
Gets the Cutting load at the time the alarm occurs for the specified axis index, and MOP Tool data number.
</summary>
            <example> This sample shows how to call the GetCuttingLoadAtAlarm() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>	    Dim dblValue As Double</para><para>		dblValue = objMopTool.GetCuttingLoadAtAlarm(enAxisIndex, intToolDataNo) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">MOP Tool data number</param>
            <returns>A System.Double value that represents the cutting load.</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - 1/ Cutting load at the time of alarm generating
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetAlarm(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
            <summary>
Gets the alarm status for the given MOP Tool Data number, and axis index
</summary>
            <example> This sample shows how to call the GetAlarm() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim enValue As MOPToolDataAlarm </para><para>		enValue = objMopTool.GetAlarm(enAxisIndex, intToolDataNo) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">MOP Tool data number</param>
            <returns>An Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm enumeration that represents an alarm condition</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - ALARM
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetAutoChange(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
            <summary>
Get the Auto Change monitoring function status.
</summary>
            <example> This sample shows how to call the GetAutoChange() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim enValue As OnOffEnum </para><para>		enValue = objMopTool.GetAutoChange(enAxisIndex, intToolDataNo) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool Data number</param>
            <returns>An Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration.</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AUTO-SET CHANGE - ON/OFF
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This determines whether or not the parameters defined in Reference, AL.V, Limit, UL, LL, Max. Override, Min. Override, Air-Cut Override, Overload Moninotr, Adaptive Control, and Air-Cut Reduction function  should be changed
in the automatic setting mode.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetCuttingTime(System.Int32)">
            <summary>
Gets the cutting time for the given MOP Tool data number.
Cutting Time indicates the total time in which measured value has been higher than the
AIR-CUT LEVEL value.
</summary>
            <example> This sample shows how to call the GetCuttingTime() method.
<para>		Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim intValue As Integer </para><para>		intValue = objMopTool.GetCuttingTime(intToolDataNo) </para></example>
            <param name="intToolDataNo">MOP Tool data number</param>
            <returns>A System.Int32 value that represents the Cutting Time.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
Unit is in second.
</DataUnit>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING ENTRY TOOL LIST - CUTTING TIME
<para> Cutting time for MOP Tool data number 1 (Tool number 40-0) is 1 second.
<img src="../media/MopTool.ToolDataSettinglist.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetAirCutOverride(System.Int32)">
            <summary>
Gets the air-cut override value for the given MOP Tool data number.
This number determines the air-cut override value of the air-cut time reduction function.
</summary>
            <example> This sample shows how to call the GetAirCutOverride() method.
<para>Dim objMopTool As New CMopTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim intValue As Integer </para><para>		intValue = objMopTool.GetAirCutOverride(intToolDataNo) </para></example>
            <param name="intToolDataNo">the MOP Tool data number</param>
            <returns>A System.Int32 value that represent the percentage of override.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AIR-CUT OVERRIDE
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetMinOverride(System.Int32)">
            <summary>
Gets the minimum override value for the given MOP Tool data number.
This number determines the lower limit level of the override in the adaptive control.
</summary>
            <example> This sample shows how to call the GetMinOverride() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim intValue As Integer </para><para>		intValue = objMopTool.GetMinOverride(intToolDataNo) </para></example>
            <param name="intToolDataNo">the MOP Tool data number</param>
            <returns>A System.Int32 value that represent the percentage of override.</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - MIN. OVERRIDE
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetMaxOverride(System.Int32)">
            <summary>
Gets the maximum override value for the given MOP Tool data number.
This number determines the upper limit level of the override in the adaptive control.
</summary>
            <example> This sample shows how to call the GetMaxOverride() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim intValue As Integer </para><para>		intValue = objMopTool.GetMaxOverride(intToolDataNo) </para></example>
            <param name="intToolDataNo">the MOP Tool data number</param>
            <returns>A System.Int32 value that represent the percentage of override.</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - MAX. OVERRIDE
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetAirCutReduction(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
            <summary>
Get the Air-Cut Reduction function status.
</summary>
            <example> This sample shows how to call the GetAirCutReduction() method.
<para>Dim objMopTool As New CMopTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		intValue = objMopTool.GetAirCutReduction(enAxisIndex, intToolDataNo) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool Data number</param>
            <returns>An Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AIR-CUT REDUCT - ON/OFF
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <remarks>
This determines ON/OFF of the air-cut time reduction function. If "OFF" is set, the air-cut time
reduction function is not executed.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetAdaptiveControl(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
            <summary>
Get the adaptive monitoring function status.
</summary>
            <example> This sample shows how to call the GetAdaptiveControl() method.
<para>Dim objMopTool As CMopTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisEnum As MOPToolAxisEnum </para><para>		Dim enValue As OnOffEnum </para><para>		enValue = objMopTool.GetAdaptiveControl(enAxisEnum, intToolDataNo) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool Data number</param>
            <returns>An Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - ADAPTIVE CONTROL - ON/OFF
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <remarks>
This determines ON/OFF of the adaptive control monitoring function. If "OFF" is set, the adaptive
control function is not executed.
Note: The adaptive control uses one type of load signal for each tool data. Therefore, if the
adaptive control setting is changed from OFF to ON, the load signal having been ON is
automatically switched.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetOverloadMonitor(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
            <summary>
Get the overload monitor function status.
</summary>
            <example> This sample shows how to call the GetOverloadMonitor() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim enValue As OnOffEnum </para><para>		enValue = objMopTool.GetOverloadMonitor(enAxisIndex, intToolDataNo) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool Data number</param>
            <returns>An Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration.</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - OVERLOAD MONITOR - ON/OFF
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This determines ON/OFF of the overload monitoring function. If "OFF" is set, the overload
monitoring function is not executed.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetLLValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
            <summary>
Gets the Lower Limit value for the given MOP Tool data, axis index in relative or aboslute value.
</summary>
            <example> This sample shows how to call the GetLLValue() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim enValue As MOPToolInputModeEnum </para><para>		Dim dblValue As Double</para><para>		dblValue = objMopTool.GetLLValue(enAxisIndex, intToolDataNo, enValue) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool data number</param>
            <param name="enValue">An absolute or relative mode that AL.V value to be retrieved.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum enumeration.</param>
            <returns>A System.Double value that represents the Limit value.</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - LL - Lower level limit
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This is the lower limit level used by the adaptive control function. The setting is made in either
the measure value or percentage to the reference value.
The adaptive control function controls the feed override values so that the load signal always
lies between the upper and lower limits.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetULValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
            <summary>
Gets the Upper Limit value for the given MOP Tool data, axis index in relative or aboslute value.
</summary>
            <example> This sample shows how to call the GetULValue() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim enValue As MOPToolInputModeEnum </para><para>		Dim dblValue As Double</para><para>		dblValue = objMopTool.GetULValue(enAxisIndex, intToolDataNo, enValue) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool data number</param>
            <param name="enValue">An absolute or relative mode that AL.V value to be retrieved.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum enumeration.</param>
            <returns>A System.Double value that represents the Limit value.</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - UL - Upper limit
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This is the upper limit level used by the adaptive control function. The setting is made in either
the measure value or percentage to the reference value.
The adaptive control function controls the feed override values so that the load signal always
lies between the upper and lower limits.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetLimitValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
            <summary>
Gets the Limit value for the given MOP Tool data, axis index in relative or aboslute value.
</summary>
            <example> This sample shows how to call the GetLimitValue() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim enAxisIndex As MOPToolAxisEnum </para><para>		Dim enValue As MOPToolInputModeEnum </para><para>		Dim dblValue As Double</para><para>		dblValue = objMopTool.GetLimitValue(enAxisIndex, intToolDataNo, enValue) </para></example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool data number</param>
            <param name="enValue">An absolute or relative mode that AL.V value to be retrieved.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum enumeration.</param>
            <returns>A System.Double value that represents the Limit value.</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - LIMIT
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
This is the threshold level used by the overload monitoring function for determining the overload
status to give the overload alarm. The setting is made in either the measured value or percentage
to the reference value.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetALVValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
            <summary>
Gets the AL.V value for the given MOP Tool data, axis index in relative or aboslute value.
</summary>
            <example>
                <para>Dim objMopTool As New CMOPTool </para>
                <para>		Dim intToolDataNo As Integer </para>
                <para>		Dim enAxisIndex As MOPToolAxisEnum </para>
                <para>		Dim enValue As MOPToolInputModeEnum </para>
                <para>		Dim dblValue As Double </para>
                <para>		dblValue = objMopTool.GetALVValue(enAxisIndex, intToolDataNo, enValue) </para>
            </example>
            <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
            <param name="intToolDataNo">The MOP Tool data number</param>
            <param name="enValue">An absolute or relative mode that AL.V value to be retrieved.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum enumeration.</param>
            <returns>A System.Double value that represents the AL.V value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AL.V 
<para><img src="../media/MOPTOOL.TOOLDATASETTING.P1.jpg" /></para></Figure>
            <remarks>
This is the threshold level used by the overload monitoring function for determining the tool wear status
to give the tool wear alarm. The setting is made in percentage to the reference value; measured
value is taken as the reference value.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetToolDataNumber(System.Int32,System.Int32)">
            <summary>
Gets MOP tool data number associated with the tool number and its class number.
</summary>
            <example> This sample shows how to call the GetToolDataNumber() method.
<para>Dim objMopTool As New CMopTool </para><para>		Dim intToolDataNo As Integer </para><para>		Dim intClassNo As Integer </para><para>		Dim intValue As Integer </para><para>		intValue = objMopTool.GetToolDataNumber(intToolDataNo, intClassNo) </para></example>
            <param name="intToolNo">Tool number</param>
            <param name="intClassNo">Class number</param>
            <returns>A System.Int32 value that represents the MOP Tool data number.  It returns zero if there no MOP Tool data number for the tool and class number.</returns>
            <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING ENTRY TOOL LIST
<para> MOP Tool data number for tool number 50 and its classification 0 is 4.
<img src="../media/MopTool.ToolDataSettinglist.jpg" /></para></Figure>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The MOP Tool data number is assigned automatically at the time the tool and its associated class number is created.  
The MOP Tool data number associated with a tool number and class number can be changed when one of the MOP Tool data numbers in the table is deleted 
or a new MOP Tool data number is added to the table.
<para>
The following specifications must be met for valid tool number:
<list type="table"><listheader><term>Specification</term><description>Number of Tools</description></listheader><item><term>Tool Data Sets 999 specification</term><description>1-999</description></item><item><term>Tool Data Sets 300 specification</term><description>1-300</description></item><item><term>Tool Data Sets 200 specification</term><description>1-200</description></item><item><term>Tool Data Sets 100 specification</term><description>1-100</description></item></list></para></para>
                <para> Note: It is possible to input from 1 to 999 as tool number, but the tool data of tool number more than 300 is ignored.  Therefore, this function will
fail to obtain tool data number for any tool greater than 300 even it can be registered in the MOP Tool table.
</para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetMaxMOPToolData">
            <summary>
Gets number of MOP tool data configured for this system
</summary>
            <example> This sample shows how to call the GetMaxMOPToolData() method.
<para>Dim objMopTool As New CMOPTool </para><para>		Dim intValue As Integer </para><para>		intValue = objMopTool.GetMaxMOPToolData() </para></example>
            <returns>A System.Int32 value that represents number of MOP Tool data</returns>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CMOPTool">
            <summary>
Class provides information about MOP Tool data.
</summary>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>MOP-TOOL specification</term><description>Valid</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory.GetOperationHistory(System.Int32,System.Int32)">
            <summary>
Gets the Operation history data at the specified indexes
</summary>
            <example> This sample shows how to call the GetOperationHistory
<para> Dim objOperationHistory  As New MacMan.COperationHistory </para><para> Dim intFromIndex As Integer </para><para> Dim intToIndex As Integer </para><para> Dim arValues As ArrayList </para><para> arValues = objOperationHistory.GetOperationHistory (intFromIndex, intToIndex) </para></example>
            <param name="intFromIndex">Starting Operation history index.  The 1-based index at which the information is obtained</param>
            <param name="intToIndex">Ending Operation history index.  The 1-based index at which the information is obtained</param>
            <returns>A System.Collection.ArrayList object represents the Operation history data at the specified indexes.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> OPERATION HISTORY: OPERATE PANEL
<para><img src="../media/MacMan-OperationHistory.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory.GetOperationHistory(System.Int32)">
            <overloads>GetOperationHistory has 2 overload methods</overloads>
            <summary>
Gets the Operation history data at the specified index
</summary>
            <example> This sample shows how to call the GetOperationHistory method.
<para>Dim objOperationHistory As New MacMan.COperationHistory </para><para>Dim objOperation As MacMan.COperation()	</para><para>Dim intIndex As Int32	</para><para>objOperation = objOperationHistory.GetOperationHistory(intIndex)	</para></example>
            <param name="intIndex">Operation history index to be retreived</param>
            <returns>An Okuma.CMDATAPI.DataAPI.COperation object represents the Operation history data at the specified index.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> OPERATION HISTORY: OPERATE PANEL
<para><img src="../media/MacMan-OperationHistory.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory.GetCount">
            <summary>
Gets the maximum number of Operation History that can be stored by the system
</summary>
            <example> This sample shows how to call the GetCount method.
<para> Dim objOperationHistory  As New MacMan.COperationHistory </para><para> Dim intValue As Integer </para><para> intValue = objOperationHistory.GetCount </para></example>
            <returns>A System.Int32 value represents the maximum number of Operation History that can be stored by the system.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory.GetMaxCount">
            <summary>
Gets the maximum number of Operation History that can be stored by the system.
</summary>
            <example> This sample shows how to call the GetMaxCount method.
<para> Dim objOperationHistory  As New MacMan.COperationHistory </para><para> Dim intValue As Integer </para><para> intValue = objOperationHistory.GetMaxCount </para></example>
            <returns>A System.Int32 value represents the maximum number of operation histories that can be stored by the system.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory.GetOperationData(System.Int32,System.Int32)">
            <summary>
N/A
</summary>
            <example> This sample shows how to call the GetOperationData method.
</example>
            <param name="intIndex"> Integer Index Value.</param>
            <param name="intErrorCode"> Error Code Number.</param>
            <returns>A System.String value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory.GetOperationTime(System.Int32,System.Int32)">
            <summary>
N/A
</summary>
            <example> This sample shows how to call the GetOperationTime method.
</example>
            <param name="intIndex"> Integer Index Value.</param>
            <param name="intErrorCode"> Error Code Number.</param>
            <returns>A System.String value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory.GetOperationDate(System.Int32,System.Int32)">
            <summary>
N/A
</summary>
            <example> This sample shows how to call the GetOperationDate method.
</example>
            <param name="intIndex"> Integer Index Value.</param>
            <param name="intErrorCode"> Error Code Number.</param>
            <returns>A System.String value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory.ValidateIndex(System.Int32,System.String,System.Int32)">
            <summary>
N/A
</summary>
            <example> This sample shows how to call the ValidateIndex method.
</example>
            <param name="intValue"> Integer Value.</param>
            <param name="strErrorSource"> Error Sourcr String.</param>
            <param name="intErrorCode"> Error Code Number.</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory">
            <summary>
Class provides operation history information stored by NC.
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.COperation.Data">
            <summary>
The operation history data
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.COperation.Time">
            <summary>
The operation history Time. It is in "hh:mm:ss" format
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.COperation.Date">
            <summary>
The operation history Date. It is in "yyyy/mm/dd" format
</summary>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.COperation">
            <summary>
Class represents particular operation history information.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.AddOptionCommonVariableValue(System.Int32,System.Double)">
            <summary>
Sets Option common variable value by adding the input value to the existing data at the specified index
</summary>
            <example> This sample shows how to call the AddOptionCommonVariableValue() method.
<para>Dim objVariables As New CVariables </para><para>Dim intIndex As Integer</para><para>Dim dblValue As Double</para><para>      objVariables.AddOptionCommonVariableValue(intIndex, dblValue) </para></example>
            <param name="intIndex">Option Common variable index.  The 1-based index at which the Option Common variable information is obtained</param>
            <param name="dblValue">Option Common variable Value to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - OPTION COMMON VARIABLES - List of option common variables
<para><img src="../media/MC.P300.Parameters.OptionCommonVariables.jpg" /></para></Figure>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Option Common Variable (200 sets) NC-B-Spec[3,6]</term><description>Valid</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.SetOptionCommonVariableValue(System.Int32,System.Double)">
            <summary>
Sets Option common variable value at the specified index
</summary>
            <example> This sample shows how to call the SetOptionCommonVariableValue() method.
<para>Dim objVariables As New CVariables </para><para>Dim intIndex As Integer </para><para>Dim dlbValue As Double </para><para>		objVariables.SetOptionCommonVariableValue(intIndex, dlbValue) </para></example>
            <param name="intIndex">Option Common variable index.  The 1-based index at which the Option Common variable information is obtained</param>
            <param name="dblValue">Option Common variable Value to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - OPTION COMMON VARIABLES - List of option common variables
<para><img src="../media/MC.P300.Parameters.OptionCommonVariables.jpg" /></para></Figure>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Option Common Variable (200 sets) NC-B-Spec[3,6]</term><description>Valid</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.AddCommonVariableValue(System.Int32,System.Double)">
            <summary>
Sets the common variable value by adding the input value to the existing data at the specified index
</summary>
            <example> This sample shows how to call the AddCommonVariableValue() method.
<para>Dim objVariables As New CVariables </para><para>Dim intIndex As Integer </para><para>Dim dblValue As Double </para><para>      objVariables.AddCommonVariableValue(intIndex, dblValue) </para></example>
            <param name="intIndex">Common variable index.  The 1-based index at which the Common variable information is obtained</param>
            <param name="dblValue">Common variable Value to be added</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> COMMON VARIABLES - List of common variables
<para><img src="../media/Parameters.CommonVariables.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.SetCommonVariableValue(System.Int32,System.Double)">
            <summary>
Sets common variable value at the specified index
</summary>
            <example> This sample shows how to call the SetCommonVariableValue() method.
<para>Dim objVariables As New CVariables </para><para>Dim intIndex As Integer = 10</para><para>Dim dblValue As Double = 1.2345</para><para>objVariables.SetCommonVariableValue(intIndex, dblValue) </para></example>
            <param name="intIndex">Common variable index.  The 1-based index at which the Common variable information is obtained</param>
            <param name="dblValue">Common variable Value to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> COMMON VARIABLES - List of common variables
<para><img src="../media/Parameters.CommonVariables.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.GetOptionCommonVariableCount">
            <summary>
Get the option common variable count configured for this system.  Option Common Variable (200 sets) NC-B-Spec[3,6]
</summary>
            <example> This sample shows how to call the GetOptionCommonVariableCount() method.
<para>Dim objVariables As new Variables </para><para>Dim intValue As Integer</para><para> intValue = objVariables.GetOptionCommonVariableCount </para></example>
            <returns>A System.Int32 value represents the total number of Option common variables are available in the system.  It returns zero if system does not support Option Common Variables</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.GetOptionCommonVariableValue(System.Int32)">
            <summary>
Gets Option common variable value at the specified index.
</summary>
            <example> This sample shows how to call the GetOptionCommonVariableValue() method.
<para>Dim objVariables As New CVariables </para><para>Dim dblValue As Double</para><para>Dim intIndex As Integer</para><para> dblValue = objVariables.GetOptionCommonVariableValue(intIndex) </para></example>
            <param name="intIndex">Option Common variable index.  The 1-based index at which the Common variable information is obtained</param>
            <returns>A System.Double value represents the Option common variable value at the specified index. </returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - OPTION COMMON VARIABLES - List of option common variables
<para><img src="../media/MC.P300.Parameters.OptionCommonVariables.jpg" /></para></Figure>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Option Common Variable (200 sets) NC-B-Spec[3,6]</term><description>Valid</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.GetOptionCommonVariableValues(System.Int32,System.Int32)">
            <summary>
Gets Option Common variable values at the specified indexes.
</summary>
            <example> This sample shows how to call the GetOptionCommonVariableValues() method.
<para>Dim arValues As Double() </para><para>Dim intFromIndex As Integer = 1 </para><para>Dim intToIndex As Integer = 10 </para><para>    arValues = objVariables.GetOptionCommonVariableValues(intFromIndex,intToIndex) </para></example>
            <param name="intFromIndex">Starting index.  The 1-based index at which the Option Common variable information is obtained</param>
            <param name="intToIndex">Ending index.  The 1-based index at which the Option Common variable information is obtained</param>
            <returns>An array of System.Double represents the Option Common variable values at the specified indexes.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - OPTION COMMON VARIABLES - List of option common variables
<para><img src="../media/MC.P300.Parameters.OptionCommonVariables.jpg" /></para></Figure>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Option Common Variable (200 sets) NC-B-Spec[3,6]</term><description>Valid</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.GetCommonVariableValue(System.Int32)">
[enter]<summary>
Gets the common variable value at the specified index.
</summary><example> This sample shows how to call the GetCommonVariableValue() method.
<para>Dim objVariables As New CVariables </para><para>Dim intIndex As Integer </para><para>Dim dblValue As Double </para><para>dblValue = objVariables.GetCommonVariableValue(intIndex) </para></example><param name="intIndex">Common variable index.  The 1-based index at which the Common variable information is obtained</param><returns>A System.Double value represents the common variable value at the specified index.</returns><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> COMMON VARAIBLES - List of all common variables.
<para><img src="../media/Parameters.CommonVariables.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.GetCommonVariableValues(System.Int32,System.Int32)">
            <summary>
Gets the Common variable values at the specified indexes.
</summary>
            <example> This sample shows how to call the GetCommonVariableValues() method.
<para>Dim objVariables As New CVariables </para><para>Dim intFromIndex As Integer </para><para>Dim intToIndex As Integer </para><para>Dim dblValues() As Double </para><para>dblValue() = objVariables.GetCommonVariableValue(intFromIndex, intToIndex) </para></example>
            <param name="intFromIndex">Starting index.  The 1-based index at which the Common variable information is obtained</param>
            <param name="intToIndex">Ending index.  The 1-based index at which the Common variable information is obtained</param>
            <returns>An array of System.Double represents the Common variable values at the specified indexes.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> COMMON VARAIBLES - List of all common variables.
<para><img src="../media/Parameters.CommonVariables.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.GetCommonVariableCount">
            <summary>
Get the common variable count configured for this system. it can be configured up to 2000 common variables if 2000 Common Variables option NC spec [3,3] is ON.
</summary>
            <example> This sample shows how to call the GetCommonVariableCount() method.
<para>Dim objVariables As New CVariables </para><para>Dim intCount As Integer</para><para>intCount = objVariables.GetCommonVariableCount </para></example>
            <returns>A System.Int32 value that represents the total number of common variables are available in the system.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <figure />
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CVariables">
            <summary>
Class provides Variables information.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.AddStartPositionInNDirection(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
            <summary>
Sets the starting position of pitch error compesation in Negative direction by adding the input data to the existing data.
</summary>
            <example> This sample code shows how to call the AddStartPositionInNDirection() method.
<para> Dim enAxisIndex As AxisIndexEnum </para><para> Dim objBallScrew As New CBallScrew </para><para> Dim dblValue As Double </para><para> objBallScrew.AddStartPositionInNDirection(enAxisIndex, dblValue) </para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <param name="dblValue">Value to be added to</param>
            <DataUnit>
                <para>
The unit depends on axis type:  
</para>
                <list type="table">
                    <listheader>
                        <term>Axis type</term>
                        <description>Unit</description>
                    </listheader>
                    <item>
                        <term>Linear axis</term>
                        <description>By default, unit is in millimeter.  Other units can be set by calling SetDataUnit.</description>
                    </item>
                    <item>
                        <term>Rotary axis</term>
                        <description>Degree</description>
                    </item>
                </list>
            </DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - N PITCH ERROR COMP - Starting position of PEC in negative direction
<para><img src="../media/MC.PEC.SETTING.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.SetStartPositionInNDirection(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
            <summary>
Sets the starting position of pitch error compesation in Negative direction.
</summary>
            <example> This sample code shows how to call the SetStartPositionInNDirection() method.
<para> Dim objBallScrew As New CBallScrew </para><para> Dim enAxisIndex As AxisIndexEnum </para><para> Dim dblValue As Double </para><para> objBallScrew.SetStartPositionInNDirection(enAxisIndex, dblValue)</para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <param name="dblValue"> value to be added to</param>
            <DataUnit>
                <para>
The unit depends on axis type:  
</para>
                <list type="table">
                    <listheader>
                        <term>Axis type</term>
                        <description>Unit</description>
                    </listheader>
                    <item>
                        <term>Linear axis</term>
                        <description>By default, unit is in millimeter.  Other units can be set by calling SetDataUnit.</description>
                    </item>
                    <item>
                        <term>Rotary axis</term>
                        <description>Degree</description>
                    </item>
                </list>
            </DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - N PITCH ERROR COMP - Starting position of PEC in negative direction
<para><img src="../media/MC.PEC.SETTING.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.AddInterval(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Int32)">
            <summary>
Set the pitch error compensation interval data by adding the input value to the existing data at the specified axis index.
</summary>
            <example> This sample code shows how to call the AddInterval() method.
<para>	Dim objBallScrew As New CBallScrew</para><para>	Dim enAxisIndex As AxisIndexEnum	</para><para>	Dim intValue As Integer	</para><para>	   objBallScrew.AddInterval(enAxisIndex, intValue)	</para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <param name="intValue">Interval value to be added to</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - PITCH COMP SPAN - PEC Interval
<para><img src="../media/MC.PEC.SETTING.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.SetInterval(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Int32)">
            <summary>
Sets the pitch error compensation interval where ball screw pitch errors are compensated for.
</summary>
            <example> This sample code shows how to call the SetInterval() method.
<para> Dim objBallScrew As New CBallScrew </para><para> Dim enAxisIndex As AxisIndexEnum </para><para> Dim intValue As Integer</para><para> objBallScrew.SetInterval(enAxisIndex, intValue) </para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <param name="intValue">Interval value to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - PITCH COMP SPAN - PEC interval
<para><img src="../media/MC.PEC.SETTING.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.AddDataPoint(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Int32)">
            <summary>
Set the pitch error compensation data by adding the input value to the existing data at the specified point, and the axis index.
</summary>
            <example> This sample code shows how to call the AddDataPoint() method.
<para>	Dim objBallScrew As New CBallScrew</para><para>	Dim enAxisIndex As AxisIndexEnum	</para><para>	Dim intPECPoint As Integer	</para><para>	Dim intValue As Integer	</para><para>	objBallScrew.AddDataPoint(intPECPoint, enAxisIndex, intValue)	</para></example>
            <param name="intPECPoint">Pitch Error Compensation data point</param>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <param name="intValue">Pitch Error Compensation data to be added</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <Figure> PARAMETER - PITCH ERROR COMPENSATION - PEC Data points for X, Y, Z, and B axis
<para><img src="../media/MC.PEC.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.SetDataPoint(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Int32)">
            <summary>
Sets the pitch error compensation data at the specified point, and the axis index.
</summary>
            <example> This sample code shows how to call the SetDataPoint() method.
<para>	Dim objBallScrew As New CBallScrew</para><para>	Dim enAxisIndex As AxisIndexEnum	</para><para>	Dim intPECPoint As Integer	</para><para>	Dim intValue As Integer	</para><para>	   objBallScrew.SetDataPoint(intPECPoint, enAxisIndex, intValue)	</para></example>
            <param name="intPECPoint">Pitch Error Compensation data point</param>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <param name="intValue">Pitch Error Compensation data to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <Figure> PARAMETER - PITCH ERROR COMPENSATION - PEC Data points for X, Y, Z, and B axis
<para><img src="../media/MC.PEC.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.AddMaxPitchPoints(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Int32)">
            <summary>
Sets the maximum pitch points by adding the input value to the existing data at the specified axis index.
</summary>
            <example> This sample code shows how to call the AddMaxPitchPoints() method.
<para>	Dim objBallScrew As New CBallScrew</para><para>	Dim enAxisIndex As AxisIndexEnum	</para><para>	Dim intValue As Integer	</para><para>	objBallScrew.AddMaxPitchPoints(enAxisIndex, intValue) </para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <param name="intValue">pitch points value to be added to the current system</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - PITCH POINT - Current setting of number of pitch points
<para><img src="../media/MC.PEC.SETTING.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.SetMaxPitchPoints(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Int32)">
            <summary>
Sets the total number of points where pitch error compensation data are set for the individual axis.
</summary>
            <example> This sample code shows how to call the SetMaxPitchPoints() method.
<para> Dim objBallScrew As New CBallScrew </para><para> Dim enAxisIndex As AxisIndexEnum </para><para> Dim intValue As Integer</para><para>	objBallScrew.SetMaxPitchPoints(enAxisIndex, intValue) </para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <param name="intValue">Max pitch points value to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - PITCH POINT - Current setting of number of pitch points
<para><img src="../media/MC.PEC.SETTING.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.SetDataUnit(Okuma.CMDATAPI.Enumerations.DataUnitEnum)">
            <summary>
Sets current data unit for this class instance.
</summary>
            <example> This sample code shows how to call the SetDataUnit() method.
<para> Dim objBallScrew As New CBallScrew </para><para> Dim enDataUnit As DataUnitEnum = DataUnitEnum.Unit_Inch </para><para>	objBallScrew.SetDataUnit(enDataUnit) </para></example>
            <param name="enDataUnit">Data Unit to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
If applicable, this setting is applied to data in this class instance only, not for NC Data Unit.
For linear axis position, data unit can be either mm or inch.  
For circular (rotary) axis position, data unit is in degree only.
For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, 
then NC data will be converted to inch and vice versa.
</remarks>
            <Figure> PARAMETER - NC OPTIONA PARAMETER - INPUT UNIT SYSTEM - DATA SET UNI - Data Unit in mm or inch.  This is for NC Data only. 
<para><img src="../media/ParametersScreen.DataUnit.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.GetStartPositionInNDirection(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets the starting position of pitch error compensation in negative direction.
</summary>
            <example> This sample code shows how to call the GetStartPositionInNDirection() method.
<para> Dim objBallScrew As New CBallScrew </para><para> Dim enAxisIndex As AxisIndexEnum </para><para> Dim intValue As Integer</para><para> intValue = objBallScrew.GetStartPositionInNDirection(enAxisIndex) </para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>A System.Double value that represents the starting position</returns>
            <DataUnit>
                <para>
The unit depends on axis type:  
</para>
                <list type="table">
                    <listheader>
                        <term>Axis type</term>
                        <description>Unit</description>
                    </listheader>
                    <item>
                        <term>Linear axis</term>
                        <description>By default, unit is in millimeter.  Other units can be set by calling SetDataUnit.</description>
                    </item>
                    <item>
                        <term>Rotary axis</term>
                        <description>Degree</description>
                    </item>
                </list>
            </DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
            <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET -  N PITCH ERROR COMP - Starting position of PEC in negative direction
<para><img src="../media/MC.PEC.SETTING.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.GetInterval(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets the interval where ball screw pitch errors are compensated at the specified axis index.
</summary>
            <example> This sample code shows how to call the GetInterval() method.
<para> Dim objBallScrew As New CBallScrew </para><para> Dim enAxisIndex As AxisIndexEnum </para><para> Dim intValue As Integer</para><para> intValue = objBallScrew.GetInterval(enAxisIndex) </para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>A System.Int32 value that represents the ball screw interval</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - PTICH COMP SPAN - PEC Interval
<para><img src="../media/MC.PEC.SETTING.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.GetDataPoint(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets the pitch error compensation data at the specified point, and the axis index.
</summary>
            <example> This sample code shows how to call the GetDataPoint() method.
<para>	Dim objBallScrew As New CBallScrew</para><para>	Dim enAxisIndex As AxisIndexEnum	</para><para>	Dim intPECPoint  As Integer	</para><para>	Dim intValue As Integer	</para><para>  intValue = objBallScrew.GetDataPoint(intPECPoint , enAxisIndex) </para></example>
            <param name="intPECPoint">Pitch Error Compensation data point</param>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>A System.Int32 that represents PEC data.</returns>
            <Figure> PARAMETER - PITCH ERROR COMPENSATION - PEC Data points for X, Y, Z, and B axis
<para><img src="../media/MC.PEC.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.GetMaxPitchPoints(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets the total number of points where pitch error compensation data are set for the individual axis. 
</summary>
            <example> This sample code shows how to call the GetMaxPitchPoints() method.
<para>	Dim objBallScrew As New CBallScrew</para><para>	Dim enAxisIndex As AxisIndexEnum	</para><para>	Dim intValue As Integer	</para><para>	intValue = objBallScrew.GetMaxPitchPoints(enAxisIndex) </para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>A System.Int32 that represent the max setting pitch points.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - PITCH POINT - Current setting of number of pitch points
<para><img src="../media/MC.PEC.SETTING.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.ValidatePECData(System.Int32,System.String,System.Int32)">
            <summary>NA</summary>
            <example> This sample code shows how to call the ValidatePECData() method.
</example>
            <param name="intValue">Integer Value.</param>
            <param name="strSource">Source String</param>
            <param name="intErrorCode">Error Code Number</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CBallScrew">
            <summary>
Class provides functions to compensate for pitch error in ball screws to improve positioning accuracy.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.SetATCPanelOperationMode(Okuma.CMDATAPI.Enumerations.ATCSubPanelOperationModeEnum)">
            <summary>
Sets ATC sub panel operation mode. 
</summary>
            <example> This sample code shows how to call the SetATCPanelOperationMode() method.
<para> Dim objATC As new CATC </para><para> Dim enValue As ATCSubPanelOperationModeEnum = ATCSubPanelOperationModeEnum.Write </para><para>	objAtc.SetATCPanelOperationMode(enValue) </para></example>
            <param name="enValue">operation mode to be set on ATC sub panel</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
                    <para>ATC sub panel's screen cannot be operated by operator if operation mode is in ATCSubPanelOperationModeEnum.Write mode.</para>
                    <para>Note: Operation mode will be retained after power cycle.</para>
                    <para>This function currently requires B-spec software</para>
                </para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.SetHeavyToolMemo(System.String)">
            <summary>
Sets heavy tool memo.
</summary>
            <example> This sample code shows how to call the SetHeavyToolMemo() method.
<para> Dim objAtc As new CATC </para><para> Dim strMemo As String = ""</para><para>	objAtc.SetHeavyToolMemo(strMemo) </para></example>
            <param name="strValue">The memo to be set for the the heavy tool attribute.  A NotSupportedException is throw if the number of characters for the memo is greater than 10.</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> SET - HEAVY TOOL - Heavy tool's memo.
<para><img src="../media/MC.ATC.SET.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.SetLargeToolMemo(System.String)">
            <summary>
Sets large tool memo.
</summary>
            <example> This sample code shows how to call the SetLargeToolMemo() method.
<para> Dim objAtc As new CATC </para><para> Dim strMemo As String = ""</para><para>	objAtc.SetLargeToolMemo(strMemo) </para></example>
            <param name="strValue">The memo to be set for the the large tool attribute.  A NotSupportedException is throw if the number of characters for the memo is greater than 10.</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> SET - LARGE-DIA. TOOL - Large diameter tool memo.
<para><img src="../media/MC.ATC.SET.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetPalletID">
            <summary>
Gets the current pallet ID number
<para>
Note: It is only applicable to Pallet system that is controlled by OSP system.  Pallet system designed by other cannot be supported such as FMS Pallet system.
</para></summary>
            <example> This sample code shows how to call the GetPalletID() method.
<code language="vbnet">
Dim objATC As New CATC 
Dim intPalletID As Integer 
intPalletID = objAtc.GetPalletID() 
</code></example>
            <returns>A System.Integer that represents the current pallet ID number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
One of the following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>PLC1 Spec code [10,2] = ON or PLC1 Spec code [10,3] = ON or PLC1 Spec code [10,4] = ON</term><description>Valid</description></item><item><term>MA-H PPC specification (NC spec code [5, 3]) = ON or Double-columnPPC (NC spec code [13, 5]) = ON or MX-H PPC (NC spec code [12, 0]) = ON</term><description>Valid</description></item></list></para>
            </remarks>
            <Figure>
                <para>M/C1 MAC-INT. - P</para>
                <img src="../media/MC.PalletID.jpg" />
            </Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetATCPanelOperationMode">
            <summary>
Gets ATC panel operation mode.
<para>
The ATC sub-control panel can be in read or write operation mode. 
</para></summary>
            <example> This sample code shows how to call the GetATCPanelOperation() method.
<para> Dim objAtc As new CATC </para><para> Dim enValue As ATCSubPanelOperationEnum </para><para>	enValue = objAtc.GetATCPanelOperation() </para></example>
            <returns>An ATCSubPanelOperationEnum represents the modes of operation on ATC sub panel</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
                    <para>ATC sub panel's screen cannot be operated by operator if operation mode is in ATCSubPanelOperationModeEnum.Write mode.</para>
                    <para>Note: Operation mode will be retained after power cycle.</para>
                    <para>This function currently requires B-spec software</para>
                </para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetATCPanelToolNo">
            <summary>
Gets Tool Pot number displayed on ATC sub panel.  This information is normally displayed when an operator inputs tool number.
if the input tool number is valid the tool data will be displayed in the TOOL POT No. field
<para>
The ATC sub-control panel tool number is a three-digit numeric character string ("000" to "999"). 
When the tool number is invalid, it becomes a three-digit space.
</para></summary>
            <example> This sample code shows how to call the GetATCPanelToolNo() method.
<para> Dim objAtc As new CATC </para><para> Dim intValue As Integer </para><para>	intValue = objAtc.GetATCPanelToolNo() </para></example>
            <returns>A System.Int32 represents the tool number displayed on ATC sub panel</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> ATC Sub panel - TOOL POT No.
<para> Using Tool No Select </para><para>
If tool 110011 is entered into system and tool data is valid then tool information is populated in the 
<para>Pot No. Tool No./Tool Name field as 011 00000011-0011</para><para> TOOL POT No. field as 011</para></para><img src="../media/MC.ATCPanel.ToolPot.ToolNoSelect.jpg" /><para> Using Tool Name Select </para>
If a tool, named ABC, is entered into system and tool data is valid then tool information is populated in the 
Pot No. Tool No./Tool Name field and TOOL POT No. field, accordingly.
<para><img src="../media/MC.ATCPanel.ToolPot.ToolNameSelect-2.jpg" /></para></Figure>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>ATC Sub panel NC spec [6,1]</term><description>Valid</description></item></list></para>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetATCPanelPotNo">
            <summary>
Gets Pot number displayed on ATC sub panel.  This information is normally displayed when an operator inputs tool number.
if the input tool number is valid the tool data will be displayed in the Pot No. Tool No./Tool Name field.
<para>
The ATC sub-control panel pot number is a three-digit numeric character string ("000" to "999"). 
When the pot number is invalid, it becomes a three-digit space.
</para></summary>
            <example> This sample code shows how to call the GetATCPanelPotNo() method.
<para> Dim objAtc As new CATC </para><para> Dim intValue As Integer </para><para>	intValue = objAtc.GetATCPanelPotNo() </para></example>
            <returns>A System.Int32 represents the pot number displayed on ATC sub panel</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> ATC Sub panel - Pot No
<para> Using Tool No Select </para><para>
If tool 110011 is entered into system and tool data is valid then tool information is populated in the 
<para>Pot No. Tool No./Tool Name field as 011 00000011-0011</para><para> TOOL POT No. field as 011</para></para><img src="../media/MC.ATCPanel.ToolPot.ToolNoSelect.jpg" /><para> Using Tool Name Select </para>
If a tool, named ABC, is entered into system and tool data is valid then tool information is populated in the 
Pot No. Tool No./Tool Name field and TOOL POT No. field, accordingly.
<para><img src="../media/MC.ATCPanel.ToolPot.ToolNameSelect-2.jpg" /></para></Figure>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>ATC Sub panel NC spec [6,1]</term><description>Valid</description></item></list></para>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetATCPanelErrorCode">
            <summary>
Gets ATC panel error number
</summary>
            <example> This sample code shows how to call the GetATCPanelErrorCode() method.
<para> Dim objAtc As new CATC </para><para> Dim intValue As Integer </para><para>	intValue = objAtc.GetATCPanelErrorCode() </para></example>
            <returns>A System.Int32 represents the error code displayed on ATC sub panel</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> ATC Sub panel - ERROR
<para><img src="../media/MC.ATCPanel.ToolPot.ToolNoSelect.jpg" /></para></Figure>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>ATC Sub panel NC spec [6,1]</term><description>Valid</description></item></list></para>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetATCSequence">
            <summary>
Gets ATC sequence number
</summary>
            <example> This sample code shows how to call the GetATCSequence() method.
<para> Dim objAtc As new CATC </para><para> Dim intValue As Integer </para><para>	intValue = objAtc.GetATCSequence() </para></example>
            <returns>A System.Int32 represents the ATC sequence number</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> ATC FUNCTION - ATC SEQ NO.
<para><img src="../media/ATCOperation.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetReturnPotNo">
            <summary>
Gets return tool pot number for ATC Random.
</summary>
            <example> This sample code shows how to call the GetReturnPotNo() method.
<para> Dim objAtc As new CATC </para><para> Dim strPot As String  </para><para>	strPot = objAtc.GetReturnPotNo() </para></example>
            <returns>A System.String value that represents the information about the return pot number</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Random ATC Specification </term><description>Valid</description></item></list></para>
            </remarks>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>Yes</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M</term><description>Yes</description></item><item><term>P300S</term><description>Yes</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - POT NO./TOOL NO. TABLE (ATC RANDOM ADDRESS) - POT NO.
<para><img src="../media/MC.ATC.RANDOM_ADDRESS.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetLargeToolMemo">
            <summary>
Gets large tool memo for a given tool number.
</summary>
            <example> This sample code shows how to call the GetLargeToolMemo() method.
<para> Dim objAtc As new CATC </para><para> Dim strToolMemo As String </para><para> strToolMemo = objAtc.GetLargeToolMemo() </para></example>
            <returns>A System.String value that represents the information about large tool</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - POT NO./TOOL NO. TABLE (FIXED ADDRESS) - SET - LARGE-DIA. TOOL - Large is tool memo.
<para><img src="../media/MC.ATC.SET.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetHeavyToolMemo">
            <summary>
Gets the heavy tool memo for the specified tool.
</summary>
            <example> This sample code shows how to call the GetHeavyToolMemo() method.
<para> Dim objAtc As new CATC </para><para> Dim strToolMemo As String </para><para> strToolMemo = objAtc.GetHeavyToolMemo() </para></example>
            <returns>A System.String value that represents the information about heavy tool</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - POT NO./TOOL NO. TABLE (FIXED ADDRESS) - SET - HEAVY TOOL - Heavy is tool memo
<para><img src="../media/MC.ATC.SET.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetReturnTool">
            <summary>
Gets the return tool number in ATC fixed address system.
</summary>
            <example> This sample code shows how to call the GetReturnTool() method.
<para> Dim objAtc As new CATC </para><para> Dim strTool As String </para><para> strTool = objAtc.GetReturnTool </para></example>
            <returns>A System.String value that represents the tool number to be returned.  Otherwise, a string of 'NON' is returned.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Random ATC Specification</term><description>Invalid</description></item></list></para>
            </remarks>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>Yes</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M</term><description>No</description></item><item><term>P300S</term><description>No</description></item></list></para>
            </remarks>
            <Figure> POT NO./TOOL NO. TABLE - RET TOOL - Tool to be return in the spindle.
<para><img src="../media/atc.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetNextTool">
            <summary>
Gets the tool number that is in loading/unloading position with spindle
</summary>
            <example> This sample code shows how to call the GetNextTool() method.
<para> Dim objAtc As new CATC </para><para> Dim strValue As String </para><para> strValue = objAtc.GetNextTool() </para></example>
            <returns>A System.String value that represents a tool number.  If no tool, a string of 'NONE' will be returned.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> POT NO./TOOL NO. TABLE - NXT TOOL - Next tool to be mounted in the spindle.
<para><img src="../media/atc.jpg" /></para></Figure>
            <Figure> For OSP-P300 controls:
<para> TOOL DATA - MAGAZINE INFO. - NXT T-NO.</para><img src="../media/MC.P300.ToolData.ATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetActualTool">
            <summary>
Gets tool that is currently mounted in the spindle.  Tool information includes tool number and tool attribute if any.
<para>For 8 Digits Tool ID spec. with Random ATC type: it returns the value of Tc as tool number instead of TF value as displayed in ATC operation NC-HMI screen</para><para>For 8 Digits Tool ID spec. with Fixed ATC type: it returns the value of Tc as pot number instead of TF value as displayed in ATC operation NC-HMI screen</para></summary>
            <example> This sample code shows how to call the GetActualTool() method.
<para> Dim objAtc As new CATC </para><para> Dim strValue As String </para><para> strValue = objAtc.GetActualTool() </para></example>
            <returns>A System.String that represents a tool number currently in the spindle.  If no tool in the spindle, 'NONE' will be returned.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> POT NO./TOOL NO. TABLE - ATC TOOL - 001LM - Current tool in the spindle is tool #1 with an attribute LM.
<para><img src="../media/atc.jpg" /></para></Figure>
            <Figure> For OSP-P300 controls:
<para>TOOL DATA - MAGAZINE INFO. - ACT T-NO</para><img src="../media/MC.P300.ToolData.ATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetPotTool(System.Int32)">
            <summary>
Gets pot tool information based on pot number.
</summary>
            <example> This sample code shows how to call the GetPotTool() method.
<code escaped="true" language="vbnet">
 Dim objAtc As New CATC 
 Dim stToolProperty As ToolProperty 
 Dim intPotNo as Integer 
 Dim intToolNo as Integer 
 Dim strToolKind As String
 stToolProperty = objAtc.GetPotTool(intPotNo) 
 intToolNo = stToolProperty.intToolNo 
 strToolKind = stToolProperty.strToolKind 
</code></example>
            <param name="intPotNo">The 1-based pot number to retrieve the pot tool information.</param>
            <returns>An Okuma.CMDATAPI.Structures.ToolProperty value</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> For OSP-P300 controls:
<para> TOOL DATA - MAGAZINE INFO.</para><img src="../media/MC.P300.ToolData.ATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetMagazinePosition(System.Int32)">
            <summary>
Gets currently indexed pot number at the specified magazine number.
</summary>
            <example> This sample shows how to call the GetMagazinePosition() method.
<para> Dim objAtc As new CATC </para><para> Dim intMagazineNo As Integer </para><para> Dim intPosition As Integer </para><para>  intPosition = objAtc.GetMagazinePosition(intMagazineNo) </para></example>
            <param name="intMagazineNo">The 1-based magazine number.</param>
            <returns>An System.Int32 value that represents the indexed pot number at the specified magazine number.  
For multi-magazine,  a different indexed pot number is returned, respectively.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
The following specifications must be met in order to function if magazine number is greater than 1:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Multi-Magazine specification</term><description>Valid</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetMaxPots">
            <summary>
Gets maximum number of pots configured for this system
</summary>
            <example> This sample shows how to call the GetMaxPots() method.
<para>	Dim objAtc As new CATC	</para><para>	Dim maxPots As Int32	</para><para>	maxPots = objAtc.GetMaxPots	</para></example>
            <returns>A System.Int32 value that represents the number of pots currently configured for this system</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetMaxMagazines">
            <summary>
Gets maximum number of magazines configured for this system.  
</summary>
            <example> This sample shows how to call the GetMaxMagazines() method.
<code escaped="true" language="vbnet">
 Dim objAtc As new CATC 
 Dim maxMagazines As Int32 
 maxMagazines = objAtc.GetMaxMagazines 
</code></example>
            <returns>A System.Int32 value that represents total magazines currently configured for this system.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetATCType">
            <summary>
Gets ATC type configured for this system
</summary>
            <example> This sample shows how to call the GetATCType() method.
<para> Dim objAtc As new CATC </para><para> Dim enATCType As ATCTypeEnum </para><para> enATCType = objAtc.GetATCType </para></example>
            <returns>An Okuma.CMDATAPI.Enumerations.ATCTypeEnum enumeration type that represents ATC type currently configured for this system</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetMagazineType">
            <summary>
Gets magazine type configured by the system.
</summary>
            <example> This sample shows how to call the GetMagazineType() method.
<code escaped="true" language="vbnet">
Dim atcType As ATCTypeEnum 
Dim maxMagazines As Int32 
Dim heavyToolMemo As Double 
Dim largeToolMemo As Double 
Dim magazineType As MagazineTypeEnum 
Dim maxPots As Int32 
Dim retTool As String 
Dim actTool As String 
Dim nextTool As String 
atcType = objAtc.GetATCType 
magazineType = objAtc.GetMagazineType 
maxPots = objAtc.GetMaxPots 
retTool = objAtc.GetReturnTool 
actTool = objAtc.GetActualTool 
nextTool = objAtc.GetNextTool 
</code></example>
            <returns>A Okuma.CMDATAPI.Enumerations.MagazineTypeEnum enumeration that represents the magazine type currently configured for the system</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetMagazineProperty(System.Int32)">
            <summary>
Gets magazine information at specified magazine number.
</summary>
            <example> This sample shows how to call the GetMagazineProperty() method.
<para> Dim objAtc As new CATC </para><para> Dim intMagazineNo As Integer </para><para> Dim intNumberOfPots As Integer </para><para> Dim intStartingPot As Integer </para><para> Dim intEndingPot As Integer </para><para> Dim magProp As MagazineProperty </para><para> magProp = objAtc.GetMagazineProperty(intMagazineNo) </para><para> intNumberOfPots = magProp.PotPerMagazine </para><para> intStartingPot = magProp.StartingPotNumber </para><para> intEndingPot = magProp.EndingPotNumber </para></example>
            <param name="intMagazineNo">The 1-based magazine number.</param>
            <returns>
A Okuma.CMDATAPI.Structures.MagazineProperty structure which contains number of pots, and the starting and ending pot number for this magazine number.
</returns>
            <remarks>
For multi-magazine system, the starting and ending number is different for each magazine number.
<para> Sample 5 magazines and 400 pots ATC:</para><list type="table"><listheader><term>Magazine Number</term><description>Staring and Ending Pot number</description></listheader><item><term>1</term><description>1 to 80</description></item><item><term>2</term><description>81 to 160</description></item><item><term>3</term><description>161 to 240</description></item><item><term>4</term><description>241 to 320</description></item><item><term>5</term><description>321 to 400</description></item></list></remarks>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetToolKind(System.Int32)">
            <summary>Get Tool Kind</summary>
            <param name="intToolNo"> Tool Number</param>
            <returns>A String value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetToolType(System.Int32)">
            <summary>Get Tool type</summary>
            <param name="intInternalToolNo">Internal Tool Number</param>
            <returns>A String value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.IsLargeToolPot(System.Int32)">
            <summary>Check for large tool pot</summary>
            <param name="intPotNo">Tool Pot Number</param>
            <returns>A System.Boolean value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.IsHeavyToolPot(System.Int32)">
            <summary>Check for heavy tool </summary>
            <param name="intPotNo">Tool Pot Number</param>
            <returns>A System.Boolean value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.IsEmptyToolPot(System.Int32)">
            <summary>Check for empty pot</summary>
            <param name="intPotNo">Tool Pot Number</param>
            <returns>A System.Boolean value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CATC.IsDummyToolPot(System.Int32)">
            <summary>Check for DUMMY tool</summary>
            <param name="intPotNo">Tool Pot Number</param>
            <returns>A System.Boolean value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CATC">
            <summary>
Class provides information about Auto Tool Changer.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetMachiningReport(System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
            <summary>
Gets the Machining report data at the specified report index, and report period type
</summary>
            <example> This sample code shows how to call the GetMachiningReport() method.
<para> Dim intCuttingTime  As Int64 </para><para> Dim strMainProgramFileName As String </para><para> Dim strMainProgramName As String </para><para> Dim intNumberOfWork  As Int32 </para><para> Dim intOperatingTime  As Int64 </para><para> Dim intRunningTime  As Int64 </para><para> Dim intCount As Integer </para><para> Dim intMaxCount As Integer </para><para> Dim objMachiningReport As New MacMan.CMachiningReport </para><para> Dim objMachining  As MacMan.CMachining  </para><para> Dim intIndex  As Integer </para><para> Dim enReportPeriod  As ReportPeriodEnum  </para><para> objMachining = objMachiningReport.GetMachiningReport(intIndex, enReportPeriod) </para><para> intCuttingTime  = objMachining.CuttingTime  </para><para> strMainProgramFileName  = objMachining.MainProgramFileName   </para><para> strMainProgramName  = objMachining.MainProgramName   </para><para> intNumberOfWork  = objMachining.NumberOfWork   </para><para> intOperatingTime  = objMachining.OperatingTime  </para><para> intRunningTime = objMachining.RunningTime  </para><para> intCount = objMachiningReport.GetCount </para><para> intMaxCount = objMachiningReport.GetMaxCount </para></example>
            <param name="intIndex">Machining report index</param>
            <param name="enReportPeriod">Type of report to be retrieved.  Values of parameter come from Okuma.CMDATAPI.Enumerations.ReportPeriodEnum enumeration.</param>
            <returns>An Okuma.CMDATAPI.DataAPI.CMachining object that represents the machining report data.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006
<para><img src="../media/MacMan-MachiningReport.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetMachiningReports(System.Int32,System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
            <summary>
Gets the Machining report data at the specified report indexes, and report period type.
</summary>
            <example> This sample code shows how to call the GetMachiningReports() method.
<para> Dim objMachiningReport As New CMachiningReport</para><para> Dim arMachiningReport As ArrayList </para><para> Dim intFromIndex As Integer = 1</para><para> Dim intToIndex As Integer </para><para> Dim enReportPeriod As ReportPeriodEnum </para><para> intToIndex = objMachiningReport.GetCount() </para><para> arMachiningReport = objMachiningReport.GetMachiningReports (intFromIndex, intToIndex, enReportPeriod) </para></example>
            <param name="intFromIndex">Starting machining report index</param>
            <param name="intToIndex">Ending machining report index</param>
            <param name="enReportPeriod">Type of report to be retreived.  Values of parameter come from Okuma.CMDATAPI.Enumerations.ReportPeriodEnum enumeration.</param>
            <returns>An System.Collections.ArrarList object that represents the Machining report data at the specified report indexes, and report period type</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006
<para><img src="../media/MacMan-MachiningReport.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetCount(Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
            <summary>
Gets the number of records contained in the Machining Report given report index
</summary>
            <example> This sample code shows how to call the GetCount() method.
<para> Dim intCuttingTime  As Int64 </para><para> Dim strMainProgramFileName As String </para><para> Dim strMainProgramName As String </para><para> Dim intNumberOfWork  As Int32 </para><para> Dim intOperatingTime  As Int64 </para><para> Dim intRunningTime  As Int64 </para><para> Dim intCount As Integer </para><para> Dim intMaxCount As Integer </para><para> Dim objMachiningReport As New MacMan.CMachiningReport </para><para> Dim objMachining  As MacMan.CMachining  </para><para> Dim intIndex  As Integer </para><para> Dim enReportPeriod  As ReportPeriodEnum  </para><para> objMachining = objMachiningReport.GetMachiningReport(intIndex, enReportPeriod) </para><para> intCuttingTime  = objMachining.CuttingTime  </para><para> strMainProgramFileName  = objMachining.MainProgramFileName   </para><para> strMainProgramName  = objMachining.MainProgramName   </para><para> intNumberOfWork  = objMachining.NumberOfWork   </para><para> intOperatingTime  = objMachining.OperatingTime  </para><para> intRunningTime = objMachining.RunningTime  </para><para> intCount = objMachiningReport.GetCount </para><para> intMaxCount = objMachiningReport.GetMaxCount </para></example>
            <param name="enReportPeriod">A report period index.  Values for this parameter come from the Okuma.CMDATAPI.Enumerations.ReportPeriodEnum.</param>
            <returns>A System.Int32 value that represents the number of records contained in the Machining Report</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetMaxCount(Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
            <summary>
Gets the maximum number of Machining Report that can be stored by the system.
</summary>
            <example> This sample code shows how to call the GetMaxCount() method.
<para> Dim intCuttingTime  As Int64 </para><para> Dim strMainProgramFileName As String </para><para> Dim strMainProgramName As String </para><para> Dim intNumberOfWork  As Int32 </para><para> Dim intOperatingTime  As Int64 </para><para> Dim intRunningTime  As Int64 </para><para> Dim intCount As Integer </para><para> Dim intMaxCount As Integer </para><para> Dim objMachiningReport As New MacMan.CMachiningReport </para><para> Dim objMachining  As MacMan.CMachining  </para><para> Dim intIndex  As Integer </para><para> Dim enReportPeriod  As ReportPeriodEnum  </para><para> objMachining = objMachiningReport.GetMachiningReport(intIndex, enReportPeriod) </para><para> intCuttingTime  = objMachining.CuttingTime  </para><para> strMainProgramFileName  = objMachining.MainProgramFileName   </para><para> strMainProgramName  = objMachining.MainProgramName   </para><para> intNumberOfWork  = objMachining.NumberOfWork   </para><para> intOperatingTime  = objMachining.OperatingTime  </para><para> intRunningTime = objMachining.RunningTime  </para><para> intCount = objMachiningReport.GetCount </para><para> intMaxCount = objMachiningReport.GetMaxCount </para></example>
            <param name="enReportPeriod">Values for this parameter come from the  Okuma.CMDATAPI.Enumerations.ReportPeriodEnum.</param>
            <returns>A System.Int32 value that represents the maximum number of machining report</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetStartTime(System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
            <summary>N/A</summary>
            <example> This sample code shows how to call the GetStartTime() method.
</example>
            <param name="intIndex">Index Number</param>
            <param name="enReportPeriod">Report Period Number</param>
            <returns>A System.String value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetStartDate(System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
            <summary>N/A</summary>
            <example> This sample code shows how to call the GetStartDate() method.
</example>
            <param name="intIndex">Index Number.</param>
            <param name="enReportPeriod">Report Period Number.</param>
            <returns>A System.String value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetMainProgramName(System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
            <summary>N/A</summary>
            <example> This sample code shows how to call the GetMainProgramName() method.
</example>
            <param name="intIndex">Index Number</param>
            <param name="enReportPeriod">Report Period Number</param>
            <returns>A System.String value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetMainProgramFileName(System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
            <summary>N/A</summary>
            <example> This sample code shows how to call the GetMainProgramFileName() method.
</example>
            <param name="intIndex">Index Number.</param>
            <param name="enReportPeriod">Report Period Number.</param>
            <returns>A System.String value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetCuttingTime(System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
            <summary>N/A</summary>
            <example> This sample code shows how to call the GetCuttingTime() method.
</example>
            <param name="intIndex">Index Number</param>
            <param name="enReportPeriod">Report Period Number</param>
            <returns>A System.Int64 value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetOperatingTime(System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
            <summary>N/A</summary>
            <example> This sample code shows how to call the GetOperatingTime() method.
</example>
            <param name="intIndex">Index Number</param>
            <param name="enReportPeriod">Report Period Number</param>
            <returns>A System.Int64 value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetNumberOfWork(System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
            <summary>N/A</summary>
            <example> This sample code shows how to call the GetNumberOfWork() method.
</example>
            <param name="intIndex">Index Number</param>
            <param name="enReportPeriod">Rreport Period Number</param>
            <returns>A System.Int32 value.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.ValidateIndex(System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum,System.String,System.Int32)">
            <summary>N/A</summary>
            <example> This sample code shows how to call the ValidateIndex() method.
</example>
            <param name="intValue">Index Value</param>
            <param name="enReportPeriod">Report Period Number</param>
            <param name="strSource">Source String</param>
            <param name="intErrorCode">Error Code number</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport">
            <summary>
Class provides machining reports information stored by NC.
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.StartTime">
            <summary>
The processing track record - Start Time. Data is in "hh:mm:ss" format.
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.StartDate">
            <summary>
The processing track record - Start Date.  Data is in "yyyy/mm/dd" format. 
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.MainProgramName">
            <summary>
The processing track record - Main program name.
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.MainProgramFileName">
            <summary>
The processing track record - Main program file name. 
</summary>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.CuttingTime">
            <summary>
The processing track record - Cutting time. 
</summary>
            <returns>A System.Int64 value.</returns>
            <DataUnit>
Second
</DataUnit>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.OperatingTime">
            <summary>
The processing track record - Operating time. 
</summary>
            <returns>A System.Int64 value.</returns>
            <DataUnit>
Second
</DataUnit>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.RunningTime">
            <summary>
The processing track record - Running time. 
</summary>
            <returns>A System.Int64 value.</returns>
            <DataUnit>
Second
</DataUnit>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.NumberOfWork">
            <summary>The processing track record - Number of work.</summary>
            <returns>A System.Int32 value.</returns>
            <DataUnit>
Unit
</DataUnit>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.CMachining">
            <summary>
Class represents a machining report data.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.#ctor(System.Int32,Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum,System.Int32,System.String,System.String,System.String,System.String)">
[Enter] <summary>
Initializes a new instance of the CCurrentAlarm class with the alarm number, alarm level, alarm object,
alarm code, alarm message, object message, and alarm character string.
</summary><param name="intAlarmNumber">Alarm number</param><param name="enAlarmLevel">Alarm level</param><param name="intAlarmObject">Alarm object</param><param name="strAlarmCode">Alarm code</param><param name="strAlarmMessage">Alarm message</param><param name="strObjectMessage">Object message</param><param name="strAlarmCharacterString">Alarm Character String</param></member>
        <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.AlarmCharacterString">
[Enter] <summary>
Gets the alarm Character String for this CCurrentAlarm instance. 
</summary><returns>A System.String containing the alarm Character String</returns><Figure> Alarm Format - Alarm character-string (7)
<para><img src="../media/MC.AlarmFormat.jpg" /></para></Figure></member>
        <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.ObjectMessage">
[Enter] <summary>
Gets the alarm Object message for this CCurrentAlarm instance. 
</summary><returns>A System.String containing the alarm Object message</returns><Figure> Alarm Format - Object Message (5)
<para><img src="../media/MC.AlarmFormat.jpg" /></para></Figure></member>
        <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.AlarmMessage">
[Enter] <summary>
Gets the alarm message for this CCurrentAlarm instance. 
</summary><returns>A System.String containing the alarm message</returns><Figure> Alarm Format - Alarm Message (4)
<para><img src="../media/MC.AlarmFormat.jpg" /></para></Figure></member>
        <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.ObjectNumber">
            <summary>
Gets the alarm Object number for this CCurrentAlarm instance.  
The object number and the object message show the programming system and the control axis
where the alarm has occurred by the number and message as shown in the table below:
</summary>
            <returns> A System.Int32 containing the alarm Object</returns>
            <Figure> Alarm Format - Object number (2)
<para><img src="../media/MC.AlarmFormat.jpg" /></para><para>
Object Number and Object Message Table:
</para><para><img src="../media/MC.AlarmObject.jpg" /></para><para>
As indicated above, the object numbers and messages to be used are determined by the machine
specifications.
</para></Figure>
        </member>
        <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.AlarmCode">
[Enter] <summary>
Gets the alarm code for this CCurrentAlarm instance. 
</summary><returns> A System.String containing the alarm code</returns><Figure> Alarm Format - Alarm code (6)
<para><img src="../media/MC.AlarmFormat.jpg" /></para></Figure></member>
        <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.AlarmLevel">
[Enter] <summary>
Gets the alarm level for this CCurrentAlarm instance.  
Alarms related with the OSP are classified into five types such as Alarm P, A, B, C and D.
</summary><returns>An Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum value</returns><Figure> Alarm Classifications
<para><img src="../media/MC.AlarmLevel.jpg" /></para></Figure></member>
        <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.AlarmNumber">
[Enter] <summary>
Gets the alarm number for this CCurrentAlarm instance.
</summary><returns> A System.Int32 containing the alarm number</returns><Figure> Alarm Format - Alarm number (1)
<para><img src="../media/MC.AlarmFormat.jpg" /></para></Figure></member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CCurrentAlarm">
            <summary>
Class represents current alarm information from NC.
For more information, please refer to the CNC System 
OSP-P200M/P20M/OSP-P200M-R/P20M-R or newer controls for Alarm and Error List document.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.CheckOACLicenseFeatures">
            <summary />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.CheckOACLicenseFeature(System.Version)">
            <summary>
Check OAC License feature using OAC License Manager
Set to true if file exist so we are not going to check FlexNet license. 
However, the license might not valid for this version based on the version of this library
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.CheckLicenseFeature(System.Version)">
            <summary>
Check License feature using Flexnet library
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.CheckUserErrorCode(System.Int16,System.String)">
            <summary>NA</summary>
            <example> This sample code shows how to use CheckUserErrorCode() method.
</example>
            <param name="nErrorCode">User Error Code Number</param>
            <param name="strSource">Source String</param>
            <exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.SetLoggingLevelToAll">
            <summary>
Set logging level to LoggingLevelEnum.logAll for this instance
<para>The system will not log operations having logging level above this setting level.</para></summary>
            <remarks>
Note: It is highly recommended for debugging purpose only
Note2: All exceptions and writing operations to NC will be logged automatically
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.SetLoggingLevelToGet">
            <summary>
Set logging level LoggingLevelEnum.logGet
<para>The system will not log operations having logging level above this setting level.</para></summary>
            <remarks />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.SetLoggingLevelToSet">
            <summary>
Set logging level LoggingLevelEnum.logGet
<para>The system will not log operations having logging level above this setting level.</para></summary>
            <remarks />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.GetLoggingLevel">
            <summary>
Get current logging level for this instance
</summary>
            <returns>An enumeration of LoggingLevelEnum</returns>
            <remarks />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.MicronToMM(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.String,System.Int32)">
            <summary>
                <para>
Function handles conversion from value in micron to mm per axis index
</para>
            </summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.MMToMicron(System.Double,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.String,System.Int32)">
            <summary>
                <para>
Function handles conversion from value in mm to micron per axis index
</para>
            </summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.MicronToMM(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Function handles conversion value in micron to mm per axis index
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.MMToMicron(System.Double,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Function handles conversion value in mm to micron per axis index
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.ValidateControlType(System.Int32,System.String,Okuma.CMDATAPI.Enumerations.ValidateLevelEnum)">
            <summary>
Verify if passing control type is valid or not
</summary>
            <exception cref="T:System.NotSupportedException">Thrown if control type is not the same</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.ValidateControlType(System.Int32,System.String,System.Boolean)">
            <summary>
Verify if passing control type is valid or not
</summary>
            <exception cref="T:System.NotSupportedException">Thrown if control type is not the same</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.ValidateFeatureSet(Okuma.CMDATAPI.Enumerations.FeatureSetEnum,System.String)">
            <summary>
Verify if passing feature set is valid or not
</summary>
            <exception cref="T:System.NotSupportedException">Thrown if feature set is not valid</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.GetAxisType(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Get axis type given axis index
</summary>
            <returns>AxisTypeEnum</returns>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.ParseToolAttribute(System.Int32,System.Int32)">
            <summary>
Parse tool attributes based on attribute value 1 and 2 for OSP-P300 control
</summary>
            <returns>Return string value</returns>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.GetExternalToolNoFromInternalToolNo(System.Int32)">
            <summary>
Get external tool number from internal tool number
The conversion is needed if spec for a particular function is required.
</summary>
            <returns>Return an external tool number if possible otherwise returns zero</returns>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.GetPLCToolNoFormExternalToolNo(System.Int32)">
            <summary>
For OCJ white delta note #4: Get plc tool number by converting external tool number 
The conversion is needed if spec for a particular function is required.
</summary>
            <returns>Return PLC tool number if possible otherwise returns zero</returns>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.GetExternalToolNoFromPLCToolNo(System.Int32)">
            <summary>
For OCJ white delta note #3: Get External Tool number based on PLC tool number by converting PLC tool number to internal tool number then converting internall tool number to external tool number to 
All tool displayed on P300 are External Tool Number and are stored as Internal Tool Number
in OSP-P300 system. So the conversion between the two are needed.
</summary>
            <returns>Return external tool number from 1-99999999 if possible. Otherwise it returns zero</returns>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.GetInternalToolFromExternalToolNo(System.Int32)">
            <summary>
Get Internal Tool number based on External Tool number.
All tool displayed on P300 are External Tool Number and are stored as Internal Tool Number
in OSP-P300 system. So the conversion between the two are needed.
</summary>
            <returns>Return internal tool number from 1-999 if possible. Otherwise it returns zero</returns>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.CheckFeatures">
            <summary>
                <para>
get features supported by this machine to be checked by other functions
</para>
            </summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.ValidateDependencyFiles">
            <summary>
Verify dependency files of OCJ library
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.GetMachineSerialNumber">
            <summary>
                <para>
Get machine serial by reading OSP file
</para>
            </summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.RoundToLarger(System.Double,System.Int32)">
            <summary>
Function handles round off to the larger number instead of round to the nearest number as implemented in System::Math::Round
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.ConvertUnitToInch(System.Int32,System.Double,System.String,System.Int32)">
            <summary>
Convert and round off passing value to inch if Data Unit is set to INCH
</summary>
            <param name="intAxisIndex">Axis Index Number.</param>
            <param name="dblValue">Unit Value.</param>
            <returns>Double</returns>
            <exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.ConvertUnitToMM(System.Int32,System.Double,System.String,System.Int32)">
            <summary>
Convert and round off passing value to mm if Data Unit is set to INCH.
This function only apply to axes other than BA axis.  BA axis has only decimals in any cases.
</summary>
            <param name="intAxisIndex">Axis Index Number.</param>
            <param name="dblValue">data value to be converted if needed</param>
            <returns>Double</returns>
            <exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.CheckFileVersion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
Check file version against passing version info
</summary>
            <returns>True if file version is greater or equal to passing version information</returns>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.RegisterOSPControlType(System.String,System.Int32)">
            <summary>
                <para>
Register OSP control type into registry of current user given registry key and its value
</para>
            </summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.ConvertUnitToMM(System.Int32,System.Double)">
            <summary>NA</summary>
            <example> This sample code shows how to use ConvertUnitToInch() method.
</example>
            <param name="intAxisIndex">Axis Index Number</param>
            <param name="dblValue">Double Value</param>
            <return>A System.Double Value</return>
            <exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.ConvertUnitToInch(System.Int32,System.Double)">
            <summary>NA</summary>
            <example> This sample code shows how to use ConvertUnitToInch() method.
</example>
            <param name="intAxisIndex">Axis Index Number</param>
            <param name="dblValue">Double Value</param>
            <return>A System.Double Value</return>
            <exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.CheckErrorCode(System.Int16,System.String)">
            <summary>NA</summary>
            <example> This sample code shows how to use CheckErrorCode() method.
</example>
            <param name="nErrorCode">Error Code Number</param>
            <param name="strSource">Source String</param>
            <exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.GetAPIErrorMessage(System.Int16)">
            <summary>NA</summary>
            <example> This sample code shows how to use GetAPIErrorMessage() method.
</example>
            <param name="nReturnErrorCode">Return error Code Number</param>
            <return>A System.String Value</return>
            <exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.LogMessage(System.String,System.String,System.String,Okuma.CMDATAPI.Enumerations.LoggingLevelEnum,System.Boolean)">
            <summary>NA</summary>
            <example> This sample code shows how to use LogMessage() method.
</example>
            <param name="strFunction">Function Name</param>
            <param name="strParameters">Parameters</param>
            <param name="strMessage">Message</param>
            <param name="enLogType">Logging request Type</param>
            <param name="blnError">Not logging message if error flag is set</param>
            <exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.LogMessage(System.String,System.String,Okuma.CMDATAPI.Enumerations.LoggingLevelEnum)">
            <summary>NA</summary>
            <example> This sample code shows how to use LogMessage() method.
</example>
            <param name="strFunction">Function Name</param>
            <param name="strParameters">Parameters</param>
            <param name="enLoggingLevel">Logging request Type</param>
            <exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.LogExceptionMessage(System.String,System.String,System.String)">
            <summary>NA</summary>
            <example> This sample code shows how to use LogExceptionMessage() method.
</example>
            <param name="strFunction">Function Name</param>
            <param name="strParameters">Parameters</param>
            <param name="strError">Error String</param>
            <exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.AllExceptionHandler(System.String,System.String,System.Exception)">
            <summary>NA</summary>
            <example> This sample code shows how to use AllExceptionHandler() method.
</example>
            <param name="strFunction">Function Name</param>
            <param name="strParameters">Parameters</param>
            <param name="ex">Exception</param>
            <exception cref="T:System.ApplicationException">Thrown when function failes to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.#ctor(System.String,System.String,System.String)">
            <summary>
Create an instance of CBase class given class ID and name.  It should not be used directly.  For internal data structure only.
In addition to library name, the provided logging name will be used for logging all function calls 
</summary>
            <param name="strClassID">Class ID.  Internal Data structure only</param>
            <param name="strClassName">Class Name.  Internal Data structure only</param>
            <param name="strLoggingName">Logging name to be used in Logging Service. Note: Only the first provided logging name is stored</param>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CBase.#ctor(System.String,System.String)">
            <summary>
Create an instance of CBase class given derived class name and class id.
</summary>
            <param name="strClassID">Derived class ID</param>
            <param name="strClassName">Derived class name</param>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CSpec">
            <summary>
Class provides the current specification of machine.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.CalUserParameterVariableLimit(Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
[enter]<summary>Determine the variable limit based on the calculation made on the input value and actual position at the specified axis index.
</summary><example> This example shows how to calculate user parameter variable limit at the specified axis index.
<code escaped="true" language="vbnet">
 Dim dblValue as Double	
 Dim enAxisIndex as AxisIndexEnum 
 Dim enUserParameterVariableLimit as UserParameterVariableLimitEnum 
 objAxis.CalUserParameterVariableLimit(enUserParameterVariableLimit, enAxisIndex, dblValue)	
</code></example><param name="enVariableLimit">Variable Limit. Values of parameter come from Okuma.CMDATAPI.Enumerations.UserVariableLimitEnum.</param><param name="enAxisIndex">Axis index. Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param><param name="dblValue">Input value to be calculated from</param><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit><Figure> PARAMETER - USER PARAMETER - +/- VARIABLE LIMIT(P), +/- VARIABLE LIMIT(M)
<para><img src="../media/MC.Parameter.UserParameter.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.AddUserParameterVariableLimit(Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
[enter]<summary>Set user parameter variable limit by adding the input value to the existing data at the specified axis index.
</summary><example> This example shows how to use AddUserParameterVariableLimit at the specified axis index.
<code escaped="true" language="vbnet">
 Dim objAxis As New CAxis	
 Dim dblValue As Double	
 Dim enAxisIndex As AxisIndexEnum 
 Dim enUserParameterVariableLimit As UserParameterVariableLimitEnum 
 objAxis.AddUserParameterVariableLimit(enUserParameterVariableLimit, enAxisIndex, dblValue)	
</code></example><param name="enVariableLimit">Variable Limit. Values of parameter come from Okuma.CMDATAPI.Enumerations.UserVariableLimitEnum enumeration.</param><param name="enAxisIndex">Axis index. Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param><param name="dblValue">Variable limit value to be added</param><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit><Figure> PARAMETER - USER PARAMETER - +/- VARIABLE LIMIT(P), +/- VARIABLE LIMIT(M)
<para><img src="../media/MC.Parameter.UserParameter.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.SetUserParameterVariableLimit(Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
[enter]<summary>Set user parameter variable limit at the specified axis index.
</summary><example> This example shows how to set user parameter variable limit at the specified axis index.
<para><para> Dim dblValue as Double	</para><para> Dim enAxisIndex As AxisIndexEnum </para><para> Dim enUserParameterVariableLimit as UserParameterVariableLimitEnum </para><para> objAxis.SetUserParameterVariableLimit(enUserParameterVariableLimit, enAxisIndex, dblValue)	</para></para></example><param name="enVariableLimit">Variable Limit. Values of parameter come from Okuma.CMDATAPI.Enumerations.UserVariableLimitEnum enumeration.</param><param name="enAxisIndex">Axis index. Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param><param name="dblValue">Variable limit value to be set</param><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit><Figure> PARAMETER - USER PARAMETER - +/- VARIABLE LIMIT(P), +/- VARIABLE LIMIT(M)
<para><img src="../media/MC.Parameter.UserParameter.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.SetDataUnit(Okuma.CMDATAPI.Enumerations.DataUnitEnum)">
            <summary>
Sets current data unit for this class instance.
</summary>
            <example> This sample code shows how to call the SetDataUnit() method.
<para> Dim objAxis As New CAxis </para><para> Dim enDataUnit As DataUnitEnum</para><para> objAxis.SetDataUnit(enDataUnit) </para></example>
            <param name="enDataUnit">Data Unit to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
If applicable, this setting is applied to data in this class instance only, not for NC Data Unit.
For linear axis position, data unit can be either mm or inch.  
For circular (rotary) axis position, data unit is in degree only.
For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, 
then NC position will be converted to inch and vice versa.
</remarks>
            <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. 
<para><img src="../media/ParametersScreen.DataUnit.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRapidFeedrateOverride">
            <summary>
Gets rapid feedrate override
</summary>
            <example> This sample code shows how to call the GetRapidFeedrateOverride() method.
<para> Dim objAxis As New CAxis </para><para> Dim intValue As Integer </para><para> intValue = objAxis.GetRapidFeedrateOverride()	</para></example>
            <returns>A System.Int32 value that represents the percentage of feedrate is overriden by the system</returns>
            <DataUnit>
Percentage
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> G01 - Rapid Feedrate override control knob on machine control panel
<para><img src="../media/MachineControlPanel.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetMaxHomePositions">
            <summary>
Gets number of home positions available in the system
</summary>
            <example> This sample code shows how to call the GetMaxHomePositions() method.
<para> Dim objAxis As New CAxis </para><para> Dim intPositions as Integer </para><para> intPositions = objAxis.GetMaxHomePositions() </para></example>
            <returns>A System.Int32 value that represents number of home positions available in the system</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - HOME POSITION
<para><img src="../media/HomePositionParameter.jpg" /></para></Figure>
            <remarks>
                <para>
Home positions are ranging from 32, 96, and to 197 positions.
</para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetHomePositionMovementOrder(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets Home Position movement order given position index, and axis index
</summary>
            <example> This sample code shows how to call the GetHomePositionMovementOrder() method.
<para> Dim objAxis As New CAxis </para><para> Dim intValue as Integer </para><para> Dim intPosition as Integer </para><para> Dim enAxisIndex as AxisIndexEnum </para><para> intValue = objAxis.GetHomePositionMovementOrder(intPosition, enAxisIndex) </para></example>
            <param name="intPosition">Home Position. Valid variable indexes are ranging from 1-32/96/192.</param>
            <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>A System.Int32 value that represents the home position movement order</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - HOME POSITION MOVEMENT ORDER
<para><img src="../media/HomePositionMovementOrderParameter.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetHomePosition(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets Home Position given position index, and axis index
</summary>
            <example> This sample code shows how to call the GetHomePosition() method.
<para> Dim objAxis As New CAxis </para><para> Dim dblValue as Double </para><para> Dim intPosition as Integer </para><para> Dim enAxisIndex as AxisIndexEnum </para><para> dblValue = objAxis.GetHomePosition(intPosition, enAxisIndex) </para></example>
            <param name="intPosition">Home Position. Valid variable indexes are ranging from 1-32/96/192.</param>
            <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>A System.Double value that represents the home position</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - HOME POSITION PARAMETER
<para><img src="../media/HomePositionParameter.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetHiCutProMachiningTolerance">
            <summary>
Gets Hi-Cut Pro machining tolerance
</summary>
            <example> This sample code shows how to call the GetHiCutProMachiningTolerance() method.
<para> Dim objAxis As New CAxis </para><para> Dim dblValue as Double </para><para> dblValue = objAxis.GetHiCutProMachiningTolerance() </para></example>
            <returns>A System.Double value that represents the machining tolerance for Hi-Cut Pro</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - Hi-Cut Pro Control PARAMETER - MACHINING TOLERANCE
<para><img src="../media/HiCutProControlParameter.jpg" /></para></Figure>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Hi-Cut Pro Function NC SPEC CODE [11,0]</term><description>Valid</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetHiCutProFeedrateUpperLimit">
            <summary>
Gets Hi-Cut Pro feedrate upper limit
</summary>
            <example> This sample code shows how to call the GetHiCutProFeedrateUpperLimit() method.
<para> Dim objAxis As New CAxis </para><para> Dim dblValue as Double </para><para> dblValue = objAxis.GetHiCutProFeedrateUpperLimit() </para></example>
            <returns>A System.Double value that represents the feedrate upper limit for Hi-Cut Pro</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> PARAMETER - Hi-Cut Pro Control PARAMETER - FEEDRATE UPPER LIMIT
<para><img src="../media/HiCutProControlParameter.jpg" /></para></Figure>
            <remarks>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Hi-Cut Pro Function NC SPEC CODE [11,0]</term><description>Valid</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetSlopeConverting">
            <summary>
Gets current Slope Converting
</summary>
            <example> This sample shows how to call the GetSlopeConverting method.
<para>Dim objAxis As New CAxis </para><para>Dim enValue As SlopeConvertingEnum </para><para>    enValue = objAxis.GetSlopeConverting </para></example>
            <returns>An Okuma.CMDATAPI.Enumerations.SlopeConvertingEnum enumeration value</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRotateAmountInverseSlopeCoord(System.Int32,System.Int32)">
            <summary>
Gets rotate amount in inverse slope coordinate system for given rotation position in a 3x3 rotation matrix
</summary>
            <example> This sample code shows how to call the GetRotateAmountInverseSlopeCoord() method.
<para> Dim objAxis As New CAxis </para><para> Dim intColumn As Int32 </para><para> Dim intRow As Int32 </para><para> Dim dblValue As Double </para><para> dlbValue = objAxis.GetRotateAmountInverseSlopeCoord(intColumn, intRow) </para></example>
            <param name="intColumn">The column position in a 3x3 Rotation Matrix. Column value is ranging from 0 to 2</param>
            <param name="intRow">The row position in a 3x3 Rotation Matrix. Row value is ranging from 0 to 2</param>
            <returns>A System.Double that represents the rotate amount in slope coordinate system for the specfiied axis index</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para>Reference Manual: OSP-200M - Special Functions Manual - Section 28</para>
                <para>Reference Rotation Matrix - http://en.wikipedia.org/wiki/Rotation_matrix</para>
                <para>
                    <img src="../media/MC.Axis.SlopeCoord.ShiftAmount.jpg" />
                </para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetShiftAmountInverseSlopeCoord(Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum)">
            <summary>
Gets shift amount in inverse slope coordinate system for given axis index
</summary>
            <example> This sample code shows how to call the GetShiftAmountInverseSlopeCoord() method.
<para> Dim objAxis As New CAxis </para><para> Dim enLinearAxisIndex As LinearAxisIndexEnum </para><para> Dim dblValue As Double </para><para> dlbValue = objAxis.GetShiftAmountInverseSlopeCoord(enLinearAxisIndex) </para></example>
            <param name="enLinearAxis">Linear Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum enumeration.  </param>
            <returns>A System.Double that represents the shift amount in slope coordinate system for the specfiied axis index</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
Reference Manual: OSP-200M - Special Functions Manual - Section 28
<para><img src="../media/MC.Axis.SlopeCoord.ShiftAmount.jpg" /></para></Figure>
            <remarks>
                <para>
********************* This function can only be supported in OSP-P200 machines. ************************
</para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRotateAmountSlopeCoord(System.Int32,System.Int32)">
            <summary>
Gets rotate amount in slope coordinate system for given rotation position in a 3x3 rotation matrix
</summary>
            <example> This sample code shows how to call the GetRotateAmountSlopeCoord() method.
<para> Dim objAxis As New CAxis </para><para> Dim intColumn As Int32 </para><para> Dim intRow As Int32 </para><para> Dim dblValue As Double </para><para> dlbValue = objAxis.GetRotateAmountSlopeCoord(intColumn, intRow) </para></example>
            <param name="intColumn">The column position in a 3x3 Rotation Matrix. Column value is ranging from 0 to 2</param>
            <param name="intRow">The row position in a 3x3 Rotation Matrix. Row value is ranging from 0 to 2</param>
            <returns>A System.Double that represents the rotate amount in slope coordinate system for the specfiied axis index</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
                <para>Reference Manual: OSP-200M - Special Functions Manual - Section 28</para>
                <para>Reference Rotation Matrix - http://en.wikipedia.org/wiki/Rotation_matrix</para>
                <para>
                    <img src="../media/MC.Axis.SlopeCoord.ShiftAmount.jpg" />
                </para>
            </Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetShiftAmountSlopeCoord(Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum)">
            <summary>
Gets shift amount in slope coordinate system for given axis index
</summary>
            <example> This sample code shows how to call the GetShiftAmountSlopeCoord() method.
<para> Dim objAxis As New CAxis </para><para> Dim enLinearAxisIndex As LinearAxisIndexEnum </para><para> Dim dblValue As Double </para><para> dlbValue = objAxis.GetShiftAmountSlopeCoord(enLinearAxisIndex) </para></example>
            <param name="enLinearAxis">Linear Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum enumeration.  </param>
            <returns>A System.Double that represents the shift amount in slope coordinate system for the specfiied axis index</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
Reference Manual: OSP-200M - Special Functions Manual - Section 28
<para><img src="../media/MC.Axis.SlopeCoord.ShiftAmount.jpg" /></para></Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>No</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRotationCenterSetupPosition(Okuma.CMDATAPI.Enumerations.RotationCenterSideEnum,Okuma.CMDATAPI.Enumerations.RotaryAxisStructureEnum,Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum)">
            <summary>
Gets rotation center setup position given rotation center side, linear axis index, and rotation axis structure.
</summary>
            <example> This sample code shows how to call the GetRotationCenterSetupPosition() method.
<para> Dim objAxis As New CAxis </para><para> Dim enRotationCenterSide As RotationCenterSideEnum </para><para> Dim enLinearAxisIndex As LinearAxisIndexEnum </para><para> Dim enRotaryAxisStructure As RotaryAxisStructureEnum </para><para> Dim dblValue As Double </para><para> dlbValue = objAxis.GetRotationCenterSetupPosition(enRotationCenterSide, enRotaryAxisStructure, enLinearAxisIndex) </para></example>
            <param name="enRotationCenterSide">Rotation Center side.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.RotationCenterSideEnum enumeration.  </param>
            <param name="enRotaryAxisStructure">Rotary Axis Strucuture index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.RotaryAxisStructureEnum enumeration.  </param>
            <param name="enLinearAxis">Linear Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum enumeration.  </param>
            <returns>A System.Double that represents the rotation center setup position.</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
PARAMETER- ROTARY AXIS PARAMETER - Rotation Center - Page 2/2
<para><img src="../media/MC.Axis.RotaryAxisParameter.RotationCenter.jpg" /></para></Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRotaryAxisSetupStructure(Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum)">
            <summary>
Get setup structure for the specified rotary axis index
</summary>
            <example> This sample code shows how to call the GetRotaryAxisSetupStructure() method.
<para>Dim objAxis As New CAxis </para><para> Dim enAxisEnum As RotaryAxisIndexEnum </para><para> Dim enValue As RotaryAxisSetupStructureEnum </para><para> enValue = objAxis.GetRotaryAxisSetupStructure(enAxisEnum) </para></example>
            <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum enumeration.</param>
            <returns>An Okuma.CMDATAPI.Enumerations.RotaryAxisSetupStructureEnum enumeration value that represents a setup structure for a rotary axis</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
PARAMETER - ROTARY AXIS SYSTEM PARAMETER - Rotary Axis Structure - STRUCTURE
<para><img src="../media/MC.Parameter.RotaryAxisSystemParameter.Structure.jpg" /></para></Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRotaryAxisSetupPosition(Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum)">
            <summary>
Get setup position for the specified rotary axis index
</summary>
            <example> This sample code shows how to call the GetRotaryAxisSetupPosition() method.
<para>Dim objAxis As New CAxis </para><para> Dim enAxisEnum As RotaryAxisIndexEnum </para><para> Dim enValue As RotaryAxisSetupPositionEnum </para><para> enValue = objAxis.GetRotaryAxisSetupPosition(enAxisEnum) </para></example>
            <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum enumeration.</param>
            <returns>An Okuma.CMDATAPI.Enumerations.RotaryAxisSetupPositionEnum enumeration value that represents a setup position for a rotary axis</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
PARAMETER - ROTARY AXIS SYSTEM PARAMETER - Rotary Axis Structure -POSITION
<para><img src="../media/MC.Parameter.RotaryAxisSystemParameter.Structure.jpg" /></para></Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.IsISORotaryAxis(Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum)">
            <summary>
Check if the specified rotary axis index is complied with ISO standard or not
</summary>
            <example> This sample code shows how to call the IsISORotaryAxis() method.
<para>Dim objAxis As New CAxis </para><para> Dim enAxisEnum As RotaryAxisIndexEnum </para><para> Dim blnValue As Boolean </para><para> blnValue = objAxis.IsISORotaryAxis(enAxisEnum) </para></example>
            <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum enumeration.</param>
            <returns>A Boolean value.  True if it is complied with ISO standard otherwise false</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
PARAMETER - ROTARY AXIS PARAMETER - Rotation Axis Attribute - ISO - Page 1/2
<para><img src="../media/MC.Parameter.RotaryAxisParameter.Attribute.jpg" /></para></Figure>
            <remarks>
                <para>
Compatible Chart of this function for different OSP controls:
<list type="table"><listheader><term>OSP Control</term><description>Compatible</description></listheader><item><term>P100II</term><description>No</description></item><item><term>P200</term><description>Yes</description></item><item><term>P300M or newer</term><description>Yes</description></item><item><term>P300S or newer</term><description>Yes</description></item></list></para>
            </remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRotaryAxisName(Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum)">
            <summary>
Gets rotary axis name for the specified axis index
</summary>
            <example> This sample code shows how to call the GetRotaryAxisName() method.
<para>Dim objAxis As New CAxis </para><para>Dim strValue As String </para><para> Dim enAxisEnum As RotaryAxisIndexEnum </para><para> strValue = objAxis.GetRotaryAxisName(enAxisEnum) </para></example>
            <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum enumeration.</param>
            <returns>A System.String that represents the name of the specified axis index.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
PARAMETER - ROTARY AXIS SYSTEM PARAMETER - Rotary Axis Structure - NAME
<para><img src="../media/MC.Parameter.RotaryAxisSystemParameter.Structure.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetUserParameterVariableLimit(Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
[enter]<summary>
Gets user parameter variable limit at the specified axis index
</summary><example> This example shows how to get user parameter variable limit at the specified axis index.
<para><para> Dim objAxis As New CAxis	</para><para> Dim dblValue As Double	</para><para> Dim enAxisIndex as AxisIndexEnum </para><para> Dim enUserParameterVariableLimit as UserParameterVariableLimitEnum </para><para> dblValue = objAxis.GetUserParameterVariableLimit(enUserParameterVariableLimit, enAxisIndex)	</para></para></example><param name="enVariableLimit">Variable Limit. Values of parameter come from Okuma.CMDATAPI.Enumerations.UserVariableLimitEnum enumeration.</param><param name="enAxisIndex">Axis index. Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><returns>A System.Double value</returns><DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit><Figure> PARAMETER - USER PARAMETER - +/- VARIABLE LIMIT(P), +/- VARIABLE LIMIT(M)
<para><img src="../media/MC.Parameter.UserParameter.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRelativeActualPositionProgramCoord(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets relative actual position in program coordinate at the specified axis index.
</summary>
            <example> This sample code shows how to call the GetRelativeActualPositionProgramCoord() method.
<para> Dim objAxis As New CAxis </para><para> Dim dblValue As Double </para><para> Dim enAxisEnum As AxisIndexEnum </para><para> dblValue = objAxis.GetRelativeActualPositionProgramCoord(enAxisEnum)</para></example>
            <param name="enAxisIndex">Axis index.  
Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>A System.Double that represents the relative actual position in program coordinate.</returns>
            <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>SFLCPDPX - Relative Actual position in program coordinate
<para><img src="../media/AxisData_Encoder_coord.RCON.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetMaxFeedrateOverride">
            <summary>
Gets maximum feedrate override by the system.
</summary>
            <example> This sample code shows how to call the GetMaxFeedrateOverride() method.
<para> Dim objAxis As New CAxis </para><para> Dim intValue As Integer</para><para> intValue = objAxis.GetMaxFeedrateOverride	</para></example>
            <returns>A System.Int32 value that represents the percentage of maximum feedrate override by the system</returns>
            <DataUnit>
Percentage
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetFeedrateOverride">
            <summary>
Gets percentage of feedrate that is overriden by the system
</summary>
            <example> This sample code shows how to call the GetFeedrateOverride() method.
<para> Dim objAxis As New CAxis </para><para> Dim intValue As Integer</para><para> intValue = objAxis.GetFeedrateOverride()	</para></example>
            <returns>A System.Int32 value that represents the percentage of feedrate is overriden by the system</returns>
            <DataUnit>
Percentage
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> G02 - Feedrate override control knob on machine control panel
<para><img src="../media/MachineControlPanel.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetTargetPosition(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets target position at the specified axis index.
</summary>
            <example> This sample code shows how to call the GetTargetPosition() method.
<para> Dim objAxis As New CAxis </para><para> Dim dblValue As Double </para><para> Dim enAxisEnum As AxisIndexEnum </para><para> dblValue = objAxis.GetTargetPosition(enAxisEnum) </para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.  </param>
            <returns>A System.Double that represents the target position.</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>
Targe point - Target position.
<para><img src="../media/ActualPosition-p4.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetDistanceToTargetPosition(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets distance from the actual position to a target value specified by the program at the specified axis index.
</summary>
            <example> This sample code shows how to call the GetDistanceToTargetPosition() method.
<para> Dim objAxis As New CAxis </para><para> Dim dblValue As Double </para><para> Dim enAxisEnum As AxisIndexEnum </para><para> dblValue = objAxis.GetDistanceToTargetPosition(enAxisEnum) </para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.  </param>
            <returns>A System.Double that represents the distance from actual position to target.</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>Distance - Distance to target position
<para><img src="../media/ActualPosition-p4.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetActualPositionEncoderCoord(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets actual position in encoder coordinate at the specified axis index.
</summary>
            <example> This sample code shows how to call the GetActualPositionEncoderCoord() method.
<para> Dim objAxis As New CAxis </para><para> Dim dblValue As Double </para><para> dblValue = objAxis.GetActualPositionEncoderCoord(AxisIndexEnum.Z_Axis)	</para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.  </param>
            <returns>A System.Double that represents the actual position in encoder coordinate.</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>RCON - Actual position in encoder coordinate
<para><img src="../media/AxisData_Encoder_coord.RCON.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetActualPositionMachineCoord(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets actual position in machine coordinate at the specified axis index.
</summary>
            <example> This sample code shows how to call the GetActualPositionMachineCoord() method.
<para> Dim objAxis As New CAxis </para><para> Dim dblValue As Double </para><para> Dim enAxisEnum As AxisIndexEnum </para><para> dblValue = objAxis.GetActualPositionMachineCoord(enAxisEnum)	</para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.  </param>
            <returns>A System.Double that represents the actual position in machine coordinate.</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> ACT POSI(MACHINE) - Actual position in machine coordinate
<para><img src="../media/ActualPosition-p4.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetActualPositionProgramCoord(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets actual position in program coordinate at the specified axis index.
</summary>
            <example> This sample code shows how to call the GetActualPositionProgramCoord() method.
<para> Dim objAxis As New CAxis </para><para> Dim dblValue As Double </para><para> Dim enAxisEnum As AxisIndexEnum </para><para> dblValue = objAxis.GetActualPositionProgramCoord(enAxisEnum) </para></example>
            <param name="enAxisIndex">Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>A System.Double that represents the actual position in program coordinate.</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> ACT POSI - Actual position in program coordinate
<para><img src="../media/MC.ActualPosition.P1.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetAxisName(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets axis name for the specified axis index
</summary>
            <example> This sample code shows how to call the GetAxisName() method.
<para> Dim objAxis As New CAxis </para><para> Dim strValue As String </para><para> Dim enAxisEnum As AxisIndexEnum </para><para> strValue = objAxis.GetAxisName(enAxisEnum) </para></example>
            <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>A System.String that represents the name of the specified axis index.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetAxisLoad(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets axis load at the specified axis index.
</summary>
            <example> This sample code shows how to call the GetAxisLoad() method.
<para> Dim objAxis As New CAxis </para><para> Dim intValue As Integer </para><para> Dim enAxisEnum As AxisIndexEnum </para><para> intValue = objAxis.GetAxisLoad(enAxisEnum) </para></example>
            <param name="enAxisIndex">Axis index.  Values for this parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>A System.Int32 value that represents the percentage of load at the specified axis index.</returns>
            <DataUnit>
Percentage
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure>Percentage of load for X,Y,Z,B,and Ys axis.
<para> AUTO OPERATION - NC AXIS DATA - MAGNI. 	</para><img src="../media/MC.Axis.Load.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetAxisType(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
            <summary>
Gets axis type for the given axis index.
</summary>
            <example> This sample code shows how to call the GetAxisType() method.
<para> Dim objAxis As New CAxis </para><para> Dim enValue As AxisTypeEnum </para><para> Dim enAxisEnum As AxisIndexEnum </para><para> enValue = objAxis.GetAxisType(enAxisEnum) </para></example>
            <param name="enAxisIndex">Axis index.  Values for this parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
            <returns>An Okuma.CMDATAPI.Enumerations.AxisTypeEnum enumeration value that represents the axis type for the given axis index</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetFeedHold">
            <summary>
Gets the axis feeding status.
</summary>
            <example> This sample code shows how to call the GetFeedHold() method.
<para> Dim objAxis As New CAxis </para><para> Dim blnValue As Boolean</para><para> blnValue = objAxis.GetFeedHold </para></example>
            <returns>A System.Boolean value.  It returns true if axis is in stop state, otherwise, false</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> G01 - Machine is in feed hold state.
<para><img src="../media/RunningStatus-G01.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetFeedrateType">
            <summary>
Gets feedrate type that is currently active in the system
</summary>
            <example> This sample code shows how to call the GetFeedrateType() method.
<para> Dim objAxis As New CAxis </para><para> Dim enValue As FeedrateTypeEnum </para><para> enValue = objAxis.GetFeedrateType() </para></example>
            <returns>An Okuma.CMDATAPI.Enumerations.FeedrateTypeEnum enumeration value that represents an active feedrate type</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetActualFeedrate(Okuma.CMDATAPI.Enumerations.FeedrateTypeEnum)">
            <summary>
Gets the actual feedrate carried out by the system for the given feedrate type.  
</summary>
            <example> This sample code shows how to call the GetActualFeedrate() method.
<code escaped="true" language="vbnet">
 Dim objAxis As New CAxis 
 Dim curFeedrateEnum As FeedrateTypeEnum 
 Dim dblValue As Double 
 dblValue = objAxis.GetActualFeedrate(curFeedrateEnum) 	
</code></example>
            <param name="enFeedrate">Type of feedrate that feed rate data to be returned.  Values for this parameter come from the Okuma.CMDATAPI.Enumerations.FeedrateTypeEnum enumeration.</param>
            <returns>A System.Double value that represents the actual feedrate carried out by the system at the specified feedrate type.</returns>
            <DataUnit>
Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> BLOCK DATA - Fr/Fm - Actual feedrate per revolution/per minute
<para><img src="../media/blockdata.jpg" /></para></Figure>
            <remarks>
For feedrate type mm/rev, the system returns a large number (2147483.647) when NC feedrate value is overflow.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetCommandFeedrate(Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum)">
            <summary>
Gets command feedrate from the program for the given order.
</summary>
            <example> This sample code shows how to call the GetCommandFeedrate() method.
<para> Dim objAxis As New CAxis </para><para> Dim dblValue As Double </para><para> Dim enCommandFeedrateEnum As CommandFeedrateOrderEnum </para><para> dblValue = objAxis.GetCommandFeedrate(enCommandFeedrateEnum) </para></example>
            <param name="enValue">The specified order in which the command feedrate is carried out by the program.  Values for this parameter come from the Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum enumeration.</param>
            <returns>A System.Double value that represents the feedrate for the specified order.</returns>
            <DataUnit>
	Default unit is in mm.  Other unit can be set by calling SetDataUnit method
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> BLOCK DATA - F - Command feedrate
<para><img src="../media/blockdata.jpg" /></para></Figure>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CAxis">
            <summary>
Class provides information about axes in the system which relates position, feed rate, load, and feed status.
</summary>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolInUse(System.Int32,System.Boolean)">
            <summary>
                <para>
Fixed Address ATC: Set a registered tool to be a selected tool (USE state) for a given pot number.
</para>
                <para>
Memory Random ATC: Set a pot number to be a selected Pot (USE state) for a given tool number.
</para>
            </summary>
            <example> This sample shows how to call the SetToolInUse method.
<para>Dim objTools2 As New CTools2  </para><para>Dim intToolPotNo As Int32 </para><para>Dim blnValue As Boolean </para><para>objTools2.SetToolInUse(intToolPotNo, blnValue) </para></example>
            <param name="intToolPotNo">Pot/Tool Number.</param>
            <param name="blnValue"> True if it is a selected Pot/Tool, otherwise false.</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <remarks>
                <para>Fixed Address ATC:
Only one registered tool in the same tool group number can be set to USE state at at time.
</para>
            </remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - POT - USE
<para> Fixed ATC</para><img src="../media/MC.TOOLID.PotToolTable.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.PotToolTable.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolNoseDiameter(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets tool nose diameter value by adding the input value to the existing data at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets tool nose diameter value by adding the input value to the existing data at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the AddToolNoseDiameter method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.AddToolNoseDiameter(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">Tool nose diameter value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
A NotSupportedException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an nose diameter parameter.
</para>
                <para>
Table of tool types having nose diameter data:
<list type="table"><listheader><term>Tool Type</term><description>Yes/No</description></listheader><item><term>Center Drill</term><description>No</description></item><item><term>Drill</term><description>No</description></item><item><term>Tap</term><description>Yes</description></item><item><term>Reamer</term><description>Yes</description></item><item><term>Boring Bar</term><description>Yes</description></item><item><term>End Mill</term><description>No</description></item><item><term>Face Mill</term><description>No</description></item><item><term>Chamfering Cutter</term><description>Yes</description></item><item><term>Ball End</term><description>No</description></item><item><term>Helical Tap</term><description>No</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - NOSE ND
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolNoseDiameter(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets tool nose diameter value at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets tool nose diameter value at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the SetToolNoseDiameter method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double</para><para>		objTools2.SetToolLife(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">Tool nose diameter  value to be set</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
A NotSupportedException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an nose diameter parameter.
</para>
                <para>
Table of tool types having nose diameter data:
<list type="table"><listheader><term>Tool Type</term><description>Yes/No</description></listheader><item><term>Center Drill</term><description>No</description></item><item><term>Drill</term><description>No</description></item><item><term>Tap</term><description>Yes</description></item><item><term>Reamer</term><description>Yes</description></item><item><term>Boring Bar</term><description>Yes</description></item><item><term>End Mill</term><description>No</description></item><item><term>Face Mill</term><description>No</description></item><item><term>Chamfering Cutter</term><description>Yes</description></item><item><term>Ball End</term><description>No</description></item><item><term>Helical Tap</term><description>No</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - NOSE  ND
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolDiameter(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets tool diameter value by adding the input value to the existing data at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets tool diameter value by adding the input value to the existing data at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the AddToolDiameter method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.AddToolDiameter(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">Tool diameter value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - DIAMETER D
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolDiameter(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets tool diameter value at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets tool diameter value at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the SetToolDiameter method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.SetToolDiameter(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">Tool diameter value to be set</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - DIAMETER D
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolAngle(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets tool nose angle value by adding the input value to the existing data at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets tool nose angle value by adding the input value to the existing data at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the AddToolAngle method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.AddToolAngle(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">Tool nose angle value to be added</param>
            <DataUnit> 
Degree
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
A NotSupportedException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an angle parameter.
</para>
                <para>
Table of tool types having angle data:
<list type="table"><listheader><term>Tool Type</term><description>Yes/No</description></listheader><item><term>Center Drill</term><description>Yes</description></item><item><term>Drill</term><description>Yes</description></item><item><term>Tap</term><description>Yes</description></item><item><term>Reamer</term><description>Yes</description></item><item><term>Boring Bar</term><description>Yes</description></item><item><term>End Mill</term><description>No</description></item><item><term>Face Mill</term><description>No</description></item><item><term>Chamfering Cutter</term><description>Yes</description></item><item><term>Ball End</term><description>No</description></item><item><term>Helical Tap</term><description>No</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - ANGLE A
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolAngle(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets tool nose angle value at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets tool nose angle value at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the SetToolAngle method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>	    objTools2.SetToolAngle(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">Tool nose angle value to be set</param>
            <DataUnit> 
Degree
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
A NotSupportedException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an angle parameter.
</para>
                <para>
Table of tool types having angle data:
<list type="table"><listheader><term>Tool Type</term><description>Yes/No</description></listheader><item><term>Center Drill</term><description>Yes</description></item><item><term>Drill</term><description>Yes</description></item><item><term>Tap</term><description>Yes</description></item><item><term>Reamer</term><description>Yes</description></item><item><term>Boring Bar</term><description>Yes</description></item><item><term>End Mill</term><description>No</description></item><item><term>Face Mill</term><description>No</description></item><item><term>Chamfering Cutter</term><description>Yes</description></item><item><term>Ball End</term><description>No</description></item><item><term>Helical Tap</term><description>No</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - ANGLE A
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolType(System.Int32,Okuma.CMDATAPI.Enumerations.ToolTypeEnum)">
            <summary>
                <para>
Fixed Address ATC: Sets the tool type at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets the tool type at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the SetToolType method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim enValue As ToolTypeEnum</para><para>		objTools2.SetToolType(intToolPotNo, enValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="enValue">Tool type value to be set. Values of parameter come from the Okuma.CMDATAPI.Enumerations.ToolTypeEnum enumeration.  </param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - SHAPE
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddCutterRCompWearOffset(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets the tool cutter radius compensation wear offset value by adding the input value to the existing data at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets the tool cutter radius compensation wear offset value by adding the input value to the existing data at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the AddCutterRCompWearOffset method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.AddCutterRCompWearOffset(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R WEAR
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetCutterRCompWearOffset(System.Int32,System.Double)">
set tool cutter radius compensation wear effects by data set unit
<summary><para>
Fixed Address ATC: Sets the tool cutter radius compensation wear offset value at the specified pot index.
</para><para>
Memory Random ATC: Sets the tool cutter radius compensation wear offset value at the specified tool index.
</para></summary><example> This sample shows how to call the SetCutterRCompWearOffset method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools.SetCutterRCompWearOffset(intToolPotNo, dblValue) </para></example><param name="intToolPotNo">Tool/Pot number</param><param name="dblValue">offset value to be set</param><DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R WEAR
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolLengthWearOffset(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets the tool length geometry wear offset value by adding the input value to the existing data at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets the tool length geometry wear offset value by adding the input value to the existing data at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the AddToolLengthWearOffset method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.AddToolLengthWearOffset(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH WEAR
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolLengthWearOffset(System.Int32,System.Double)">
set tool length wear offset effects by data set unit
<summary><para>
Fixed Address ATC: Sets the tool length wear offset value at the specified pot index.
</para><para>
Memory Random ATC: Sets the tool length wear offset value at the specified tool index.
</para></summary><example> This sample shows how to call the SetToolLengthWearOffset method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.SetToolLengthWearOffset(intToolPotNo, dblValue) </para></example><param name="intToolPotNo">Tool/Pot number</param><param name="dblValue">offset value to be set</param><DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH WEAR
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddCutterRCompOffset3(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets the tool cutter radius compensation 3 value by adding the input value to the existing data at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets the tool cutter radius compensation 3 value by adding the input value to the existing data at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the AddCutterRCompOffset3 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.AddCutterRCompOffset3(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 3
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddCutterRCompOffset2(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets the tool cutter radius compensation 2 value by adding the input value to the existing data at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets the tool cutter radius compensation 2 value by adding the input value to the existing data at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the AddCutterRCompOffset2 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.AddCutterRCompOffset2(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 2
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddCutterRCompOffset1(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets the tool cutter radius compensation 1 value by adding the input value to the existing data at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets the tool cutter radius compensation 1 value by adding the input value to the existing data at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the AddCutterRCompOffset1 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.AddCutterRCompOffset1(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R COMP 1
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetCutterRCompOffset3(System.Int32,System.Double)">
set tool cutter radius compensation 3 effects by data set unit
<summary><para>
Fixed Address ATC: Sets the tool cutter radius compensation 3 value at the specified pot index.
</para><para>
Memory Random ATC: Sets the tool cutter radius compensation 3 value at the specified tool index.
</para></summary><example> This sample shows how to call the SetCutterRCompOffset3 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools.SetCutterRCompOffset3(intToolPotNo, dblValue) </para></example><param name="intToolPotNo">Tool/Pot number</param><param name="dblValue">offset value to be set</param><DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 3
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetCutterRCompOffset2(System.Int32,System.Double)">
set tool cutter radius compensation 2 effects by data set unit
<summary><para>
Fixed Address ATC: Sets the tool cutter radius compensation 2 value at the specified pot index.
</para><para>
Memory Random ATC: Sets the tool cutter radius compensation 2 value at the specified tool index.
</para></summary><example> This sample shows how to call the SetCutterRCompOffset2 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools.SetCutterRCompOffset2(intToolPotNo, dblValue) </para></example><param name="intToolPotNo">Tool/Pot number</param><param name="dblValue">offset value to be set</param><DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 2
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetCutterRCompOffset1(System.Int32,System.Double)">
set tool cutter radius compensation 1 effects by data set unit
<summary><para>
Fixed Address ATC: Sets the tool cutter radius compensation 1 value at the specified pot index.
</para><para>
Memory Random ATC: Sets the tool cutter radius compensation 1 value at the specified tool index.
</para></summary><example> This sample shows how to call the SetCutterRCompOffset1 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools.SetCutterRCompOffset1(intToolPotNo, dblValue) </para></example><param name="intToolPotNo">Tool/Pot number</param><param name="dblValue">offset value to be set</param><DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R COMP 1
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.CalToolLengthOffset3(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Determines the tool length geometry offset 3 value at the specified pot number based on the calculation made for the input data.
</para>
                <para>
Memory Random ATC: Determines the tool length geometry offset 3 value at the specified tool number based on the calculation made for the input data.
</para>
            </summary>
            <example> This sample shows how to call the CalToolLengthOffset3 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.CalToolLengthOffset3(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">Input data. Actual position value to be calculated from</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 3
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.CalToolLengthOffset2(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Determines the tool length geometry offset 2 value at the specified pot number based on the calculation made for the input data.
</para>
                <para>
Memory Random ATC: Determines the tool length geometry offset 2 value at the specified tool number based on the calculation made for the input data.
</para>
            </summary>
            <example> This sample shows how to call the CalToolLengthOffset2 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.CalToolLengthOffset2(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">Input data. Actual position value to be calculated from</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 2
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.CalToolLengthOffset1(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Determines the tool length geometry offset 1 value at the specified pot number based on the calculation made for the input data.
</para>
                <para>
Memory Random ATC: Determines the tool length geometry offset 1 value at the specified tool number based on the calculation made for the input data.
</para>
            </summary>
            <example> This sample shows how to call the CalToolLengthOffset1 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.CalToolLengthOffset1(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">Input data. Actual position value to be calculated from</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH OFFSET 1
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolLengthOffset3(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets the tool length geometry offset 3 value by adding the input value to the existing data at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets the tool length geometry offset 3 value by adding the input value to the existing data at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the AddToolLengthOffset3 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.AddToolLengthOffset3(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 3
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolLengthOffset2(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets the tool length geometry offset 2 value by adding the input value to the existing data at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets the tool length geometry offset 2 value by adding the input value to the existing data at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the AddToolLengthOffset2 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.AddToolLengthOffset2(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 2
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolLengthOffset1(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets the tool length geometry offset 1 value by adding the input value to the existing data at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets the tool length geometry offset 1 value by adding the input value to the existing data at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the AddToolLengthOffset1 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.AddToolLengthOffset1(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">offset value to be added</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH OFFSET 1
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolLengthOffset3(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets the tool length offset 3 value at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets the tool length offset 3 value at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the SetToolLengthOffset3 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.SetToolLengthOffset3(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">offset value to be set</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 3
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolLengthOffset2(System.Int32,System.Double)">
            <summary>
                <para>
Fixed Address ATC: Sets the tool length offset 2 value at the specified pot index.
</para>
                <para>
Memory Random ATC: Sets the tool length offset 2 value at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the SetToolLengthOffset2 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.SetToolLengthOffset2(intToolPotNo, dblValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="dblValue">offset value to be set</param>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 2
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolLengthOffset1(System.Int32,System.Double)">
set tool length offset 1 effects by data set unit
<summary><para>
Fixed Address ATC: Sets the tool length offset 1 value at the specified pot index.
</para><para>
Memory Random ATC: Sets the tool length offset 1 value at the specified tool index.
</para></summary><example> This sample shows how to call the SetToolLengthOffset1 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		objTools2.SetToolLengthOffset1(intToolPotNo, dblValue) </para></example><param name="intToolPotNo">Tool/Pot number</param><param name="dblValue">offset value to be set</param><DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit><exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception><exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception><Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH OFFSET 1
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolLifeRemaining(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Sets remaining tool life at the specified pot number.
</para>
                <para>
Memory Random ATC: Sets remaining tool life at the specified tool number.
</para>
            </summary>
            <example> This sample shows how to call the SetToolLifeRemaining method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim intValue As Integer</para><para>		objTools2.SetToolLifeRemaining(intToolPotNo, intValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="intValue">Remaining tool life to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
                <para>
The data unit depends on the current setting of management mode:  
</para>
                <list type="table">
                    <listheader>
                        <term>Management Mode</term>
                        <description>Unit</description>
                    </listheader>
                    <item>
                        <term>Not Mode</term>
                        <description>Not applicable</description>
                    </item>
                    <item>
                        <term>Time (Spare)</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Time</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Count (Spare)</term>
                        <description>Pieces</description>
                    </item>
                    <item>
                        <term>Count</term>
                        <description>Pieces</description>
                    </item>
                </list>
            </DataUnit>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - LEFT TIME
<para> Fixed ATC</para><img src="../media/MC.TOOLID.Life.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.Life.RandomATC.jpg" /></Figure>
            <remarks>
Tool must be in management mode other than NOT MODE. Otherwise, an ApplicationException will be generated.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolLife(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Sets tool life at the specified pot number.
</para>
                <para>
Memory Random ATC: Sets tool life at the specified tool number.
</para>
            </summary>
            <example> This sample shows how to call the SetToolLife method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim intValue As Integer</para><para>		objTools2.SetToolLife(intToolPotNo, intValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="intValue">tool life to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
                <para>
The data unit depends on the current setting of tool life's management mode:  
</para>
                <list type="table">
                    <listheader>
                        <term>Management Mode</term>
                        <description>Unit</description>
                    </listheader>
                    <item>
                        <term>Not Mode</term>
                        <description>Not applicable</description>
                    </item>
                    <item>
                        <term>Time (Spare)</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Time</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Count (Spare)</term>
                        <description>Pieces</description>
                    </item>
                    <item>
                        <term>Count</term>
                        <description>Pieces</description>
                    </item>
                </list>
            </DataUnit>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - SET TIME
<para> Fixed ATC</para><img src="../media/MC.TOOLID.Life.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.Life.RandomATC.jpg" /></Figure>
            <remarks>
Tool must be in management mode other than NOT MODE. Otherwise, an ApplicationException will be generated.
</remarks>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetMode(System.Int32,Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum)">
            <summary>
                <para>
Fixed Address ATC: Sets tool life management mode at the specified pot number.
</para>
                <para>
Memory Random ATC: Sets tool life management mode at the specified tool number.
</para>
            </summary>
            <example> This sample shows how to call the SetMode method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim enValue As ToolLifeModeEnum </para><para>	    objTools2.SetMode(intToolPotNo, enValue) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <param name="enValue">Tool Life management mode to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - MANAGE MODE
<para> Fixed ATC</para><img src="../media/MC.TOOLID.Life.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.Life.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetAdjustmentTool(System.Int32,System.Boolean)">
            <summary>
                <para>
Fixed Address ATC: Set a registered tool as adjustment tool for a given pot number.
</para>
                <para>
Memory Random ATC: Set a registered tool as adjustment tool for a given tool number.
</para>
            </summary>
            <example> This sample shows how to call the SetAdjustmentTool method.
<para>Dim objTools2 As New CTools2  </para><para>Dim intToolPotNo As Int32 </para><para>Dim blnValue As Boolean </para><para>objTools2.SetAdjustmentTool(intToolPotNo, blnValue) </para></example>
            <param name="intToolPotNo">Tool/Pot Number.</param>
            <param name="blnValue"> True if it is a adjustment tool, otherwise false.</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - ADJ TOOL
<para> Fixed ATC</para><img src="../media/MC.TOOLID.PotToolTable.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.PotToolTable.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetStandardTool(System.Int32,System.Boolean)">
            <summary>
                <para>
Fixed Address ATC: Set a registered tool as standard tool for a given pot number.
</para>
                <para>
Memory Random ATC: Set a registered tool as standard tool for a given tool number.
</para>
            </summary>
            <example> This sample shows how to call the SetStandardTool method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim blnValue As Boolean </para><para>	    objTools2.SetMode(intToolPotNo, blnValue) </para></example>
            <param name="intToolPotNo">Tool/Pot Number.</param>
            <param name="blnValue"> True if it is a standard tool, otherwise false.</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - STD TOOL
<para> Fixed ATC</para><img src="../media/MC.TOOLID.PotToolTable.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.PotToolTable.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetDataUnit(Okuma.CMDATAPI.Enumerations.DataUnitEnum)">
            <summary>
Sets current data unit for this class instance.
</summary>
            <example> This sample code shows how to call the SetDataUnit() method.
<para> Dim objTools2 As New CTools2 </para><para> Dim enDataUnit As DataUnitEnum = DataUnitEnum.Unit_Inch </para><para>	objTools2.SetDataUnit(enDataUnit) </para></example>
            <param name="enDataUnit">Data Unit to be set</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
If applicable, this setting is applied to data in this class instance only, not for NC Data Unit.
For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, 
then NC data will be converted to inch and vice versa.
</remarks>
            <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. 
<para><img src="../media/MC.Parameter.DataUnit.jpg" /></para></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolNo(System.Int32)">
            <summary>
                <para>
Memory Random ATC: Gets tool number at the specified pot number.
Pot 0 is not valid for this function.
</para>
            </summary>
            <example> This sample shows how to call the GetToolNo method.
<para>Dim objTools2 As New CTools2  </para><para>Dim intPotNo As Int32 </para><para>Dim intValue As Int32 </para><para>		intValue = objTools2.GetToolNo(intPotNo) </para></example>
            <returns>A System.Int32 value that represents the tool number at the specified pot number.</returns>
            <param name="intPotNo">Pot number.  Pot number is ranging from 1 to max. pot number.</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>*/
<remarks><para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Random ATC specification</term><description>Valid</description></item></list></para></remarks><Figure><para> TOOL DATA - TOOL ID INFORMATION - POT-TOOL TABLE - POT NO.
<img src="../media/MC.ToolID.PotToolTable.RandomATC.jpg" /></para><para> TOOL DATA - TOOL ID INFORMATION - TOOL-POT TABLE - POT NO.
<img src="../media/MC.ToolID.ToolPot.RandomATC.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetPotNo(System.Int32)">
            <summary>
                <para>
Memory Random ATC: Gets pot number at the specified tool number registered in Tool-Pot table.  
Tool registered (Actual Tool number) in Pot 0 is not valid for this function.
</para>
            </summary>
            <example> This sample shows how to call the GetPotNo method.
<para>Dim objTools2 As New CTools2  </para><para>Dim intValue As Int32 </para><para>intValue = objTools2.GetPotNo(intToolNo) </para></example>
            <returns>A System.Int32 value that represenst the pot number at the specified tool number registered in Tool-Pot table.</returns>
            <param name="intToolNo">Tool number</param>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>*/
<remarks><para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>Random ATC specification</term><description>Valid</description></item></list></para></remarks><Figure><para> TOOL DATA - TOOL ID INFORMATION - POT-TOOL TABLE - POT NO.
<img src="../media/MC.ToolID.PotToolTable.RandomATC.jpg" /></para><para> TOOL DATA - TOOL ID INFORMATION - TOOL-POT TABLE - POT NO.
<img src="../media/MC.ToolID.ToolPot.RandomATC.jpg" /></para></Figure></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetMaxTools">
            <summary>
                <para>
Memory Random ATC: Gets number of tool groups
</para>
            </summary>
            <example> This sample shows how to call the GetMaxTools method.
<para> Dim objTools2 As New CTools2  </para><para> Dim intValue As Integer </para><para> intValue = objTools2.GetMaxTools </para></example>
            <returns>A System.Int32 value that represents the number of tool groups.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>*/
</member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.IsRandomATC">
            <summary>
                <para>
Determine if the 8 Digits Tool-ID is configured with Memory Random ATC type
</para>
            </summary>
            <example> This sample shows how to call the IsRandomATC method.
<para>txtToolID_RandomATC.Text = objTools2.IsRandomATC() </para></example>
            <returns>A System.Boolean Value.  True if it is in use, otherwise false</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure />
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCarrierStatus(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets tool data carrrier status for the specified pot number.
</para>
                <para>
Memory Random ATC: Gets tool data carrrier status for the specified tool number.
</para>
            </summary>
            <example> This sample shows how to call the GetCarrierStatus method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim enValue As CarrierStatusEnum </para><para>		enValue = objTools2.GetCarrierStatus(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>An Okuma.CMDATAPI.Enumerations.CarrierStatusEnum enumeration value that represents the tool data carrrier status. </returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>*/
</member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetMaxPots">
            <summary>
 Gets number of pots configured for this system.
 </summary>
            <example> This sample shows how to call the GetMaxPots method.
<para> Dim objTools2 As New CTools2  </para><para> Dim intValue As Int32 </para><para> intValue = objTools2.GetMaxPots </para></example>
            <returns>A System.Int32 value that represenst the number of pots configured for this system.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>*/
</member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolNoseDiameter(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets tool nose diameter at the specified pot indexes
</para>
                <para>
Memory Random ATC: Gets tool nose diameter at the specified tool indexes
</para>
            </summary>
            <example> This sample shows how to call the GetToolNoseDiameter method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intFromToolPotIndex As Integer </para><para>		Dim intToToolPotIndex As Integer </para><para>		Dim dblValues() As Double </para><para>		dblValues = objTools2.GetToolNoseDiameter(intFromToolPotIndex, intToToolPotIndex) </para></example>
            <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
            <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
            <returns>An array list of System.Double value that represents tool nose diameter at the specified tool indexes</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - NOSE ND
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolNoseDiameter(System.Int32)">
            <overloads>This function has multiple overload methods to get tool nose diameter value.</overloads>
            <summary>
                <para>
Fixed Address ATC: Gets tool nose diameter at the specified pot index
</para>
                <para>
Memory Random ATC: Gets tool nose diameter at the specified tool index
</para>
            </summary>
            <example> This sample shows how to call the GetToolNoseDiameter method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools2.GetToolNoseDiameter(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Double value that represents the tool nose diameter at the specified tool/pot index.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
A NotSupportedException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an nose diameter parameter.
</para>
                <para>
Table of tool types having nose diameter data:
<list type="table"><listheader><term>Tool Type</term><description>Yes/No</description></listheader><item><term>Center Drill</term><description>No</description></item><item><term>Drill</term><description>No</description></item><item><term>Tap</term><description>Yes</description></item><item><term>Reamer</term><description>Yes</description></item><item><term>Boring Bar</term><description>Yes</description></item><item><term>End Mill</term><description>No</description></item><item><term>Face Mill</term><description>No</description></item><item><term>Chamfering Cutter</term><description>Yes</description></item><item><term>Ball End</term><description>No</description></item><item><term>Helical Tap</term><description>No</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - NOSE ND
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolDiameter(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets tool diameter at the specified pot indexes
</para>
                <para>
Memory Random ATC: Gets tool diameter at the specified tool indexes
</para>
            </summary>
            <example> This sample shows how to call the GetToolDiameter method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intFromToolPotIndex As Integer </para><para>		Dim intToToolPotIndex As Integer </para><para>		Dim dblValues() As Double </para><para>		dblValues = objTools2.GetToolDiameter(intFromToolPotIndex, intToToolPotIndex) </para></example>
            <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
            <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
            <returns>An array list of System.Double value that represents tool diameter at the specified tool indexes.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
A NotSupportedException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an nose diameter parameter.
</para>
                <para>
Table of tool types having nose diameter data:
<list type="table"><listheader><term>Tool Type</term><description>Yes/No</description></listheader><item><term>Center Drill</term><description>No</description></item><item><term>Drill</term><description>No</description></item><item><term>Tap</term><description>Yes</description></item><item><term>Reamer</term><description>Yes</description></item><item><term>Boring Bar</term><description>Yes</description></item><item><term>End Mill</term><description>No</description></item><item><term>Face Mill</term><description>No</description></item><item><term>Chamfering Cutter</term><description>Yes</description></item><item><term>Ball End</term><description>No</description></item><item><term>Helical Tap</term><description>No</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - DIAMETER D
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolDiameter(System.Int32)">
            <overloads>This function has multiple overload methods to get tool diameter value.</overloads>
            <summary>
                <para>
Fixed Address ATC: Gets tool diameter at the specified pot index
</para>
                <para>
Memory Random ATC: Gets tool diameter at the specified tool index
</para>
            </summary>
            <example> This sample shows how to call the GetToolDiameter method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools2.GetToolDiameter(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Double value that represents tool diameter at the specified tool index.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - DIAMETER D
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolAngle(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets tool nose angle at the specified pot indexes
</para>
                <para>
Memory Random ATC: Gets tool nose angle at the specified tool indexes
</para>
            </summary>
            <example> This sample shows how to call the GetToolAngle method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intFromToolPotIndex As Integer </para><para>		Dim intToToolPotIndex As Integer </para><para>		Dim dblValues() As Double </para><para>		dblValues = objTools2.GetToolAngle(intFromToolPotIndex, intToToolPotIndex) </para></example>
            <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
            <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
            <returns>An array list of System.Double value that represents tool nose angle at the specified tool indexes.</returns>
            <DataUnit> 
Degree
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
A NotSupportedException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an angle parameter.
</para>
                <para>
Table of tool types having angle data:
<list type="table"><listheader><term>Tool Type</term><description>Yes/No</description></listheader><item><term>Center Drill</term><description>Yes</description></item><item><term>Drill</term><description>Yes</description></item><item><term>Tap</term><description>Yes</description></item><item><term>Reamer</term><description>Yes</description></item><item><term>Boring Bar</term><description>Yes</description></item><item><term>End Mill</term><description>No</description></item><item><term>Face Mill</term><description>No</description></item><item><term>Chamfering Cutter</term><description>Yes</description></item><item><term>Ball End</term><description>No</description></item><item><term>Helical Tap</term><description>No</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - ANGLE A
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolAngle(System.Int32)">
            <overloads>This function has multiple overload methods to get tool nose angle value.</overloads>
            <summary>
                <para>
Fixed Address ATC: Gets tool nose angle at the specified pot index
</para>
                <para>
Memory Random ATC: Gets tool nose angle at the specified tool index
</para>
            </summary>
            <example> This sample shows how to call the GetToolAngle method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim dlbValue As Double  </para><para>		Dim intToolPotNo As Integer </para><para>	    dblValue = objTools2.GetToolAngle(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Double value that represents tool nose angle at the specified tool/pot index.</returns>
            <DataUnit> 
Degree
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
A NotSupportedException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an angle parameter.
</para>
                <para>
Table of tool types having angle data:
<list type="table"><listheader><term>Tool Type</term><description>Yes/No</description></listheader><item><term>Center Drill</term><description>Yes</description></item><item><term>Drill</term><description>Yes</description></item><item><term>Tap</term><description>Yes</description></item><item><term>Reamer</term><description>Yes</description></item><item><term>Boring Bar</term><description>Yes</description></item><item><term>End Mill</term><description>No</description></item><item><term>Face Mill</term><description>No</description></item><item><term>Chamfering Cutter</term><description>Yes</description></item><item><term>Ball End</term><description>No</description></item><item><term>Helical Tap</term><description>No</description></item></list></para>
            </remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - ANGLE A
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolType(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets tool type for the specified pot indexes
</para>
                <para>
Memory Random ATC: Gets tool type for the specified tool indexes
</para>
            </summary>
            <example> This sample shows how to call the GetToolType method
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intFromToolPotIndex As Integer </para><para>		Dim intToToolPotIndex As Integer </para><para>		Dim enValues() As ToolTypeEnum </para><para>		enValues = objTools2.GetToolType(intFromToolPotIndex, intToToolPotIndex) </para></example>
            <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
            <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
            <returns>An array list of Okuma.CMDATAPI.Enumerations.ToolTypeEnum enumeration value that represents the tool type for the specified tool/pot indexes</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - SHAPE
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolType(System.Int32)">
            <overloads>This function has multiple overload methods to get tool type.</overloads>
            <summary>
                <para>
Fixed Address ATC: Gets tool type for the specified pot index
</para>
                <para>
Memory Random ATC: Gets tool type for the specified tool index
</para>
            </summary>
            <example> This sample shows how to call the GetToolType method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim enValue As ToolTypeEnum </para><para>		enValue = objTools2.GetToolType(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>An Okuma.CMDATAPI.Enumerations.ToolTypeEnum enumeration that represents the type of tool for the specified tool/pot index.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - SHAPE
<para> Fixed ATC</para><img src="../media/MC.TOOLID.ToolType.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.ToolType.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompWearOffset(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC:  Get the tool cutter radius compensation wear offset at the specified pot indexes.
</para>
                <para>
Memory Random ATC:  Get the tool cutter radius compensation wear offset at the specified tool indexes.
</para>
            </summary>
            <example> This sample shows how to call the GetCutterRCompWearOffset method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intFromToolPotIndex As Integer </para><para>		Dim intToToolPotIndex As Integer </para><para>		Dim dblValues() As Double </para><para>		dblValues = objTools2.GetCutterRCompWearOffset(intFromToolPotIndex, intToToolPotIndex) </para></example>
            <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
            <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
            <returns>An array of System.Double represents the tool cutter radius compensation wear offset at the specified tool/pot indexes.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R WEAR
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompWearOffset(System.Int32)">
            <overloads>This function has multiple overload methods to get tool cutter radius compensation wear offset value.</overloads>
            <summary>
                <para>
Fixed Address ATC: Gets the tool cutter radius compensation wear offset data at the specified pot index
</para>
                <para>
Memory Random ATC: Gets the tool cutter radius compensation wear offset data at the specified tool index
</para>
            </summary>
            <example> This sample shows how to call the GetCutterRCompWearOffset method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools2.GetCutterRCompWearOffset(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Double value that represents the tool cutter radius compensation wear offset data at the specified tool/pot index</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R WEAR
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthWearOffset(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets the tool length geometry wear offset data at the specified pot indexes
</para>
                <para>
Memory Random ATC: Gets the tool length geometry wear offset data at the specified tool indexes
</para>
            </summary>
            <example> This sample shows how to call the GetToolLengthWearOffset method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intFromToolPotIndex As Integer </para><para>		Dim intToToolPotIndex As Integer </para><para>		Dim dblValues() As Double </para><para>		dblValues = objTools2.GetToolLengthWearOffset(intFromToolPotIndex, intToToolPotIndex) </para></example>
            <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
            <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
            <returns>An array list of System.Double value that represents the tool length geometry wear offset data at the specified tool/pot indexes.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH WEAR
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthWearOffset(System.Int32)">
            <overloads>This function has multiple overload methods to get tool length geometry wear offset value.</overloads>
            <summary>
                <para>
Fixed Address ATC: Gets the tool length geometry wear offset data at the specified pot index
</para>
                <para>
Memory Random ATC: Gets the tool length geometry wear offset data at the specified tool index
</para>
            </summary>
            <example> This sample shows how to call the GetToolLengthWearOffset method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools2.GetToolLengthWearOffset(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Double value that represents the tool length geometry wear offset data at the specified tool/pot index.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH WEAR
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompOffset3(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets the tool cutter radius compensation 3 data at the specified pot indexes
</para>
                <para>
Memory Random ATC: Gets the tool cutter radius compensation 3 data at the specified tool indexes
</para>
            </summary>
            <example> This sample shows how to call the GetCutterRCompOffset3 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intFromToolPotIndex As Integer </para><para>		Dim intToToolPotIndex As Integer </para><para>		Dim dblValues() As Double </para><para>		dblValues = objTools2.GetCutterRCompOffset3(intFromToolPotIndex, intToToolPotIndex) </para></example>
            <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
            <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
            <returns>An array list of System.Double value that represents the tool cutter radius compensation 3 data at the specified tool/pot indexes</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 3
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompOffset3(System.Int32)">
            <overloads>This function has multiple overload methods to get tool cutter radius compensation 3 value.</overloads>
            <summary>
                <para>
Fixed Address ATC: Gets the tool cutter radius compensation 3 data at the specified pot index
</para>
                <para>
Memory Random ATC: Gets the tool cutter radius compensation 3 data at the specified tool index
</para>
            </summary>
            <example> This sample shows how to call the GetCutterRCompOffset3 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools2.GetCutterRCompOffset3(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Double value that represents the tool cutter radius compensation 3 data at the specified tool/pot index</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 3
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompOffset2(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets the tool cutter radius compensation 2 data at the specified pot indexes
</para>
                <para>
Memory Random ATC: Gets the tool cutter radius compensation 2 data at the specified tool indexes
</para>
            </summary>
            <example> This sample shows how to call the GetCutterRCompOffset2 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intFromToolPotIndex As Integer </para><para>		Dim intToToolPotIndex As Integer </para><para>		Dim dblValues() As Double </para><para>		dblValues = objTools2.GetCutterRCompOffset2(intFromToolPotIndex, intToToolPotIndex) </para></example>
            <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
            <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
            <returns>An array list of System.Double value that represents the tool cutter radius compensation 2 data at the specified tool/pot indexes.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 2
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompOffset2(System.Int32)">
            <overloads>This function has multiple overload methods to get tool cutter radius compensation 2 value.</overloads>
            <summary>
                <para>
Fixed Address ATC: Gets the tool cutter radius compensation 2 data at the specified pot index
</para>
                <para>
Memory Random ATC: Gets the tool cutter radius compensation 2 data at the specified tool index
</para>
            </summary>
            <example> This sample shows how to call the GetCutterRCompOffset2 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools2.GetCutterRCompOffset2(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Double value that represents the tool cutter radius compensation 2 data at the specified pot index.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 2
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompOffset1(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets the tool cutter radius compensation 1 data at the specified pot indexes
</para>
                <para>
Memory Random ATC: Gets the tool cutter radius compensation 1 data at the specified tool indexes
</para>
            </summary>
            <example> This sample shows how to call the GetCutterRCompOffset1 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intFromToolPotIndex As Integer </para><para>		Dim intToToolPotIndex As Integer </para><para>		Dim dblValues() As Double </para><para>		dblValues = objTools2.GetCutterRCompOffset1(intFromToolPotIndex, intToToolPotIndex) </para></example>
            <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
            <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
            <returns>An array list of System.Double value that represents the tool cutter radius compensation 1 data at the specified tool/pot indexes.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R COMP 1
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompOffset1(System.Int32)">
            <overloads>This function has multiple overload methods to get tool cutter radius compensation 1 value.</overloads>
            <summary>
                <para>
Fixed Address ATC: Gets the tool cutter radius compensation 1 data at the specified pot index
</para>
                <para>
Memory Random ATC: Gets the tool cutter radius compensation 1 data at the specified tool index
</para>
            </summary>
            <example> This sample shows how to call the GetCutterRCompOffset1 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools2.GetCutterRCompOffset1(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Double value that represents the tool cutter radius compensation 1 data at the specified tool/pot index.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R COMP 1
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthOffset3(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets the tool length geometry offset 3 data at the specified pot indexes
</para>
                <para>
Memory Random ATC: Gets the tool length geometry offset 3 data at the specified tool indexes
</para>
            </summary>
            <example> This sample shows how to call the GetToolLengthOffset3 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intFromToolPotIndex As Integer </para><para>		Dim intToToolPotIndex As Integer </para><para>		Dim dblValues() As Double </para><para>		dblValues = objTools2.GetToolLengthOffset3(intFromToolPotIndex, intToToolPotIndex) </para></example>
            <param name="intFromToolPotIndex">Starting tool/pot index.  Statring tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
            <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
            <returns>An array list of System.Double value that represents the tool length geometry offset 3 data at the specified tool/pot indexes</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 3
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthOffset3(System.Int32)">
            <overloads>This function has multiple overload methods to get tool length geometry offset 3 value.</overloads>
            <summary>
                <para>
Fixed Address ATC: Gets the tool length geometry offset 3 data at the specified pot index
</para>
                <para>
Memory Random ATC: Gets the tool length geometry offset 3 data at the specified tool index
</para>
            </summary>
            <example> This sample shows how to call the GetToolLengthOffset3 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools2.GetToolLengthOffset3(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Double value that represents the tool length geometry offset 3 data at the specified tool/pot index.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 3
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthOffset2(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets the tool length geometry offset 2 data at the specified pot indexes
</para>
                <para>
Memory Random ATC: Gets the tool length geometry offset 2 data at the specified tool indexes
</para>
            </summary>
            <example> This sample shows how to call the GetToolLengthOffset2 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intFromToolPotIndex As Integer </para><para>		Dim intToToolPotIndex As Integer </para><para>		Dim dblValues() As Double </para><para>		dblValues = objTools2.GetToolLengthOffset2(intFromToolPotIndex, intToToolPotIndex) </para></example>
            <param name="intFromToolPotIndex">Starting tool/pot index.  Statring tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
            <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
            <returns>An array list of System.Double value that represents the tool length geometry offset 2 data at the specified tool/pot indexes</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 2
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthOffset2(System.Int32)">
            <overloads>This function has multiple overload methods to get tool length geometry offset 2 value.</overloads>
            <summary>
                <para>
Fixed Address ATC: Gets the tool length geometry offset 2 data at the specified pot index
</para>
                <para>
Memory Random ATC: Gets the tool length geometry offset 2 data at the specified tool index
</para>
            </summary>
            <example> This sample shows how to call the GetToolLengthOffset2 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools2.GetToolLengthOffset2 (intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Double value that represents the tool length geometry offset 2 data at the specified tool/pot index.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 2
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET23.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET23.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthOffset1(System.Int32,System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets the tool length geometry offset 1 data at the specified pot indexes
</para>
                <para>
Memory Random ATC: Gets the tool length geometry offset 1 data at the specified tool indexes
</para>
            </summary>
            <example> This sample shows how to call the GetToolLengthOffset1 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intFromToolPotIndex As Integer </para><para>		Dim intToToolPotIndex As Integer </para><para>		Dim dblValues() As Double </para><para>		dblValues = objTools2.GetToolLengthOffset1(intFromToolPotIndex, intToToolPotIndex) </para></example>
            <param name="intFromToolPotIndex">Starting tool/pot index.  Statring tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
            <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
            <returns>An array list of System.Double value that represents the tool length geometry offset 1 data at the specified tool/pot indexes.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH OFFSET 1
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthOffset1(System.Int32)">
            <overloads>This function has multiple overload methods to get tool length geometry offset 1 value.</overloads>
            <summary>
                <para>
Fixed Address ATC: Gets the tool length geometry offset 1 data at the specified pot index
</para>
                <para>
Memory Random ATC: Gets the tool length geometry offset 1 data at the specified tool index
</para>
            </summary>
            <example> This sample shows how to call the GetToolLengthOffset1 method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim dblValue As Double </para><para>		dblValue = objTools2.GetToolLengthOffset1(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Double value that represents the tool length geometry offset 1 data at the specified tool/pot index.</returns>
            <DataUnit> 
Default unit is in millimeters.  
Other units can be set by calling the SetDataUnit method.
</DataUnit>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH OFFSET 1
<para> Fixed ATC</para><img src="../media/MC.TOOLID.OFFSET1.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.OFFSET1.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLifeRemainingTimeSecond(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets the remaining tool's life for this pot number.  The remaining tool life value is decreased as the machine is cutting part.
</para>
                <para>
Memory Random ATC: Gets the remaining tool's life for this tool number.  The remaining tool life value is decreased as the machine is cutting part.
</para>
            </summary>
            <example> This sample shows how to call the GetToolLifeRemainingTimeSecond method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim intValue As Integer </para><para>		intValue = objTools2.GetToolLifeRemainingTimeSecond(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Int32 value that represents the remaining tool's life for this tool/pot number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
The unit is always in seconds for tool life mode in Time or Time Spare.
</DataUnit>
            <remarks>
If tool is not in Time/Time (Spare) managed mode, then it returns a zero.
</remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - LEFT TIME
<para> Fixed ATC</para><img src="../media/MC.TOOLID.Life.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.Life.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLifeRemaining(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets the remaining tool's life for this pot number.  The remaining tool life value is decreased as the machine is cutting part.
</para>
                <para>
Memory Random ATC: Gets the remaining tool's life for this tool number.  The remaining tool life value is decreased as the machine is cutting part.
</para>
            </summary>
            <example> This sample shows how to call the GetToolLifeRemaining method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim intValue As Integer </para><para>		intValue = objTools2.GetToolLifeRemaining(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Int32 value that represents the remaining tool's life for this tool/pot number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
                <para>
The data unit depends on the current setting of management mode:  
</para>
                <list type="table">
                    <listheader>
                        <term>Management Mode</term>
                        <description>Unit</description>
                    </listheader>
                    <item>
                        <term>Not Mode</term>
                        <description>Not applicable</description>
                    </item>
                    <item>
                        <term>Time (Spare)</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Time</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Count (Spare)</term>
                        <description>Pieces</description>
                    </item>
                    <item>
                        <term>Count</term>
                        <description>Pieces</description>
                    </item>
                </list>
            </DataUnit>
            <remarks>
It will return zero if it is not in managed mode.
</remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - LEFT TIME
<para> Fixed ATC</para><img src="../media/MC.TOOLID.Life.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.Life.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLife(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets tool life at the specified pot number.
</para>
                <para>
Memory Random ATC: Gets tool life at the specified tool number.
</para>
            </summary>
            <example> This sample shows how to call the GetToolLife method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim intValue As Integer </para><para>		intValue = objTools2.GetToolLife(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Int32 value that represents the tool life at the specified tool number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <DataUnit>
                <para>
The data unit depends on the current setting of tool life's management mode:  
</para>
                <list type="table">
                    <listheader>
                        <term>Management Mode</term>
                        <description>Unit</description>
                    </listheader>
                    <item>
                        <term>Not Mode</term>
                        <description>Not applicable</description>
                    </item>
                    <item>
                        <term>Time (Spare)</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Time</term>
                        <description>Minutes</description>
                    </item>
                    <item>
                        <term>Count (Spare)</term>
                        <description>Pieces</description>
                    </item>
                    <item>
                        <term>Count</term>
                        <description>Pieces</description>
                    </item>
                </list>
            </DataUnit>
            <remarks>
It will return 0 if it is not in managed mode.
</remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - SET TIME
<para> Fixed ATC</para><img src="../media/MC.TOOLID.Life.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.Life.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetStatus(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets the tool life status at the specified pot number.  It does not rely on the current setting of tool life managent mode.
</para>
                <para>
Memory Random ATC: Gets the tool life status at the specified tool number.  It does not rely on the current setting of tool life managent mode.
</para>
            </summary>
            <example> This sample shows how to call the GetStatus method.
<para>Dim objTools2 As New CTools2  </para><para>Dim intToolPotNo As Int32</para><para>Dim enValue As ToolLifeStatusEnum</para><para> enValue = objTools2.GetStatus(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>An Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum enumeration value that represents the tool life status at the specified tool/pot number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - STATUS
<para> Fixed ATC</para><img src="../media/MC.TOOLID.Life.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.Life.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetMode(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets tool life management mode at the specified pot number.
</para>
                <para>
Memory Random ATC: Gets tool life management mode at the specified tool number.
</para>
            </summary>
            <example> This sample shows how to call the GetMode method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim enValue As ToolLifeModeEnum </para><para>		enValue = objTools2.GetMode(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>An Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum enumeration value that represents tool life management mode at the specified tool number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - MANAGE MODE
<para> Fixed ATC</para><img src="../media/MC.TOOLID.Life.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.Life.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.IsAdjustmentTool(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Determine if a tool is adjustment tool for a given pot number.
</para>
                <para>
Memory Random ATC: Determine if a tool is adjustment tool for a given tool number.
</para>
            </summary>
            <example> This sample shows how to call the IsAdjustmentTool method.
<para>Dim objTools2 As New CTools2  </para><para>Dim intToolPotNo As Integer </para><para>Dim blnValue As Boolean </para><para>blnValue = objTools2.IsAdjustmentTool(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot number</param>
            <returns>A System.Boolean Value.  True if it is an adjustment tool, otherwise false</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - POT - ADJ TOOL
<para> Fixed ATC</para><img src="../media/MC.TOOLID.PotToolTable.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.PotToolTable.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.IsStandardTool(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Determine if a tool is standard tool for a given pot number.
</para>
                <para>
Memory Random ATC: Determine if a tool is standard tool for a given tool number.
</para>
            </summary>
            <example> This sample shows how to call the IsStandardTool method.
<para>Dim objTools2 As New CTools2  </para><para>Dim intToolPotNo As Integer </para><para>Dim blnValue As Boolean </para><para>blnValue = objTools2.IsStandardTool(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot Number.</param>
            <returns>A System.Boolean Value.  True if tool is a standard tool, otherwise false</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - POT - STD TOOL
<para> Fixed ATC</para><img src="../media/MC.TOOLID.PotToolTable.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.PotToolTable.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolKind(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets tool kind for a given pot number.
</para>
                <para>
Memory Random ATC: Gets tool kind for a given tool number.
</para>
            </summary>
            <example> This sample shows how to call the GetToolKind method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim strValue As String </para><para>		strValue = objTools2.GetToolKind(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot Number.</param>
            <returns>A System.String value that represents tool kind for a given tool number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <remarks>
                <para>
List of available tool kind:
</para>
                <list type="table">
                    <listheader>
                        <term>Tool Kind</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>(Blank)</term>
                        <description>Tool without any attribute</description>
                    </item>
                    <item>
                        <term>M</term>
                        <description>Heavy Tool</description>
                    </item>
                    <item>
                        <term>P</term>
                        <description>Planer Tool</description>
                    </item>
                    <item>
                        <term>PM</term>
                        <description>A heavy planer tool</description>
                    </item>
                    <item>
                        <term>A</term>
                        <description>Attachment Tool</description>
                    </item>
                    <item>
                        <term>AM</term>
                        <description>A heavy attachment tool</description>
                    </item>
                    <item>
                        <term>U</term>
                        <description>An axial tool</description>
                    </item>
                    <item>
                        <term>UM</term>
                        <description>A heavy axial tool</description>
                    </item>
                    <item>
                        <term>N</term>
                        <description>Manual attachement tool</description>
                    </item>
                    <item>
                        <term>B</term>
                        <description>A tool with a lid</description>
                    </item>
                    <item>
                        <term>L</term>
                        <description>Large diameter tool</description>
                    </item>
                    <item>
                        <term>LM</term>
                        <description>Large diameter and heavy tool</description>
                    </item>
                    <item>
                        <term>PL</term>
                        <description>A large diameter planer tool</description>
                    </item>
                    <item>
                        <term>PLM</term>
                        <description>A heavy and large diameter planer tool</description>
                    </item>
                    <item>
                        <term>AL</term>
                        <description>A large diameter attachement tool</description>
                    </item>
                    <item>
                        <term>ALM</term>
                        <description>A heavy and large diameter attachement tool</description>
                    </item>
                    <item>
                        <term>UL</term>
                        <description>A large diameter axial tool</description>
                    </item>
                    <item>
                        <term>ULM</term>
                        <description>A heavy and large diameter axial tool</description>
                    </item>
                    <item>
                        <term>NL</term>
                        <description>Large diameter of manual attachement tool</description>
                    </item>
                    <item>
                        <term>BL</term>
                        <description>A large diameter tool with a lid</description>
                    </item>
                    <item>
                        <term>D</term>
                        <description>Dummy tool</description>
                    </item>
                </list>
            </remarks>
            <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL POT TABLE - POT - TOOL KIND
<para> Fixed ATC</para><img src="../media/MC.TOOLID.PotToolTable.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.PotToolTable.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolName(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets tool name for a given pot number.
</para>
                <para>
Memory Random ATC: Gets tool name for a given tool number.
</para>
            </summary>
            <example> This sample shows how to call the GetToolName method.
<para> Dim objTools2 As New CTools2  </para><para> Dim intToolPotNo As Integer </para><para> Dim strValue As String </para><para> strValue = objTools2.GetToolName(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot Number</param>
            <returns>A System.String value that represents the tool name for a given tool/pot number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - POT - TOOL NAME.
<para> Fixed ATC</para><img src="../media/MC.TOOLID.PotToolTable.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.PotToolTable.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetSerialNo(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Gets the tool serial number for a given pot number.
</para>
                <para>
Memory Random ATC: Gets the tool serial number for a given tool number.
</para>
            </summary>
            <example> This sample shows how to call the GetSerialNo method.
<para>Dim objTools2 As New CTools2  </para><para>Dim intValue As Integer </para><para>intValue = objTools2.GetSerialNo(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot Number.</param>
            <returns>A System.Int32 value that represents the tool serial number for a given tool/pot number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - POT - SER. NO.
<para> Fixed ATC</para><img src="../media/MC.TOOLID.PotToolTable.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.PotToolTable.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetGroupNo(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Get group number for a given pot number.
</para>
                <para>
Memory Random ATC: Get group number for a given tool number.
</para>
                <para>In case of dummy tool/pot, the function returns 'DUMMY'.</para>
            </summary>
            <example> This sample shows how to call the GetGroupNo method.
<para>		Dim objTools2 As New CTools2  </para><para>		Dim intToolPotNo As Integer </para><para>		Dim strValue As String </para><para>		strValue = objTools2.GetGroupNo(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot Number.</param>
            <returns>A System.String value that represents group number for a given tool/pot number.</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - POT - GROUP NO.
<para> Fixed ATC</para><img src="../media/MC.TOOLID.PotToolTable.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.PotToolTable.RandomATC.jpg" /></Figure>
        </member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.IsToolInUse(System.Int32)">
            <summary>
                <para>
Fixed Address ATC: Determine if a registered tool is in USE state at the specified pot index.
</para>
                <para>
Memory Random ATC: Determine if a registered tool is in USE state at the specified tool index.
</para>
            </summary>
            <example> This sample shows how to call the IsToolInUse method.
<para>Dim objTools2 As New CTools2  </para><para>Dim intToolPotNo As Integer </para><para>Dim blnValue As Boolean </para><para>blnValue = objTools2.IsToolInUse(intToolPotNo) </para></example>
            <param name="intToolPotNo">Tool/Pot Number</param>
            <returns>A System.Boolean Value.  True if it is in use, otherwise false</returns>
            <exception cref="T:System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
            <Figure> TOOL DATA - TOOL ID INFORMATION - POT - USE
<para> Fixed ATC</para><img src="../media/MC.TOOLID.PotToolTable.jpg" /><para> Random ATC</para><img src="../media/MC.TOOLID.PotToolTable.RandomATC.jpg" /></Figure>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CTools2">
            <summary>
Class provides offsets and tool life information for 8-digits Tool ID specification..
</summary>
            <remarks>
                <para>
Except where it is noted, all indexing parameters are 1-based index.
</para>
                <para>
The following specifications must be met in order to function:
<list type="table"><listheader><term>Specification</term><description>Valid/Invalid</description></listheader><item><term>8-Digits Tool ID specification</term><description>Valid</description></item></list></para>
                <para>
********************* This class cannot be supported in OSP-P100 II machines. ************************
</para>
            </remarks>
            <Version> Required MC.dll Version 43.1.0.0 1502N-z0041(TOOL-ID B Watch software)</Version>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CBase">
[enter] <summary>
Base class for all classes of Data API that handles error handling, logging service, and other services for internal data structure of this library ONLY.
</summary></member>
        <member name="M:Okuma.CMDATAPI.DataAPI.CAPISpecException.#ctor(System.String)">
            <summary>
Create an instance of CAPISpecException class given error message
</summary>
            <param name="strMessage">Error message</param>
        </member>
        <member name="T:Okuma.CMDATAPI.DataAPI.CAPISpecException">
            <summary>
This exception class will be thrown during a call to CMachine.Init method if the API Specification is not enabled on machine
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetRunningTime(System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetAlarmNumber(System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetAlarmCode(System.Int32,System.Int32)'. -->
    </members>
</doc>